This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
CreateEventController.java
CreateEventsRepository.java
Event.java
EventDetailsController.java
EventsController.java
EventsRepository.java

================================================================
Files
================================================================

================
File: CreateEventController.java
================
package com.example.projetjavafx.root.events;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import javafx.scene.image.Image;
import javafx.scene.image.ImageView;


import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;

public class CreateEventController {


    @FXML
    private TextField nameField;
    @FXML
    private TextArea descriptionField;
    @FXML
    private DatePicker startDatePicker;
    @FXML
    private DatePicker endDatePicker;
    @FXML
    private TextField locationField;

    @FXML
    private ComboBox<String> categoryComboBox;
    @FXML
    private ImageView imagePreview;


    private String base64Image; // Stores the encoded image

    @FXML
    public void initialize() {
//        loadOrganizers();
        loadCategories();
    }

    @FXML
    public void onUploadImageClick(ActionEvent event) {
        FileChooser fileChooser = new FileChooser();
        fileChooser.getExtensionFilters().addAll(
                new FileChooser.ExtensionFilter("Image Files", "*.png", "*.jpg", "*.jpeg")
        );
        File file = fileChooser.showOpenDialog(null);

        if (file != null) {
            try {
                byte[] fileContent = Files.readAllBytes(file.toPath());
                base64Image = Base64.getEncoder().encodeToString(fileContent);

                Image image = new Image(file.toURI().toString());
                imagePreview.setImage(image);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }




    @FXML
    public void onSaveEventClick() {
        String name = nameField.getText();
        String description = descriptionField.getText();
        LocalDate startDate = startDatePicker.getValue();
        LocalDate endDate = endDatePicker.getValue();
        String location = locationField.getText();

        String category = categoryComboBox.getValue();

        if (name.isEmpty() || startDate == null || endDate == null
                || category == null || base64Image == null) {
            System.out.println("Veuillez remplir tous les champs.");
            return;
        }

        int temporaryOrganizerId = 1;
        int categoryId = Integer.parseInt(category.split(" - ")[0]);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

        try (Connection connection = AivenMySQLManager.getConnection()) {
            String query = "INSERT INTO Events (name, description, start_time, end_time, location, organizer_id, category_id, image) VALUES (?, ?, ?, ?, ?, 1, ?, ?)";
            PreparedStatement statement = connection.prepareStatement(query);

            statement.setString(1, name);
            statement.setString(2, description);
            statement.setString(3, startDate.format(formatter));
            statement.setString(4, endDate.format(formatter));
            statement.setString(5, location);
            statement.setInt(6, categoryId); // Nouvel indice
            statement.setString(7, base64Image); // Nouvel indice

            statement.executeUpdate();
            System.out.println("Événement ajouté avec succès !");
            goToEventsPage();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }




//    private void loadOrganizers() {
//        ObservableList<String> organizers = FXCollections.observableArrayList();
//        try (Connection connection = AivenMySQLManager.getConnection()) {
//            String query = "SELECT user_id, username FROM Users";
//            ResultSet resultSet = connection.createStatement().executeQuery(query);
//
//            while (resultSet.next()) {
//                String organizer = resultSet.getInt("user_id") + " - " + resultSet.getString("username");
//                organizers.add(organizer);
//            }
//            organizerComboBox.setItems(organizers);
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }

    private void loadCategories() {
        ObservableList<String> categories = FXCollections.observableArrayList();
        try (Connection connection = AivenMySQLManager.getConnection()) {
            String query = "SELECT category_id, name FROM Categories";
            ResultSet resultSet = connection.createStatement().executeQuery(query);

            while (resultSet.next()) {
                String category = resultSet.getInt("category_id") + " - " + resultSet.getString("name");
                categories.add(category);
            }
            categoryComboBox.setItems(categories);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }




    @FXML
    private void onCancelClick() {

        goToEventsPage();

    }




    private void goToEventsPage() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/events/events-view.fxml"));
            Stage stage = (Stage) nameField.getScene().getWindow();
            Scene scene = new Scene(loader.load());
            stage.setScene(scene);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    @FXML
    private void goToHomePage() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/root/root-view.fxml"));
            Stage stage = (Stage) nameField.getScene().getWindow();
            Scene scene = new Scene(loader.load());
            stage.setScene(scene);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @FXML
    private void goToAnalyticsPage() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/organizer/analytics-view.fxml"));
            Stage stage = (Stage) nameField.getScene().getWindow();
            Scene scene = new Scene(loader.load());
            stage.setScene(scene);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }



}

================
File: CreateEventsRepository.java
================
package com.example.projetjavafx.root.events;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

import java.sql.*;

public class CreateEventsRepository {
    public static ObservableList<String> getOrganizers() {
        ObservableList<String> organizers = FXCollections.observableArrayList();
        String sql = "SELECT user_id, username FROM Users"; // Adapte selon ta table Users

        try (Connection connection = AivenMySQLManager.getConnection();
             Statement stmt = connection.createStatement();
             ResultSet resultSet = stmt.executeQuery(sql)) {
            while (resultSet.next()) {
                String organizer = resultSet.getInt("user_id") + " - " + resultSet.getString("username");
                organizers.add(organizer);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return organizers;
    }



    public static void createEvent(String name, String description, String startTime, String endTime,
                                   String location, int categoryId, String imagePath) throws SQLException {
        String sql = "INSERT INTO Events (name, description, start_time, end_time, location, organizer_id, category_id, image) " +
                "VALUES (?, ?, ?, ?, ?, 1, ?, ?)";

        try (Connection connection = AivenMySQLManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setString(1, name);
            statement.setString(2, description);
            statement.setString(3, startTime);
            statement.setString(4, endTime);
            statement.setString(5, location);
            statement.setInt(6, categoryId); // Devient le 6ème paramètre
            statement.setString(7, imagePath); // 7ème paramètre

            statement.executeUpdate();
        }
    }
}

================
File: Event.java
================
package com.example.projetjavafx.root.events;

public class Event {
    private String name;
    private String description;
    private String startDate; // Stockée en String
    private String endDate;   // Stockée en String
    private String location;
    private String imageBase64;
    private String categoryName;

    // Constructeur sans argument
    public Event() {
    }

    // Getters et Setters
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }
    public void setDescription(String description) {
        this.description = description;
    }

    public String getStartDate() {
        return startDate;
    }
    public void setStartDate(String startDate) {
        this.startDate = startDate;
    }

    public String getEndDate() {
        return endDate;
    }
    public void setEndDate(String endDate) {
        this.endDate = endDate;
    }

    public String getLocation() {
        return location;
    }
    public void setLocation(String location) {
        this.location = location;
    }

    public String getImageBase64() {
        return imageBase64;
    }
    public void setImageBase64(String imageBase64) {
        this.imageBase64 = imageBase64;
    }

    public String getCategoryName() {
        return categoryName;
    }
    public void setCategoryName(String categoryName) {
        this.categoryName = categoryName;
    }
}

================
File: EventDetailsController.java
================
package com.example.projetjavafx.root.events;

import javafx.fxml.FXML;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.text.Text;
import javafx.stage.Stage;

import java.io.ByteArrayInputStream;
import java.util.Base64;

public class EventDetailsController {

    @FXML
    private ImageView eventImage;
    @FXML
    private Label eventName;
    @FXML
    private Text eventDescription;
    @FXML
    private Text eventDate;
    @FXML
    private Text eventLocation;


    @FXML
    public void initialize() {
        // Appliquer le style CSS global à la fenêtre popup
        eventImage.getStyleClass().add("popup-image");
        eventName.getStyleClass().add("popup-title");
        eventDescription.getStyleClass().add("popup-text");
        eventDate.getStyleClass().add("popup-text");
        eventLocation.getStyleClass().add("popup-text");
    }


    public void setEventDetails(String name, String description, String startDate, String endDate, String location, String imageBase64) {
        eventName.setText(name);
        eventDescription.setText(description);
        eventDate.setText("Date: " + startDate + " - " + endDate);
        eventLocation.setText("Location: " + location);

        if (imageBase64 != null && !imageBase64.isEmpty()) {
            byte[] imageBytes = Base64.getDecoder().decode(imageBase64);
            Image image = new Image(new ByteArrayInputStream(imageBytes));
            eventImage.setImage(image);
        }
    }

    @FXML
    private void closeWindow() {
        Stage stage = (Stage) eventName.getScene().getWindow();
        stage.close();
    }
}

================
File: EventsController.java
================
package com.example.projetjavafx.root.events;

import javafx.application.Platform;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

import java.io.ByteArrayInputStream;
import java.util.Base64;
import java.util.Optional;

public class EventsController {

    // Champs injectés depuis le FXML
    public TextField searchField;
    @FXML
    private FlowPane eventsContainer;
    @FXML
    private ComboBox<String> categoryFilter;

    // Vos indicateurs de chargement (ici on utilise une fenêtre de chargement)
    // Vous pouvez garder votre spinner et progressIndicator selon votre préférence

    // Variable pour stocker la tâche en cours
    private Task<ObservableList<Event>> currentLoadTask;

    @FXML
    public void initialize() {
        // Charger les catégories et les mettre dans la ComboBox
        ObservableList<String> categories = EventsRepository.getCategories();
        categoryFilter.setItems(categories);
        categoryFilter.getSelectionModel().select("All");

        // Charger les événements une fois que la scène est attachée à la fenêtre
        Platform.runLater(() -> loadEvents(searchField.getText(), categoryFilter.getValue()));

        // Ajouter des écouteurs pour relancer le chargement quand le texte de recherche ou la catégorie change
        searchField.textProperty().addListener((observable, oldValue, newValue) -> {
            loadEvents(newValue, categoryFilter.getValue());
        });
        categoryFilter.valueProperty().addListener((observable, oldValue, newValue) -> {
            loadEvents(searchField.getText(), newValue);
        });
    }

    private void loadView(String fxmlPath) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlPath));
            Parent root = loader.load();
            Stage stage = (Stage) eventsContainer.getScene().getWindow();
            stage.setScene(new Scene(root));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void loadEvents(String searchText, String category) {
        // Créer une nouvelle fenêtre de chargement personnalisée
        Stage loadingStage = new Stage();
        loadingStage.initStyle(StageStyle.UNDECORATED); // Pas de bordure, ni de barre de titre
        loadingStage.initModality(Modality.NONE);        // Non modal pour ne pas bloquer la fenêtre principale

        // Création d'un indicateur de progression et d'un message
        ProgressIndicator progressIndicator = new ProgressIndicator();
        Label loadingMessage = new Label("Loading...");

        // Disposer le tout dans une VBox centrée
        VBox loadingRoot = new VBox(10);
        loadingRoot.setAlignment(Pos.CENTER);
        loadingRoot.getChildren().addAll(progressIndicator, loadingMessage);
        loadingRoot.setStyle("-fx-padding: 20; -fx-background-color: rgba(0,0,0,0.3);");

        Scene loadingScene = new Scene(loadingRoot, 200, 150);
        loadingStage.setScene(loadingScene);

        // Centrer la fenêtre de chargement par rapport à la fenêtre principale
        if (eventsContainer.getScene() != null) {
            Stage mainStage = (Stage) eventsContainer.getScene().getWindow();
            loadingStage.setX(mainStage.getX() + (mainStage.getWidth() - 200) / 2);
            loadingStage.setY(mainStage.getY() + (mainStage.getHeight() - 150) / 2);
        } else {
            loadingStage.centerOnScreen();
        }

        // Afficher la fenêtre de chargement
        loadingStage.show();

        // Vider le conteneur avant de charger les nouveaux événements
        eventsContainer.getChildren().clear();

        // Créer une tâche en arrière-plan pour récupérer les événements
        Task<ObservableList<Event>> loadTask = new Task<ObservableList<Event>>() {
            @Override
            protected ObservableList<Event> call() {
                return EventsRepository.getEvents(searchText, category);
            }
        };

        loadTask.setOnSucceeded(e -> {
            ObservableList<Event> events = loadTask.getValue();
            for (Event event : events) {
                VBox eventBox = new VBox(10);
                eventBox.getStyleClass().add("event-card");

                String start = event.getStartDate() != null ? event.getStartDate() : "N/A";
                String end = event.getEndDate() != null ? event.getEndDate() : "N/A";
                String categoryDisplay = event.getCategoryName() != null ? event.getCategoryName() : "No Category";

                Text eventText = new Text(
                        event.getName() + "\n" +
                                event.getDescription() + "\n" +
                                start + " - " + end + "\n" +
                                event.getLocation() + "\nCatégorie : " + categoryDisplay
                );
                eventText.getStyleClass().add("event-description");

                ImageView imageView = new ImageView();
                if (event.getImageBase64() != null && !event.getImageBase64().isEmpty()) {
                    try {
                        byte[] imageBytes = Base64.getDecoder().decode(event.getImageBase64());
                        Image image = new Image(new ByteArrayInputStream(imageBytes));
                        imageView.setImage(image);
                        imageView.setFitWidth(200);
                        imageView.setPreserveRatio(true);
                    } catch (IllegalArgumentException ex) {
                        System.err.println("Données image invalides pour l'événement : " + event.getName());
                    }
                }
                imageView.getStyleClass().add("event-image");

                Button viewDetailsButton = new Button("View Details");
                viewDetailsButton.getStyleClass().add("event-button");
                viewDetailsButton.setOnAction(ev -> showEventDetails(event));

                Button participateButton = new Button("Participer");
                participateButton.getStyleClass().add("event-button-secondary");
                participateButton.setOnAction(ev -> confirmParticipation(event.getName()));

                HBox buttonContainer = new HBox(10, viewDetailsButton, participateButton);
                buttonContainer.getStyleClass().add("event-buttons");

                eventBox.getChildren().addAll(imageView, eventText, buttonContainer);
                eventsContainer.getChildren().add(eventBox);
            }
            // Fermer la fenêtre de chargement une fois les événements chargés
            Platform.runLater(loadingStage::close);
        });

        // Ajoutez également un handler pour l'annulation de la tâche
        loadTask.setOnCancelled(e -> Platform.runLater(loadingStage::close));

        loadTask.setOnFailed(e -> {
            Platform.runLater(loadingStage::close);
            loadTask.getException().printStackTrace();
        });

        // Démarrer la tâche en arrière-plan
        new Thread(loadTask).start();
    }


    private void confirmParticipation(String eventName) {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Confirmation de participation");
        alert.setHeaderText(null);
        alert.setContentText("Voulez-vous vraiment participer à l'événement : " + eventName + " ?");
        Optional<ButtonType> result = alert.showAndWait();
        if (result.isPresent() && result.get() == ButtonType.OK) {
            System.out.println("Participation confirmée pour : " + eventName);
        } else {
            System.out.println("Participation annulée.");
        }
    }

    private void showEventDetails(Event event) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/events/event-details.fxml"));
            Parent root = loader.load();

            EventDetailsController controller = loader.getController();
            String start = event.getStartDate() != null ? event.getStartDate() : "N/A";
            String end = event.getEndDate() != null ? event.getEndDate() : "N/A";
            controller.setEventDetails(event.getName(), event.getDescription(), start, end, event.getLocation(), event.getImageBase64());

            Stage stage = new Stage();
            Scene scene = new Scene(root);

            String cssFile = getClass().getResource("/css/event-details.css") != null ?
                    getClass().getResource("/css/event-details.css").toExternalForm() : null;
            if (cssFile != null) {
                scene.getStylesheets().add(cssFile);
            } else {
                System.out.println("⚠ Fichier CSS non trouvé !");
            }
            stage.setScene(scene);
            stage.setTitle("Event Details");
            stage.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @FXML
    public void onNewEventClick() {
        loadView("/com/example/projetjavafx/events/create-events.fxml");
    }

    @FXML
    private void onCategorySelected() {
        loadEvents(searchField.getText(), categoryFilter.getValue());
    }

    public void handleHomeButton(ActionEvent actionEvent) {
        loadView("/com/example/projetjavafx/root/root-view.fxml");
    }

    public void onAnalyticsClick(ActionEvent actionEvent) {
        loadView("/com/example/projetjavafx/organizer/analytics-view.fxml");
    }

    public void onCreateJobClick(ActionEvent actionEvent) {
        loadView("/com/example/projetjavafx/organizer/create-job-offer-view.fxml");
    }

    public void onJobFeedButtonClick(ActionEvent actionEvent) {
        loadView("/com/example/projetjavafx/jobfeed/job-feed-view.fxml");
    }
}

================
File: EventsRepository.java
================
package com.example.projetjavafx.root.events;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

import java.sql.*;

public class EventsRepository {

    // Récupère la liste des catégories depuis la table Categories
    public static ObservableList<String> getCategories() {
        ObservableList<String> categories = FXCollections.observableArrayList();
        categories.add("All"); // Option par défaut
        String sql = "SELECT category_id, name FROM Categories";
        try (Connection connection = AivenMySQLManager.getConnection();
             Statement stmt = connection.createStatement();
             ResultSet resultSet = stmt.executeQuery(sql)) {
            while (resultSet.next()) {
                int categoryId = resultSet.getInt("category_id");
                String categoryName = resultSet.getString("name");
                categories.add(categoryId + " - " + categoryName);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return categories;
    }

    // Récupère la liste des événements en fonction d'un texte de recherche et d'un filtre de catégorie
    public static ObservableList<Event> getEvents(String searchText, String category) {
        ObservableList<Event> events = FXCollections.observableArrayList();
        String query = "SELECT e.*, c.name AS category_name " +
                "FROM Events e " +
                "LEFT JOIN Categories c ON e.category_id = c.category_id " +
                "WHERE 1=1 ";
        if (searchText != null && !searchText.isEmpty()) {
            query += "AND (LOWER(e.name) LIKE ? OR LOWER(e.description) LIKE ?) ";
        }
        if (category != null && !category.equals("All")) {
            query += "AND e.category_id = ? ";
        }
        query += " GROUP BY e.event_id, e.name, e.description, e.start_time, e.end_time, e.location, e.image, c.name";

        try (Connection connection = AivenMySQLManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(query)) {

            int paramIndex = 1;
            if (searchText != null && !searchText.isEmpty()) {
                String searchPattern = "%" + searchText.toLowerCase() + "%";
                statement.setString(paramIndex++, searchPattern);
                statement.setString(paramIndex++, searchPattern);
            }
            if (category != null && !category.equals("All")) {
                int categoryId = Integer.parseInt(category.split(" - ")[0]);
                statement.setInt(paramIndex++, categoryId);
            }

            ResultSet resultSet = statement.executeQuery();
            while (resultSet.next()) {
                Event event = new Event();
                event.setName(resultSet.getString("name"));
                event.setDescription(resultSet.getString("description"));
                // Ici, on récupère directement les dates sous forme de String
                event.setStartDate(resultSet.getString("start_time"));
                event.setEndDate(resultSet.getString("end_time"));
                event.setLocation(resultSet.getString("location"));
                event.setImageBase64(resultSet.getString("image"));
                event.setCategoryName(resultSet.getString("category_name"));
                events.add(event);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return events;
    }
}



================================================================
End of Codebase
================================================================
