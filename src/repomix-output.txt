This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
main/java/com/example/projetjavafx/root/ApplicationRoot.java
main/java/com/example/projetjavafx/root/auth/AuthController.java
main/java/com/example/projetjavafx/root/auth/AuthRepository.java
main/java/com/example/projetjavafx/root/auth/CategorieController.java
main/java/com/example/projetjavafx/root/auth/CategorieRepository.java
main/java/com/example/projetjavafx/root/auth/LoginController.java
main/java/com/example/projetjavafx/root/auth/LoginRepository.java
main/java/com/example/projetjavafx/root/auth/LogoutController.java
main/java/com/example/projetjavafx/root/auth/PasswordController.java
main/java/com/example/projetjavafx/root/auth/PasswordRepository.java
main/java/com/example/projetjavafx/root/auth/SessionManager.java
main/java/com/example/projetjavafx/root/auth/UsernameController.java
main/java/com/example/projetjavafx/root/auth/UsernameRepository.java
main/java/com/example/projetjavafx/root/DbConnection/AivenMySQLManager.java
main/java/com/example/projetjavafx/root/events/CreateEventController.java
main/java/com/example/projetjavafx/root/events/CreateEventsRepository.java
main/java/com/example/projetjavafx/root/events/Event.java
main/java/com/example/projetjavafx/root/events/EventDetailsController.java
main/java/com/example/projetjavafx/root/events/EventsController.java
main/java/com/example/projetjavafx/root/events/EventsRepository.java
main/java/com/example/projetjavafx/root/explore/ExploreController.java
main/java/com/example/projetjavafx/root/group/GroupAddController.java
main/java/com/example/projetjavafx/root/group/GroupAddMemberController.java
main/java/com/example/projetjavafx/root/group/GroupAddMemberRepository.java
main/java/com/example/projetjavafx/root/group/GroupAddRepository.java
main/java/com/example/projetjavafx/root/group/GroupDetailsController.java
main/java/com/example/projetjavafx/root/group/GroupDetailsRepository.java
main/java/com/example/projetjavafx/root/group/GroupMembersController.java
main/java/com/example/projetjavafx/root/group/GroupMembersRepository.java
main/java/com/example/projetjavafx/root/group/GroupProfileController.java
main/java/com/example/projetjavafx/root/group/GroupProfileRepository.java
main/java/com/example/projetjavafx/root/group/SearchMemberRepository.java
main/java/com/example/projetjavafx/root/jobApplications/Application.java
main/java/com/example/projetjavafx/root/jobApplications/AppliedJobsController.java
main/java/com/example/projetjavafx/root/jobApplications/AppliedJobsRepository.java
main/java/com/example/projetjavafx/root/jobApplications/JobApplicationsController.java
main/java/com/example/projetjavafx/root/jobApplications/JobApplicationsRepository.java
main/java/com/example/projetjavafx/root/jobFeed/ApplicationFormController.java
main/java/com/example/projetjavafx/root/jobFeed/ApplicationRepository.java
main/java/com/example/projetjavafx/root/jobFeed/GeminiEvaluation.java
main/java/com/example/projetjavafx/root/jobFeed/JobFeedController.java
main/java/com/example/projetjavafx/root/jobFeed/JobFeedRepository.java
main/java/com/example/projetjavafx/root/organizer/AdsDashboard.java
main/java/com/example/projetjavafx/root/organizer/AnalyticsController.java
main/java/com/example/projetjavafx/root/organizer/AnalyticsRepository.java
main/java/com/example/projetjavafx/root/organizer/CreateJobOfferController.java
main/java/com/example/projetjavafx/root/organizer/EventStats.java
main/java/com/example/projetjavafx/root/organizer/Job.java
main/java/com/example/projetjavafx/root/organizer/JobRepository.java
main/java/com/example/projetjavafx/root/organizer/OrganizerController.java
main/java/com/example/projetjavafx/root/organizer/OrganizerRepository.java
main/java/com/example/projetjavafx/root/profile/EditProfileController.java
main/java/com/example/projetjavafx/root/profile/EditProfileRepository.java
main/java/com/example/projetjavafx/root/profile/ProfileController.java
main/java/com/example/projetjavafx/root/profile/ProfileRepository.java
main/java/com/example/projetjavafx/root/RootController.java
main/java/com/example/projetjavafx/root/social/Account.java
main/java/com/example/projetjavafx/root/social/GroupController.java
main/java/com/example/projetjavafx/root/social/Post.java
main/java/com/example/projetjavafx/root/social/PostAudience.java
main/java/com/example/projetjavafx/root/social/PostController.java
main/java/com/example/projetjavafx/root/social/PostDAO.java
main/java/com/example/projetjavafx/root/social/PostItemController.java
main/java/com/example/projetjavafx/root/social/Reactions.java
main/java/com/example/projetjavafx/root/social/SocialController.java
main/java/module-info.java
main/resources/com/example/projetjavafx/auth/categories-view.fxml
main/resources/com/example/projetjavafx/auth/login-view.fxml
main/resources/com/example/projetjavafx/auth/password-view.fxml
main/resources/com/example/projetjavafx/auth/register-view.fxml
main/resources/com/example/projetjavafx/auth/username-view.fxml
main/resources/com/example/projetjavafx/events/create-events.fxml
main/resources/com/example/projetjavafx/events/css/create-events.css
main/resources/com/example/projetjavafx/events/css/event-details.css
main/resources/com/example/projetjavafx/events/css/events.css
main/resources/com/example/projetjavafx/events/event-details.fxml
main/resources/com/example/projetjavafx/events/events-view.fxml
main/resources/com/example/projetjavafx/explore/explore-view.fxml
main/resources/com/example/projetjavafx/group/css/group_profile.css
main/resources/com/example/projetjavafx/group/css/group-add-member.css
main/resources/com/example/projetjavafx/group/css/group-add.css
main/resources/com/example/projetjavafx/group/group-add-view.fxml
main/resources/com/example/projetjavafx/group/group-details.fxml
main/resources/com/example/projetjavafx/group/group-members-view.fxml
main/resources/com/example/projetjavafx/group/group-profile-view.fxml
main/resources/com/example/projetjavafx/JobApplications/application_review-view.fxml
main/resources/com/example/projetjavafx/JobApplications/applied-jobs.fxml
main/resources/com/example/projetjavafx/JobApplications/css/ApplicationsReview.css
main/resources/com/example/projetjavafx/jobfeed/application-form.fxml
main/resources/com/example/projetjavafx/jobfeed/css/application-form.css
main/resources/com/example/projetjavafx/jobfeed/css/job-feed.css
main/resources/com/example/projetjavafx/jobfeed/job-feed-view.fxml
main/resources/com/example/projetjavafx/organizer/analytics-view.fxml
main/resources/com/example/projetjavafx/organizer/create-job-offer-view.fxml
main/resources/com/example/projetjavafx/organizer/css/analytics.css
main/resources/com/example/projetjavafx/organizer/css/application-form.css
main/resources/com/example/projetjavafx/organizer/css/create-job.css
main/resources/com/example/projetjavafx/organizer/css/orgnaizer.css
main/resources/com/example/projetjavafx/organizer/organizer-view.fxml
main/resources/com/example/projetjavafx/profile/edit-view.fxml
main/resources/com/example/projetjavafx/profile/profile-view.fxml
main/resources/com/example/projetjavafx/root/css/root.css
main/resources/com/example/projetjavafx/root/root-view.fxml
main/resources/com/example/projetjavafx/social/css/social.css
main/resources/com/example/projetjavafx/social/Feed.fxml
main/resources/com/example/projetjavafx/social/GroupFeed.fxml
main/resources/com/example/projetjavafx/social/PostCreation.fxml
main/resources/com/example/projetjavafx/social/PostItem.fxml

================================================================
Files
================================================================

================
File: main/java/com/example/projetjavafx/root/ApplicationRoot.java
================
package com.example.projetjavafx.root;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

import java.io.IOException;
import java.sql.SQLException;

public class ApplicationRoot extends Application {
    @Override
    public void start(Stage stage) throws IOException, SQLException {
        FXMLLoader fxmlLoader = new FXMLLoader(ApplicationRoot.class.getResource("/com/example/projetjavafx/root/root-view.fxml"));
        Parent root = fxmlLoader.load();
        double x = root.prefWidth(-1);
        double y = root.prefHeight(-1);
        Scene scene = new Scene(root,x,y);
        stage.setTitle("Hello!");
        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch();
    }
}

================
File: main/java/com/example/projetjavafx/root/auth/AuthController.java
================
package com.example.projetjavafx.root.auth;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;

import java.io.IOException;
import java.sql.SQLException;

public class AuthController {

    @FXML
    private TextField username;

    @FXML
    private TextField email;

    @FXML
    private TextField password;

    @FXML
    private TextField age;

    @FXML
    private RadioButton male;

    @FXML
    private RadioButton female;

    @FXML
    private Button register;

    @FXML
    private Button login;

    private ToggleGroup genderGroup;


    private AuthRepository userModel = new AuthRepository();


    @FXML
    public void initialize() {
        System.out.println("Initialisation du contrôleur...");

        // Initialisation du ToggleGroup pour le sexe
        genderGroup = new ToggleGroup();
        male.setToggleGroup(genderGroup);
        female.setToggleGroup(genderGroup);

        // S'assurer qu'au moins un choix est obligatoire
        genderGroup.selectedToggleProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue == null) {
                male.setSelected(true); // Par défaut, sélectionner "Male"
            }
        });
    }
    @FXML
    private void onSignupClick(ActionEvent event) {
        if (genderGroup.getSelectedToggle() == null) {
            showAlert(Alert.AlertType.WARNING, "Sélection requise", "Veuillez sélectionner votre sexe.");
            return;
        }

        String usernameText = username.getText();
        String emailText = email.getText();
        String passwordText = password.getText();
        String ageText = age.getText();

        if (usernameText.isEmpty() || emailText.isEmpty() || passwordText.isEmpty() || ageText.isEmpty()) {
            showAlert(Alert.AlertType.WARNING, "Champs vides", "Veuillez remplir tous les champs.");
            return;
        }

        int ageValue;
        try {
            ageValue = Integer.parseInt(ageText);
        } catch (NumberFormatException e) {
            showAlert(Alert.AlertType.ERROR, "Âge invalide", "Veuillez entrer un âge valide.");
            return;
        }

        String sexe = male.isSelected() ? "Male" : "Female";

        try {
            if (userModel.userExists(emailText)) {
                showAlert(Alert.AlertType.ERROR, "Échec de l'inscription", "L'utilisateur existe déjà !");
            } else {
                int userId = userModel.insertUser(usernameText, emailText, passwordText, ageValue, sexe);
                if (userId > 0) {
                    showAlert(Alert.AlertType.INFORMATION, "Succès", "Inscription réussie !");
                    clearFields();
                    loadView("/com/example/projetjavafx/auth/categories-view.fxml", event, userId);
                } else {
                    showAlert(Alert.AlertType.ERROR, "Erreur", "Impossible d'ajouter l'utilisateur.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            showAlert(Alert.AlertType.ERROR, "Erreur de connexion", "Problème de connexion à la base de données.");
        }
    }

    @FXML
    private void onLoginClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/auth/login-view.fxml", event, -1);
    }

    private void showAlert(Alert.AlertType alertType, String title, String content) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }

    private void clearFields() {
        username.clear();
        email.clear();
        password.clear();
        age.clear();
        genderGroup.selectToggle(null);

    }

    private void loadView(String fxmlPath, ActionEvent event, int userId) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlPath));
            Parent root = loader.load();
            if (userId > 0) {
                CategorieController categorieController = loader.getController();
                categorieController.setUserId(userId);
            }
            Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            Scene scene = new Scene(root);
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

================
File: main/java/com/example/projetjavafx/root/auth/AuthRepository.java
================
package com.example.projetjavafx.root.auth;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class AuthRepository {

    public boolean userExists(String email) throws SQLException {
        String query = "SELECT COUNT(*) FROM Users WHERE email = ?";
        try (Connection connection = AivenMySQLManager.getConnection();
             PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, email);
            ResultSet rs = stmt.executeQuery();
            return rs.next() && rs.getInt(1) > 0;
        }
    }

    public int insertUser(String username, String email, String password, int age, String sexe) throws SQLException {
        String query = "INSERT INTO Users (username, email, password, age, gender) VALUES (?, ?, ?, ?, ?)";
        try (Connection connection = AivenMySQLManager.getConnection();
             PreparedStatement stmt = connection.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS)) {
            stmt.setString(1, username);
            stmt.setString(2, email);
            stmt.setString(3, password);
            stmt.setInt(4, age);
            stmt.setString(5, sexe);
            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                ResultSet rs = stmt.getGeneratedKeys();
                if (rs.next()) {
                    return rs.getInt(1);  // Retourne l'ID généré pour l'utilisateur
                }
            }
        }
        return -1;
    }
}

================
File: main/java/com/example/projetjavafx/root/auth/CategorieController.java
================
package com.example.projetjavafx.root.auth;

import com.example.projetjavafx.root.auth.CategorieRepository;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Button;
import javafx.stage.Stage;

import java.io.IOException;
import java.sql.SQLException;
public class CategorieController {

    @FXML
    private CheckBox music, sport, gaming, education, culturel, social, technologique;

    @FXML
    private Button valide;

    private int userId;  // ID de l'utilisateur qui vient de s'inscrire

    private CategorieRepository categorieModel = new CategorieRepository();

    public void setUserId(int userId) {
        this.userId = userId;  // Sauvegarde l'ID de l'utilisateur
    }

    @FXML
    public void onValideClick() {
        try {
            if (music.isSelected()) {
                int categoryId = categorieModel.getCategoryId("Music");
                categorieModel.insertUserInterest(userId, categoryId);
            }
            if (sport.isSelected()) {
                int categoryId = categorieModel.getCategoryId("Sport");
                categorieModel.insertUserInterest(userId, categoryId);
            }
            if (gaming.isSelected()) {
                int categoryId = categorieModel.getCategoryId("Gaming");
                categorieModel.insertUserInterest(userId, categoryId);
            }
            if (education.isSelected()) {
                int categoryId = categorieModel.getCategoryId("Éducation");
                categorieModel.insertUserInterest(userId, categoryId);
            }
            if (culturel.isSelected()) {
                int categoryId = categorieModel.getCategoryId("Culturel");
                categorieModel.insertUserInterest(userId, categoryId);
            }
            if (social.isSelected()) {
                int categoryId = categorieModel.getCategoryId("Social");
                categorieModel.insertUserInterest(userId, categoryId);
            }
            if (technologique.isSelected()) {
                int categoryId = categorieModel.getCategoryId("Technologique");
                categorieModel.insertUserInterest(userId, categoryId);
            }

            System.out.println("Catégories et intérêts utilisateur ajoutés avec succès !");
            openLoginView();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void openLoginView() {
        try {
            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/auth/login-view.fxml"));
            Stage stage = (Stage) valide.getScene().getWindow();
            Scene scene = new Scene(fxmlLoader.load());

            stage.setScene(scene);
            stage.setTitle("Login");
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Erreur lors du chargement de la page de connexion.");
        }
    }

}

================
File: main/java/com/example/projetjavafx/root/auth/CategorieRepository.java
================
package com.example.projetjavafx.root.auth;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;


public class CategorieRepository {
    private Connection connect() throws SQLException {
        String url = "jdbc:mysql://mysql-1dcac8df-moamedsalahsaoudi123-c05d.e.aivencloud.com:22451/projet_integre_db?ssl-mode=REQUIRED";
        String user = "avnadmin";
        String password = "AVNS_5qB58jyOaJs3WW0eYS9";
        return DriverManager.getConnection(url, user, password);
    }

    public int getCategoryId(String categoryName) throws SQLException {
        String query = "SELECT category_id FROM Categories WHERE name = ?";
        try (Connection conn = connect();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, categoryName);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getInt("category_id");
            }
        }
        return -1;  // Retourne -1 si la catégorie n'existe pas
    }

    public void insertUserInterest(int userId, int categoryId) throws SQLException {
        String checkSql = "SELECT COUNT(*) FROM UserInterests WHERE user_id = ? AND category_id = ?";
        String insertSql = "INSERT INTO UserInterests (user_id, category_id) VALUES (?, ?)";

        try (Connection conn = connect();
             PreparedStatement checkStmt = conn.prepareStatement(checkSql);
             PreparedStatement insertStmt = conn.prepareStatement(insertSql)) {

            // Vérifie si la catégorie est déjà enregistrée pour cet utilisateur
            checkStmt.setInt(1, userId);
            checkStmt.setInt(2, categoryId);
            ResultSet rs = checkStmt.executeQuery();

            if (rs.next() && rs.getInt(1) > 0) {
                System.out.println("L'utilisateur a déjà cette catégorie : " + categoryId);
                return; // Ne pas insérer de doublon
            }

            // Insérer seulement si ce n'est pas déjà enregistré
            insertStmt.setInt(1, userId);
            insertStmt.setInt(2, categoryId);
            insertStmt.executeUpdate();
        }
    }
}

================
File: main/java/com/example/projetjavafx/root/auth/LoginController.java
================
package com.example.projetjavafx.root.auth;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.stage.Stage;

import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;

public class LoginController {

    @FXML
    private TextField username;

    @FXML
    private TextField password;

    @FXML
    private Button login;

    @FXML
    private Button signup;

    private final LoginRepository userModel = new LoginRepository();

    @FXML
    private void initialize() {
        // Set the login button to call handleLogin when clicked
        login.setOnAction(event -> handleLogin());
    }

    @FXML
    private void handleLogin() {
        String user = username.getText().trim();
        String pass = password.getText().trim();

        if (user.isEmpty() || pass.isEmpty()) {
            showAlert("Erreur", "Veuillez remplir tous les champs");
            return;
        }

        try (ResultSet resultSet = userModel.authenticate(user, pass)) {
            if (resultSet != null && resultSet.next()) { // Vérifie si le résultat contient des données
                int userId = resultSet.getInt("user_id");
                String email = resultSet.getString("email");

                // Stocker les informations de l'utilisateur connecté
                SessionManager.getInstance().setCurrentUser(userId, email);

                showAlert("Succès", "Connexion réussie");
                openHomeView();
            } else {
                showAlert("Erreur", "Nom d'utilisateur ou mot de passe incorrect");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            showAlert("Erreur", "Une erreur s'est produite lors de la connexion.");
        }
    }

    @FXML
    private void openHomeView() {
        try {
            // Corrected the FXML path to use an absolute path
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/root/root-view.fxml"));
            Parent root = loader.load();
            Scene scene = new Scene(root);
            Stage currentStage = (Stage) login.getScene().getWindow();
            currentStage.setScene(scene);
            currentStage.setTitle("Accueil");
            currentStage.show();
        } catch (IOException e) {
            e.printStackTrace();
            showAlert("Erreur", "Impossible d'ouvrir la page d'accueil.");
        }
    }

    @FXML
    private void onLoginClick(ActionEvent event) {
        // Corrected the FXML path to use an absolute path
        loadView("/com/example/projetjavafx/auth/register-view.fxml", event);
    }

    @FXML
    private void goToForgotPasswordPage(ActionEvent event) {
        // Corrected the FXML path to use an absolute path
        loadView("/com/example/projetjavafx/auth/username-view.fxml", event);
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void loadView(String fxmlPath, ActionEvent event) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlPath));
            Parent root = loader.load();
            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            stage.setScene(new Scene(root));
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();
            showAlert("Erreur", "Impossible de charger la vue : " + fxmlPath);
        }
    }
}

================
File: main/java/com/example/projetjavafx/root/auth/LoginRepository.java
================
package com.example.projetjavafx.root.auth;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class LoginRepository {
    private Connection connect() throws SQLException {
        String url = "jdbc:mysql://mysql-1dcac8df-moamedsalahsaoudi123-c05d.e.aivencloud.com:22451/projet_integre_db?ssl-mode=REQUIRED";
        String user = "avnadmin";
        String pass = "AVNS_5qB58jyOaJs3WW0eYS9";
        return DriverManager.getConnection(url, user, pass);
    }

    // Méthode pour authentifier l'utilisateur et retourner un ResultSet
    public ResultSet authenticate(String email, String password) {
        String query = "SELECT user_id, email FROM Users WHERE email = ? AND password = ?";

        try {
            Connection conn = connect();
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, email);
            stmt.setString(2, password);
            return stmt.executeQuery();
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }
}

================
File: main/java/com/example/projetjavafx/root/auth/LogoutController.java
================
package com.example.projetjavafx.root.auth;

import com.example.projetjavafx.root.auth.SessionManager;
import javafx.fxml.FXML;


public class LogoutController {
    @FXML
    private void onLogoutButtonClick() {
        // Déconnecter l'utilisateur
        SessionManager.getInstance().logout();

        // Rediriger vers la page de connexion
        openLoginView();
    }

    private void openLoginView() {
        // Charger et afficher la vue de connexion (login)
        // (Voir l'étape 5 pour un exemple complet)
    }
}

================
File: main/java/com/example/projetjavafx/root/auth/PasswordController.java
================
package com.example.projetjavafx.root.auth;

import com.example.projetjavafx.root.auth.PasswordRepository;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.stage.Stage;

import java.io.IOException;

public class PasswordController {

    @FXML
    private TextField newpassword;

    @FXML
    private TextField comfirmpassword;

    @FXML
    private Button buttonconfirmpass;

    private String email; // Récupéré depuis UsernameController

    private PasswordRepository passwordModel = new PasswordRepository();

    public void setEmail(String email) {
        this.email = email;
        System.out.println("Email reçu dans PasswordController: " + email); // Debug
    }

    @FXML
    private void initialize() {
        buttonconfirmpass.setOnAction(event -> changePassword());
    }

    private void changePassword() {
        String newPass = newpassword.getText();
        String confirmPass = comfirmpassword.getText();

        if (newPass.isEmpty() || confirmPass.isEmpty()) {
            showAlert(Alert.AlertType.WARNING, "Erreur", "Les champs ne doivent pas être vides.");
            return;
        }

        if (!newPass.equals(confirmPass)) {
            showAlert(Alert.AlertType.ERROR, "Erreur", "Les mots de passe ne correspondent pas.");
            return;
        }

        if (passwordModel.updatePassword(email, newPass)) {
            showAlert(Alert.AlertType.INFORMATION, "Succès", "Mot de passe modifié avec succès !");
            openLoginView();
        } else {
            showAlert(Alert.AlertType.ERROR, "Erreur", "Utilisateur non trouvé !");
        }
    }

    private void openLoginView() {
        try {
            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/auth/login-view.fxml"));
            Stage stage = (Stage) buttonconfirmpass.getScene().getWindow();
            stage.setScene(new Scene(fxmlLoader.load()));
            stage.setTitle("Login");
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();
            showAlert(Alert.AlertType.ERROR, "Erreur", "Impossible d'ouvrir la page de connexion.");
        }
    }

    private void showAlert(Alert.AlertType type, String title, String message) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}

================
File: main/java/com/example/projetjavafx/root/auth/PasswordRepository.java
================
package com.example.projetjavafx.root.auth;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class PasswordRepository {
    private Connection connect() throws SQLException {
        String url = "jdbc:mysql://mysql-1dcac8df-moamedsalahsaoudi123-c05d.e.aivencloud.com:22451/projet_integre_db?ssl-mode=REQUIRED";
        String user = "avnadmin";
        String pass = "AVNS_5qB58jyOaJs3WW0eYS9";
        return DriverManager.getConnection(url, user, pass);
    }

    public boolean updatePassword(String email, String newPassword) {
        String sql = "UPDATE Users SET password = ? WHERE email = ?";
        try (Connection conn = connect();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, newPassword);
            stmt.setString(2, email);

            int rowsUpdated = stmt.executeUpdate();
            return rowsUpdated > 0; // Retourne true si la mise à jour a réussi
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
}

================
File: main/java/com/example/projetjavafx/root/auth/SessionManager.java
================
package com.example.projetjavafx.root.auth;

public class SessionManager {
        private static SessionManager instance;
        private int currentUserId; // ID de l'utilisateur connecté
        private String currentUserEmail; // Email de l'utilisateur connecté (optionnel)

        // Constructeur privé pour empêcher l'instanciation directe
        private SessionManager() {}

        // Méthode pour obtenir l'instance unique de SessionManager
        public static SessionManager getInstance() {
            if (instance == null) {
                instance = new SessionManager();
            }
            return instance;
        }

        // Méthode pour définir l'utilisateur connecté
        public void setCurrentUser(int userId, String email) {
            this.currentUserId = userId;
            this.currentUserEmail = email;
        }

        // Méthode pour obtenir l'ID de l'utilisateur connecté
        public int getCurrentUserId() {
            return currentUserId;
        }

        // Méthode pour obtenir l'email de l'utilisateur connecté (optionnel)
        public String getCurrentUserEmail() {
            return currentUserEmail;
        }

        // Méthode pour déconnecter l'utilisateur
        public void logout() {
            this.currentUserId = -1;
            this.currentUserEmail = null;
        }
    }

================
File: main/java/com/example/projetjavafx/root/auth/UsernameController.java
================
package com.example.projetjavafx.root.auth;

import com.example.projetjavafx.root.auth.UsernameRepository;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.stage.Stage;

import java.io.IOException;



public class UsernameController {

    @FXML
    private TextField usernameField;

    @FXML
    private Button checkButton;

    private UsernameRepository usernameModel = new UsernameRepository();

    @FXML
    public void initialize() {
        checkButton.setOnAction(event -> checkUsername());
    }

    @FXML
    private void checkUsername() {
        String email = usernameField.getText().trim();

        if (email.isEmpty()) {
            showError("Veuillez entrer un email.");
            return;
        }

        if (usernameModel.usernameExists(email)) {
            loadPasswordPage();
        } else {
            showError("Email non trouvé.");
        }
    }

    private void showError(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("Erreur");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    @FXML
    private void loadPasswordPage() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/auth/password-view.fxml"));
            Parent passwordView = loader.load();

            // Passer l'email au PasswordController
            PasswordController passwordController = loader.getController();
            passwordController.setEmail(usernameField.getText());

            Scene scene = new Scene(passwordView);
            Stage stage = (Stage) checkButton.getScene().getWindow();
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();
            showError("Erreur de chargement de la page de mot de passe.");
        }
    }

}

================
File: main/java/com/example/projetjavafx/root/auth/UsernameRepository.java
================
package com.example.projetjavafx.root.auth;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;


public class UsernameRepository {
    private Connection connect() throws SQLException {
    String url = "jdbc:mysql://mysql-1dcac8df-moamedsalahsaoudi123-c05d.e.aivencloud.com:22451/projet_integre_db?ssl-mode=REQUIRED";
    String user = "avnadmin";
    String pass = "AVNS_5qB58jyOaJs3WW0eYS9";
    return DriverManager.getConnection(url, user, pass);
}

    public boolean usernameExists(String email) {
        String query = "SELECT COUNT(*) FROM Users WHERE email = ?";
        try (Connection conn = connect();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, email);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                int count = rs.getInt(1);
                System.out.println("Nombre d'utilisateurs trouvés avec cet email : " + count);
                return count > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

}

================
File: main/java/com/example/projetjavafx/root/DbConnection/AivenMySQLManager.java
================
package com.example.projetjavafx.root.DbConnection;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class AivenMySQLManager {
    private static final String URL = "jdbc:mysql://mysql-1dcac8df-moamedsalahsaoudi123-c05d.e.aivencloud.com:22451/projet_integre_db?ssl-mode=REQUIRED";
    private static final String USER = "avnadmin";
    private static final String PASSWORD = "AVNS_5qB58jyOaJs3WW0eYS9";

    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }
}

================
File: main/java/com/example/projetjavafx/root/events/CreateEventController.java
================
package com.example.projetjavafx.root.events;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import javafx.scene.image.Image;
import javafx.scene.image.ImageView;


import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;

public class CreateEventController {


    @FXML
    private TextField nameField;
    @FXML
    private TextArea descriptionField;
    @FXML
    private DatePicker startDatePicker;
    @FXML
    private DatePicker endDatePicker;
    @FXML
    private TextField locationField;

    @FXML
    private ComboBox<String> categoryComboBox;
    @FXML
    private ImageView imagePreview;


    private String base64Image; // Stores the encoded image

    @FXML
    public void initialize() {
//        loadOrganizers();
        loadCategories();
    }

    @FXML
    public void onUploadImageClick(ActionEvent event) {
        FileChooser fileChooser = new FileChooser();
        fileChooser.getExtensionFilters().addAll(
                new FileChooser.ExtensionFilter("Image Files", "*.png", "*.jpg", "*.jpeg")
        );
        File file = fileChooser.showOpenDialog(null);

        if (file != null) {
            try {
                byte[] fileContent = Files.readAllBytes(file.toPath());
                base64Image = Base64.getEncoder().encodeToString(fileContent);

                Image image = new Image(file.toURI().toString());
                imagePreview.setImage(image);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }




    @FXML
    public void onSaveEventClick() {
        String name = nameField.getText();
        String description = descriptionField.getText();
        LocalDate startDate = startDatePicker.getValue();
        LocalDate endDate = endDatePicker.getValue();
        String location = locationField.getText();

        String category = categoryComboBox.getValue();

        if (name.isEmpty() || startDate == null || endDate == null
                || category == null || base64Image == null) {
            System.out.println("Veuillez remplir tous les champs.");
            return;
        }

        int temporaryOrganizerId = 1;
        int categoryId = Integer.parseInt(category.split(" - ")[0]);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

        try (Connection connection = AivenMySQLManager.getConnection()) {
            String query = "INSERT INTO Events (name, description, start_time, end_time, location, organizer_id, category_id, image) VALUES (?, ?, ?, ?, ?, 1, ?, ?)";
            PreparedStatement statement = connection.prepareStatement(query);

            statement.setString(1, name);
            statement.setString(2, description);
            statement.setString(3, startDate.format(formatter));
            statement.setString(4, endDate.format(formatter));
            statement.setString(5, location);
            statement.setInt(6, categoryId); // Nouvel indice
            statement.setString(7, base64Image); // Nouvel indice

            statement.executeUpdate();
            System.out.println("Événement ajouté avec succès !");
            goToEventsPage();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }




//    private void loadOrganizers() {
//        ObservableList<String> organizers = FXCollections.observableArrayList();
//        try (Connection connection = AivenMySQLManager.getConnection()) {
//            String query = "SELECT user_id, username FROM Users";
//            ResultSet resultSet = connection.createStatement().executeQuery(query);
//
//            while (resultSet.next()) {
//                String organizer = resultSet.getInt("user_id") + " - " + resultSet.getString("username");
//                organizers.add(organizer);
//            }
//            organizerComboBox.setItems(organizers);
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }

    private void loadCategories() {
        ObservableList<String> categories = FXCollections.observableArrayList();
        try (Connection connection = AivenMySQLManager.getConnection()) {
            String query = "SELECT category_id, name FROM Categories";
            ResultSet resultSet = connection.createStatement().executeQuery(query);

            while (resultSet.next()) {
                String category = resultSet.getInt("category_id") + " - " + resultSet.getString("name");
                categories.add(category);
            }
            categoryComboBox.setItems(categories);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }




    @FXML
    private void onCancelClick() {

        goToEventsPage();

    }




    private void goToEventsPage() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/events/events-view.fxml"));
            Stage stage = (Stage) nameField.getScene().getWindow();
            Scene scene = new Scene(loader.load());
            stage.setScene(scene);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    @FXML
    private void goToHomePage() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/root/root-view.fxml"));
            Stage stage = (Stage) nameField.getScene().getWindow();
            Scene scene = new Scene(loader.load());
            stage.setScene(scene);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @FXML
    private void goToAnalyticsPage() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/organizer/analytics-view.fxml"));
            Stage stage = (Stage) nameField.getScene().getWindow();
            Scene scene = new Scene(loader.load());
            stage.setScene(scene);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }



}

================
File: main/java/com/example/projetjavafx/root/events/CreateEventsRepository.java
================
package com.example.projetjavafx.root.events;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

import java.sql.*;

public class CreateEventsRepository {
    public static ObservableList<String> getOrganizers() {
        ObservableList<String> organizers = FXCollections.observableArrayList();
        String sql = "SELECT user_id, username FROM Users"; // Adapte selon ta table Users

        try (Connection connection = AivenMySQLManager.getConnection();
             Statement stmt = connection.createStatement();
             ResultSet resultSet = stmt.executeQuery(sql)) {
            while (resultSet.next()) {
                String organizer = resultSet.getInt("user_id") + " - " + resultSet.getString("username");
                organizers.add(organizer);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return organizers;
    }



    public static void createEvent(String name, String description, String startTime, String endTime,
                                   String location, int categoryId, String imagePath) throws SQLException {
        String sql = "INSERT INTO Events (name, description, start_time, end_time, location, organizer_id, category_id, image) " +
                "VALUES (?, ?, ?, ?, ?, 1, ?, ?)";

        try (Connection connection = AivenMySQLManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setString(1, name);
            statement.setString(2, description);
            statement.setString(3, startTime);
            statement.setString(4, endTime);
            statement.setString(5, location);
            statement.setInt(6, categoryId); // Devient le 6ème paramètre
            statement.setString(7, imagePath); // 7ème paramètre

            statement.executeUpdate();
        }
    }
}

================
File: main/java/com/example/projetjavafx/root/events/Event.java
================
package com.example.projetjavafx.root.events;

public class Event {
    private String name;
    private String description;
    private String startDate; // Stockée en String
    private String endDate;   // Stockée en String
    private String location;
    private String imageBase64;
    private String categoryName;

    // Constructeur sans argument
    public Event() {
    }

    // Getters et Setters
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }
    public void setDescription(String description) {
        this.description = description;
    }

    public String getStartDate() {
        return startDate;
    }
    public void setStartDate(String startDate) {
        this.startDate = startDate;
    }

    public String getEndDate() {
        return endDate;
    }
    public void setEndDate(String endDate) {
        this.endDate = endDate;
    }

    public String getLocation() {
        return location;
    }
    public void setLocation(String location) {
        this.location = location;
    }

    public String getImageBase64() {
        return imageBase64;
    }
    public void setImageBase64(String imageBase64) {
        this.imageBase64 = imageBase64;
    }

    public String getCategoryName() {
        return categoryName;
    }
    public void setCategoryName(String categoryName) {
        this.categoryName = categoryName;
    }
}

================
File: main/java/com/example/projetjavafx/root/events/EventDetailsController.java
================
package com.example.projetjavafx.root.events;

import javafx.fxml.FXML;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.text.Text;
import javafx.stage.Stage;

import java.io.ByteArrayInputStream;
import java.util.Base64;

public class EventDetailsController {

    @FXML
    private ImageView eventImage;
    @FXML
    private Label eventName;
    @FXML
    private Text eventDescription;
    @FXML
    private Text eventDate;
    @FXML
    private Text eventLocation;


    @FXML
    public void initialize() {
        // Appliquer le style CSS global à la fenêtre popup
        eventImage.getStyleClass().add("popup-image");
        eventName.getStyleClass().add("popup-title");
        eventDescription.getStyleClass().add("popup-text");
        eventDate.getStyleClass().add("popup-text");
        eventLocation.getStyleClass().add("popup-text");
    }


    public void setEventDetails(String name, String description, String startDate, String endDate, String location, String imageBase64) {
        eventName.setText(name);
        eventDescription.setText(description);
        eventDate.setText("Date: " + startDate + " - " + endDate);
        eventLocation.setText("Location: " + location);

        if (imageBase64 != null && !imageBase64.isEmpty()) {
            byte[] imageBytes = Base64.getDecoder().decode(imageBase64);
            Image image = new Image(new ByteArrayInputStream(imageBytes));
            eventImage.setImage(image);
        }
    }

    @FXML
    private void closeWindow() {
        Stage stage = (Stage) eventName.getScene().getWindow();
        stage.close();
    }
}

================
File: main/java/com/example/projetjavafx/root/events/EventsController.java
================
package com.example.projetjavafx.root.events;

import javafx.application.Platform;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

import java.io.ByteArrayInputStream;
import java.util.Base64;
import java.util.Optional;

public class EventsController {

    // Fields injected from FXML
    public TextField searchField;
    @FXML
    private FlowPane eventsContainer;
    @FXML
    private ComboBox<String> categoryFilter;

    // Variable to store the current running task
    private Task<ObservableList<Event>> currentLoadTask;

    @FXML
    public void initialize() {
        // Load categories and set in the ComboBox
        ObservableList<String> categories = EventsRepository.getCategories();
        categoryFilter.setItems(categories);
        categoryFilter.getSelectionModel().select("All");

        // Load events initially when the scene is attached
        Platform.runLater(() -> loadEvents(searchField.getText(), categoryFilter.getValue()));

        // Add a listener to the search field to reload events on text changes
        searchField.textProperty().addListener((observable, oldValue, newValue) -> {
            loadEvents(newValue, categoryFilter.getValue());
        });

        // Note: We removed the categoryFilter property listener from here
        // to avoid duplicate invocations. Filtering by category is now handled via the onCategorySelected() method.
    }

    private void loadView(String fxmlPath) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlPath));
            Parent root = loader.load();
            Stage stage = (Stage) eventsContainer.getScene().getWindow();
            stage.setScene(new Scene(root));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadEvents(String searchText, String category) {
        // Cancel any currently running task
        if (currentLoadTask != null && currentLoadTask.isRunning()) {
            currentLoadTask.cancel();
        }

        // Create a custom loading window
        Stage loadingStage = new Stage();
        loadingStage.initStyle(StageStyle.UNDECORATED);
        loadingStage.initModality(Modality.NONE);

        ProgressIndicator progressIndicator = new ProgressIndicator();
        Label loadingMessage = new Label("Loading...");

        VBox loadingRoot = new VBox(10);
        loadingRoot.setAlignment(Pos.CENTER);
        loadingRoot.getChildren().addAll(progressIndicator, loadingMessage);
        loadingRoot.setStyle("-fx-padding: 20; -fx-background-color: rgba(0,0,0,0.3);");

        Scene loadingScene = new Scene(loadingRoot, 200, 150);
        loadingStage.setScene(loadingScene);

        if (eventsContainer.getScene() != null) {
            Stage mainStage = (Stage) eventsContainer.getScene().getWindow();
            loadingStage.setX(mainStage.getX() + (mainStage.getWidth() - 200) / 2);
            loadingStage.setY(mainStage.getY() + (mainStage.getHeight() - 150) / 2);
        } else {
            loadingStage.centerOnScreen();
        }

        loadingStage.show();

        // Clear the events container before loading new events
        eventsContainer.getChildren().clear();

        // Create a background task to fetch events
        Task<ObservableList<Event>> loadTask = new Task<ObservableList<Event>>() {
            @Override
            protected ObservableList<Event> call() {
                return EventsRepository.getEvents(searchText, category);
            }
        };

        // Save the running task
        currentLoadTask = loadTask;

        loadTask.setOnSucceeded(e -> {
            ObservableList<Event> events = loadTask.getValue();
            for (Event event : events) {
                VBox eventBox = new VBox(10);
                eventBox.getStyleClass().add("event-card");

                String start = event.getStartDate() != null ? event.getStartDate() : "N/A";
                String end = event.getEndDate() != null ? event.getEndDate() : "N/A";
                String categoryDisplay = event.getCategoryName() != null ? event.getCategoryName() : "No Category";

                Text eventText = new Text(
                        event.getName() + "\n" +
                                event.getDescription() + "\n" +
                                start + " - " + end + "\n" +
                                event.getLocation() + "\nCatégorie : " + categoryDisplay
                );
                eventText.getStyleClass().add("event-description");

                ImageView imageView = new ImageView();
                if (event.getImageBase64() != null && !event.getImageBase64().isEmpty()) {
                    try {
                        byte[] imageBytes = Base64.getDecoder().decode(event.getImageBase64());
                        Image image = new Image(new ByteArrayInputStream(imageBytes));
                        imageView.setImage(image);
                        imageView.setFitWidth(200);
                        imageView.setPreserveRatio(true);
                    } catch (IllegalArgumentException ex) {
                        System.err.println("Données image invalides pour l'événement : " + event.getName());
                    }
                }
                imageView.getStyleClass().add("event-image");

                Button viewDetailsButton = new Button("View Details");
                viewDetailsButton.getStyleClass().add("event-button");
                viewDetailsButton.setOnAction(ev -> showEventDetails(event));

                Button participateButton = new Button("Participer");
                participateButton.getStyleClass().add("event-button-secondary");
                participateButton.setOnAction(ev -> confirmParticipation(event.getName()));

                HBox buttonContainer = new HBox(10, viewDetailsButton, participateButton);
                buttonContainer.getStyleClass().add("event-buttons");

                eventBox.getChildren().addAll(imageView, eventText, buttonContainer);
                eventsContainer.getChildren().add(eventBox);
            }
            Platform.runLater(loadingStage::close);
        });

        loadTask.setOnCancelled(e -> Platform.runLater(loadingStage::close));

        loadTask.setOnFailed(e -> {
            Platform.runLater(loadingStage::close);
            loadTask.getException().printStackTrace();
        });

        new Thread(loadTask).start();
    }

    private void confirmParticipation(String eventName) {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Confirmation de participation");
        alert.setHeaderText(null);
        alert.setContentText("Voulez-vous vraiment participer à l'événement : " + eventName + " ?");
        Optional<ButtonType> result = alert.showAndWait();
        if (result.isPresent() && result.get() == ButtonType.OK) {
            System.out.println("Participation confirmée pour : " + eventName);
        } else {
            System.out.println("Participation annulée.");
        }
    }

    private void showEventDetails(Event event) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/events/event-details.fxml"));
            Parent root = loader.load();

            EventDetailsController controller = loader.getController();
            String start = event.getStartDate() != null ? event.getStartDate() : "N/A";
            String end = event.getEndDate() != null ? event.getEndDate() : "N/A";
            controller.setEventDetails(event.getName(), event.getDescription(), start, end, event.getLocation(), event.getImageBase64());

            Stage stage = new Stage();
            Scene scene = new Scene(root);

            String cssFile = getClass().getResource("/css/event-details.css") != null ?
                    getClass().getResource("/css/event-details.css").toExternalForm() : null;
            if (cssFile != null) {
                scene.getStylesheets().add(cssFile);
            } else {
                System.out.println("⚠ Fichier CSS non trouvé !");
            }
            stage.setScene(scene);
            stage.setTitle("Event Details");
            stage.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @FXML
    public void onNewEventClick() {
        loadView("/com/example/projetjavafx/events/create-events.fxml");
    }

    // This method is linked via FXML to the category filter (e.g., onAction)
    @FXML
    private void onCategorySelected() {
        loadEvents(searchField.getText(), categoryFilter.getValue());
    }

    public void handleHomeButton(ActionEvent actionEvent) {
        loadView("/com/example/projetjavafx/root/root-view.fxml");
    }

    public void onAnalyticsClick(ActionEvent actionEvent) {
        loadView("/com/example/projetjavafx/organizer/analytics-view.fxml");
    }

    public void onCreateJobClick(ActionEvent actionEvent) {
        loadView("/com/example/projetjavafx/organizer/create-job-offer-view.fxml");
    }

    public void onJobFeedButtonClick(ActionEvent actionEvent) {
        loadView("/com/example/projetjavafx/jobfeed/job-feed-view.fxml");
    }
}

================
File: main/java/com/example/projetjavafx/root/events/EventsRepository.java
================
package com.example.projetjavafx.root.events;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

import java.sql.*;

public class EventsRepository {

    // Récupère la liste des catégories depuis la table Categories
    public static ObservableList<String> getCategories() {
        ObservableList<String> categories = FXCollections.observableArrayList();
        categories.add("All"); // Option par défaut
        String sql = "SELECT category_id, name FROM Categories";
        try (Connection connection = AivenMySQLManager.getConnection();
             Statement stmt = connection.createStatement();
             ResultSet resultSet = stmt.executeQuery(sql)) {
            while (resultSet.next()) {
                int categoryId = resultSet.getInt("category_id");
                String categoryName = resultSet.getString("name");
                categories.add(categoryId + " - " + categoryName);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return categories;
    }

    // Récupère la liste des événements en fonction d'un texte de recherche et d'un filtre de catégorie
    public static ObservableList<Event> getEvents(String searchText, String category) {
        ObservableList<Event> events = FXCollections.observableArrayList();
        String query = "SELECT e.*, c.name AS category_name " +
                "FROM Events e " +
                "LEFT JOIN Categories c ON e.category_id = c.category_id " +
                "WHERE 1=1 ";
        if (searchText != null && !searchText.isEmpty()) {
            query += "AND (LOWER(e.name) LIKE ? OR LOWER(e.description) LIKE ?) ";
        }
        if (category != null && !category.equals("All")) {
            query += "AND e.category_id = ? ";
        }
        query += " GROUP BY e.event_id, e.name, e.description, e.start_time, e.end_time, e.location, e.image, c.name";

        try (Connection connection = AivenMySQLManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(query)) {

            int paramIndex = 1;
            if (searchText != null && !searchText.isEmpty()) {
                String searchPattern = "%" + searchText.toLowerCase() + "%";
                statement.setString(paramIndex++, searchPattern);
                statement.setString(paramIndex++, searchPattern);
            }
            if (category != null && !category.equals("All")) {
                int categoryId = Integer.parseInt(category.split(" - ")[0]);
                statement.setInt(paramIndex++, categoryId);
            }

            ResultSet resultSet = statement.executeQuery();
            while (resultSet.next()) {
                Event event = new Event();
                event.setName(resultSet.getString("name"));
                event.setDescription(resultSet.getString("description"));
                // Ici, on récupère directement les dates sous forme de String
                event.setStartDate(resultSet.getString("start_time"));
                event.setEndDate(resultSet.getString("end_time"));
                event.setLocation(resultSet.getString("location"));
                event.setImageBase64(resultSet.getString("image"));
                event.setCategoryName(resultSet.getString("category_name"));
                events.add(event);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return events;
    }
}

================
File: main/java/com/example/projetjavafx/root/explore/ExploreController.java
================
package com.example.projetjavafx.root.explore;

public class ExploreController {

//    hadil: Social Features
//•	Build the post feed (social media-style interactions).
//            •	Allow users to share events on the feed.
//            •	Enable comments and reactions to posts.




}

================
File: main/java/com/example/projetjavafx/root/group/GroupAddController.java
================
package com.example.projetjavafx.root.group;

import com.example.projetjavafx.root.group.GroupAddRepository;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.ButtonType;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.Stage;
import javafx.stage.FileChooser;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Base64;
import java.util.Optional;

public class GroupAddController {
    @FXML
    private TextField nameField;

    @FXML
    private TextArea descriptionField;

    @FXML
    private TextField rulesField;




    @FXML
    private ImageView imagePreview;

    private String imageBase64; // Pour stocker l'image encodée en Base64

    private GroupAddRepository groupModel = new GroupAddRepository();

    @FXML
    private void initialize() {
        // Initialisation si nécessaire
    }

    @FXML
    private void onUploadImageClick() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Choisir une image");
        fileChooser.getExtensionFilters().addAll(
                new FileChooser.ExtensionFilter("Images", "*.png", "*.jpg", "*.jpeg")
        );

        File selectedFile = fileChooser.showOpenDialog(null);
        if (selectedFile != null) {
            try {
                // Convertir l'image en Base64
                FileInputStream fileInputStream = new FileInputStream(selectedFile);
                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                byte[] buffer = new byte[1024];
                int bytesRead;
                while ((bytesRead = fileInputStream.read(buffer)) != -1) {
                    byteArrayOutputStream.write(buffer, 0, bytesRead);
                }
                byte[] imageBytes = byteArrayOutputStream.toByteArray();
                imageBase64 = Base64.getEncoder().encodeToString(imageBytes);

                // Afficher l'image dans l'ImageView
                Image image = new Image(new FileInputStream(selectedFile));
                imagePreview.setImage(image);

                fileInputStream.close();
                byteArrayOutputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
                showAlert(Alert.AlertType.ERROR, "Erreur", "Impossible de charger l'image.");
            }
        }
    }

    @FXML
    private void onCancelClick() {
        // Retourner à la page précédente
        loadView("/com/example/projetjavafx/group/group-add-view.fxml");
    }

    @FXML
    private void onSaveGroupClick() {
        String name = nameField.getText();
        String description = descriptionField.getText();
        String rules = rulesField.getText();

        if (name.isEmpty() || description.isEmpty() || rules.isEmpty()) {
            showAlert(Alert.AlertType.WARNING, "Erreur", "Veuillez remplir tous les champs.");
            return;
        }

        if (imageBase64 == null || imageBase64.isEmpty()) {
            showAlert(Alert.AlertType.WARNING, "Erreur", "Veuillez télécharger une image.");
            return;
        }

        // Confirmation avant de sauvegarder
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Confirmation");
        alert.setHeaderText(null);
        alert.setContentText("Voulez-vous vraiment créer ce groupe ?");

        Optional<ButtonType> result = alert.showAndWait();
        if (result.isPresent() && result.get() == ButtonType.OK) {
            if (groupModel.saveGroup(name, description, rules, imageBase64)) {
                showAlert(Alert.AlertType.INFORMATION, "Succès", "Groupe créé avec succès !");
                loadView("/com/example/projetjavafx/group/group-profile-view.fxml");
            } else {
                showAlert(Alert.AlertType.ERROR, "Erreur", "Impossible de créer le groupe.");
            }
        }
    }

    private void showAlert(Alert.AlertType type, String title, String message) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void loadView(String fxmlPath) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlPath));
            Parent root = loader.load();
            Stage stage = (Stage) nameField.getScene().getWindow();
            stage.setScene(new Scene(root));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // ===================== Navbar Button Handlers =====================
    @FXML
    private void handleHomeButton() {
        loadView("/com/example/projetjavafx/root/home/home-view.fxml");
    }

    @FXML
    private void onAnalyticsClick() {
        loadView("/com/example/projetjavafx/root/analytics/analytics-view.fxml");
    }

    @FXML
    private void onCreateJobClick() {
        loadView("/com/example/projetjavafx/root/jobs/create-job-view.fxml");
    }

    @FXML
    private void onJobFeedButtonClick() {
        loadView("/com/example/projetjavafx/root/jobs/job-feed-view.fxml");
    }


}

================
File: main/java/com/example/projetjavafx/root/group/GroupAddMemberController.java
================
package com.example.projetjavafx.root.group;

import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.ListView;
import javafx.scene.control.TextField;
import javafx.scene.control.TextInputDialog;

import java.sql.ResultSet;

public class GroupAddMemberController {
    @FXML
    private TextField searchUserField;

    @FXML
    private ListView<String> userListView;

    private SearchMemberRepository userModel = new SearchMemberRepository();
    private GroupAddMemberRepository groupMembersModel = new GroupAddMemberRepository();
    private int currentGroupId;

    public void setCurrentGroupId(int groupId) {
        this.currentGroupId = groupId;
    }

    @FXML
    private void onSearchUserClick() {
        String searchText = searchUserField.getText();
        if (searchText.isEmpty()) {
            showAlert("Erreur", "Veuillez entrer un nom ou un email pour la recherche.");
            return;
        }

        ResultSet resultSet = userModel.searchUsers(searchText);
        if (resultSet == null) {
            showAlert("Erreur", "Problème de connexion à la base de données.");
            return;
        }

        userListView.getItems().clear();
        try {
            while (resultSet.next()) {
                String username = resultSet.getString("username");
                String email = resultSet.getString("email");
                int userId = resultSet.getInt("user_id");

                userListView.getItems().add(username + " (" + email + ") - ID: " + userId);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @FXML
    private void onAddUserToGroupClick() {
        String selectedUser = userListView.getSelectionModel().getSelectedItem();
        if (selectedUser == null) {
            showAlert("Erreur", "Veuillez sélectionner un utilisateur.");
            return;
        }

        int userId = Integer.parseInt(selectedUser.split(" - ID: ")[1]);

        if (currentGroupId <= 0) {
            showAlert("Erreur", "Aucun groupe sélectionné.");
            return;
        }

        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("Enter Role");
        dialog.setHeaderText(null);
        dialog.setContentText("Please enter the role for the new member:");

        dialog.showAndWait().ifPresent(role -> {
            boolean success = groupMembersModel.addMemberToGroup(currentGroupId, userId, role);
            if (success) {
                showAlert("Succès", "Utilisateur ajouté au groupe avec succès.");
            } else {
                showAlert("Erreur", "Échec de l'ajout de l'utilisateur au groupe.");
            }
        });
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}

================
File: main/java/com/example/projetjavafx/root/group/GroupAddMemberRepository.java
================
package com.example.projetjavafx.root.group;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class GroupAddMemberRepository {

    public ResultSet searchUsers(String searchText) {
        String query = "SELECT user_id, username FROM Users WHERE username LIKE ?";
        try {
            Connection connection = AivenMySQLManager.getConnection();
            PreparedStatement statement = connection.prepareStatement(query);
            statement.setString(1, "%" + searchText + "%");
            return statement.executeQuery();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public boolean addMemberToGroup(int groupId, int userId, String role) {
        if (role.length() > 50) { // Vérification de la longueur du rôle
            System.err.println("Le rôle dépasse la taille maximale autorisée.");
            return false;
        }

        String query = "INSERT INTO GroupMembers (group_id, user_id, role) VALUES (?, ?, ?)";
        try {
            Connection connection = AivenMySQLManager.getConnection();
            PreparedStatement statement = connection.prepareStatement(query);
            statement.setInt(1, groupId);
            statement.setInt(2, userId);
            statement.setString(3, role);
            int rowsInserted = statement.executeUpdate();
            return rowsInserted > 0;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
}

================
File: main/java/com/example/projetjavafx/root/group/GroupAddRepository.java
================
package com.example.projetjavafx.root.group;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;

import java.sql.Connection;
import java.sql.PreparedStatement;

public class GroupAddRepository {

    public boolean saveGroup(String name, String description, String rules, String imageUrl) {
        String query = "INSERT INTO UserGroups (name, description, rules, profile_picture) VALUES (?, ?, ?, ?)";
        try (Connection connection = AivenMySQLManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(query)) {

            statement.setString(1, name);
            statement.setString(2, description);
            statement.setString(3, rules);
            statement.setString(4, imageUrl); // Stockez l'URL de l'image

            int rowsInserted = statement.executeUpdate();
            return rowsInserted > 0;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
}

================
File: main/java/com/example/projetjavafx/root/group/GroupDetailsController.java
================
package com.example.projetjavafx.root.group;

import com.example.projetjavafx.root.group.GroupDetailsRepository;
import javafx.fxml.FXML;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.text.Text;
import javafx.stage.Stage;

import java.io.ByteArrayInputStream;
import java.sql.ResultSet;
import java.util.Base64;

public class GroupDetailsController {
    @FXML
    private ImageView groupImage;

    @FXML
    private Label groupName;

    @FXML
    private Text groupDescription;

    @FXML
    private Text groupRules;


    private GroupDetailsRepository groupDetailsModel = new GroupDetailsRepository();


    @FXML
    public void initialize() {
        // Appliquer le style CSS global à la fenêtre popup
        groupImage.getStyleClass().add("popup-image");
        groupName.getStyleClass().add("popup-title");
        groupDescription.getStyleClass().add("popup-text");
        groupRules.getStyleClass().add("popup-text");
    }


    public void setGroupDetails(String name, String description, String rules, String imageBase64) {
        groupName.setText(name);
        groupDescription.setText(description);
        groupRules.setText("Rules: " + rules);

        if (imageBase64 != null && !imageBase64.isEmpty()) {
            byte[] imageBytes = Base64.getDecoder().decode(imageBase64);
            Image image = new Image(new ByteArrayInputStream(imageBytes));
            groupImage.setImage(image);
        }
    }

    @FXML
    private void closeWindow() {
        // Fermer la fenêtre actuelle
        Stage stage = (Stage) groupImage.getScene().getWindow();
        stage.close();
    }
}

================
File: main/java/com/example/projetjavafx/root/group/GroupDetailsRepository.java
================
package com.example.projetjavafx.root.group;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class GroupDetailsRepository {
    public ResultSet getGroupDetails(int groupId) {
        String query = "SELECT * FROM Groups WHERE group_id = ?";
        try {
            Connection connection = AivenMySQLManager.getConnection();
            PreparedStatement statement = connection.prepareStatement(query);

            statement.setInt(1, groupId);
            return statement.executeQuery();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}

================
File: main/java/com/example/projetjavafx/root/group/GroupMembersController.java
================
package com.example.projetjavafx.root.group;

import javafx.fxml.FXML;
import javafx.scene.control.ListView;

import java.sql.ResultSet;

public class GroupMembersController {

    @FXML
    private ListView<String> membersListView;

    private int groupId; // ID du groupe
    private GroupMembersRepository groupMembersModel = new GroupMembersRepository();

    // Méthode pour définir l'ID du groupe
    public void setGroupId(int groupId) {
        this.groupId = groupId;
    }

    // Méthode pour charger les membres du groupe
    public void loadMembers() {
        ResultSet resultSet = groupMembersModel.getGroupMembers(groupId);
        if (resultSet == null) {
            return;
        }

        membersListView.getItems().clear(); // Effacer les anciens résultats
        try {
            while (resultSet.next()) {
                String username = resultSet.getString("username");
                String role = resultSet.getString("role");
                membersListView.getItems().add(username + " - " + role); // Afficher le nom et le rôle
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

================
File: main/java/com/example/projetjavafx/root/group/GroupMembersRepository.java
================
package com.example.projetjavafx.root.group;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class GroupMembersRepository {

    public ResultSet getGroupMembers(int groupId) {
        String query = "SELECT u.username, gm.role " +
                "FROM GroupMembers gm " +
                "JOIN Users u ON gm.user_id = u.user_id " +
                "WHERE gm.group_id = ?";
        try {
            Connection connection = AivenMySQLManager.getConnection();
            PreparedStatement statement = connection.prepareStatement(query);
            statement.setInt(1, groupId);
            return statement.executeQuery();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}

================
File: main/java/com/example/projetjavafx/root/group/GroupProfileController.java
================
package com.example.projetjavafx.root.group;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;
import com.example.projetjavafx.root.auth.SessionManager;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.Stage;

import java.io.ByteArrayInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Base64;
import javafx.scene.control.Alert;


public class GroupProfileController {
    @FXML
    private Button joinButton;
    @FXML
    private TextField searchField;

    @FXML
    private FlowPane groupsContainer;

    private GroupProfileRepository groupModel = new GroupProfileRepository();
    private GroupAddMemberRepository groupMemberModel = new GroupAddMemberRepository();

    @FXML
    public void initialize() {
        loadGroups("");
        // Listener pour filtrer les groupes lors de la saisie
        searchField.textProperty().addListener((observable, oldValue, newValue) -> {
            loadGroups(newValue);
        });
    }

    private void loadGroups(String searchText) {
        groupsContainer.getChildren().clear(); // Efface les groupes existants

        try (ResultSet resultSet = groupModel.getGroups(searchText)) {
            if (resultSet == null) {
                showAlert("Erreur", "Problème de connexion à la base de données.");
                return;
            }

            while (resultSet.next()) {
                String name = resultSet.getString("name");
                String description = resultSet.getString("description");
                String rules = resultSet.getString("rules");
                String imageBase64 = resultSet.getString("profile_picture");

                // Créer une carte de groupe
                VBox groupBox = new VBox(10);
                groupBox.getStyleClass().add("group-card");

                Text groupText = new Text(name + "\n" + description + "\n" + rules);
                groupText.getStyleClass().add("group-description");

                ImageView imageView = new ImageView();
                if (imageBase64 != null && !imageBase64.isEmpty()) {
                    byte[] imageBytes = Base64.getDecoder().decode(imageBase64);
                    Image image = new Image(new ByteArrayInputStream(imageBytes));
                    imageView.setImage(image);
                    imageView.setFitWidth(200);
                    imageView.setPreserveRatio(true);
                }
                imageView.getStyleClass().add("group-image");

                // Bouton "View Details"
                Button viewDetailsButton = new Button("View Details");
                viewDetailsButton.getStyleClass().add("group-button");
                viewDetailsButton.setOnAction(event -> showGroupDetails(name, description, rules, imageBase64));

                // Bouton "Add Member"
                Button addMemberButton = new Button("Add Member");
                addMemberButton.getStyleClass().add("group-button-secondary");
                addMemberButton.setOnAction(event -> showAddMemberDialog(name));

                // Bouton "Rejoindre"
                Button joinButton = new Button("Rejoindre");
                joinButton.getStyleClass().add("group-button-secondary");
                joinButton.setOnAction(event -> joinGroup(name));

                // Bouton "Afficher les membres"
                Button showMembersButton = new Button("Afficher les membres");
                showMembersButton.getStyleClass().add("group-button-secondary");
                showMembersButton.setOnAction(event -> showGroupMembers(name));

                // Conteneur des boutons
                VBox buttonContainer = new VBox(10, viewDetailsButton, addMemberButton, showMembersButton, joinButton);
                buttonContainer.getStyleClass().add("group-buttons");

                // Ajout des éléments à la carte
                groupBox.getChildren().addAll(imageView, groupText, buttonContainer);
                groupsContainer.getChildren().add(groupBox);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void showGroupDetails(String name, String description, String rules, String imageBase64) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/group/group-details.fxml"));
            Parent root = loader.load();

            GroupDetailsController controller = loader.getController();
            controller.setGroupDetails(name, description, rules, imageBase64);

            Stage stage = new Stage();
            Scene scene = new Scene(root);

            // Ajouter le fichier CSS si nécessaire
            String cssFile = getClass().getResource("/com/example/projetjavafx/group/css/group_profile.css") != null ?
                    getClass().getResource("/com/example/projetjavafx/group/css/group_profile.css").toExternalForm() : null;

            if (cssFile != null) {
                scene.getStylesheets().add(cssFile);
            } else {
                System.out.println("⚠ Fichier CSS non trouvé !");
            }

            stage.setScene(scene);
            stage.setTitle("Group Details");
            stage.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    @FXML
    private void onNewGroupClick() {
        loadView("/com/example/projetjavafx/group/group-add-view.fxml");
    }

    private void loadView(String fxmlPath) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlPath));
            Parent root = loader.load();
            Stage stage = (Stage) groupsContainer.getScene().getWindow();
            stage.setScene(new Scene(root));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void showAddMemberDialog(String groupName) {


        Dialog<Void> dialog = new Dialog<>();
        dialog.setTitle("Add Member to " + groupName);

        TextField searchUserField = new TextField();
        searchUserField.setPromptText("Search user...");

        ListView<String> userListView = new ListView<>();

        searchUserField.textProperty().addListener((observable, oldValue, newValue) -> {
            try (ResultSet resultSet = groupMemberModel.searchUsers(newValue)) {
                userListView.getItems().clear();
                while (resultSet != null && resultSet.next()) {
                    String username = resultSet.getString("username");
                    userListView.getItems().add(username);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        });

        TextField roleField = new TextField();
        roleField.setPromptText("Enter role...");
        roleField.textProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue.length() > 50) { // Limite à 50 caractères
                roleField.setText(oldValue); // Rejeter la saisie si elle dépasse la limite
            }
        });

        Button addButton = new Button("Add");
        addButton.setOnAction(event -> {
            String selectedUser = userListView.getSelectionModel().getSelectedItem();
            String role = roleField.getText();
            if (selectedUser != null && !role.isEmpty()) {
                int groupId = getGroupIdByName(groupName);
                int userId = getUserIdByUsername(selectedUser);

                if (groupId != -1 && userId != -1) {
                    boolean success = groupMemberModel.addMemberToGroup(groupId, userId, role);
                    if (success) {
                        showAlert("Success", "Member added successfully.");
                        dialog.close();
                    } else {
                        showAlert("Error", "Failed to add member.");
                    }
                }
            } else {
                showAlert("Error", "Please select a user and enter a role.");
            }
        });

        VBox dialogVBox = new VBox(10, searchUserField, userListView, roleField, addButton);
        dialog.getDialogPane().setContent(dialogVBox);
        dialog.getDialogPane().getButtonTypes().add(ButtonType.CLOSE);
        dialog.showAndWait();
    }



    private int getUserIdByUsername(String username) {
        String query = "SELECT user_id FROM Users WHERE username = ?";
        try (Connection connection = AivenMySQLManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, username);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    return resultSet.getInt("user_id");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return -1;
    }

    private void showGroupMembers(String groupName) {
        try {
            // Récupérer l'ID du groupe
            int groupId = getGroupIdByName(groupName);
            if (groupId == -1) {
                showAlert("Erreur", "Groupe introuvable.");
                return;
            }

            // Charger la vue FXML pour afficher les membres
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/group/group-members-view.fxml"));
            Parent root = loader.load();

            // Passer les données au contrôleur de la vue des membres
            GroupMembersController controller = loader.getController();
            controller.setGroupId(groupId); // Passer l'ID du groupe
            controller.loadMembers(); // Charger les membres

            // Afficher la fenêtre
            Stage stage = new Stage();
            stage.setScene(new Scene(root));
            stage.setTitle("Membres du groupe : " + groupName);
            stage.show();
        } catch (Exception e) {
            e.printStackTrace();
            showAlert("Erreur", "Impossible d'afficher les membres du groupe.");
        }
    }


    private void joinGroup(String groupName) {
        // Récupérer l'ID de l'utilisateur connecté
        int userId = SessionManager.getInstance().getCurrentUserId();
        if (userId == -1) {
            showAlert("Erreur", "Utilisateur non connecté.");
            return;
        }

        // Vérifier si l'utilisateur existe dans la base de données
        if (!userExists(userId)) {
            showAlert("Erreur", "L'utilisateur n'existe pas dans la base de données.");
            return;
        }

        // Récupérer l'ID du groupe
        int groupId = getGroupIdByName(groupName);
        if (groupId == -1) {
            showAlert("Erreur", "Groupe introuvable.");
            return;
        }

        // Vérifier si le groupe existe dans la base de données
        if (!groupExists(groupId)) {
            showAlert("Erreur", "Le groupe n'existe pas dans la base de données.");
            return;
        }

        // Ajouter l'utilisateur au groupe avec un rôle par défaut (par exemple, "Membre")
        boolean success = groupMemberModel.addMemberToGroup(groupId, userId, "Membre");
        if (success) {
            showAlert("Succès", "Vous avez rejoint le groupe avec succès.");
        } else {
            showAlert("Erreur", "Impossible de rejoindre le groupe.");
        }
    }

    private boolean userExists(int userId) {
        String query = "SELECT COUNT(*) FROM Users WHERE user_id = ?";
        try (Connection connection = AivenMySQLManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setInt(1, userId);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    return resultSet.getInt(1) > 0;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    private boolean groupExists(int groupId) {
        String query = "SELECT COUNT(*) FROM UserGroups WHERE group_id = ?";
        try (Connection connection = AivenMySQLManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setInt(1, groupId);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    return resultSet.getInt(1) > 0;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }
    private int getGroupIdByName(String groupName) {
        String query = "SELECT group_id FROM UserGroups WHERE name = ?";
        try (Connection connection = AivenMySQLManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, groupName);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    return resultSet.getInt("group_id");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return -1;
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    // ===================== Navbar Button Handlers =====================
    @FXML
    private void handleHomeButton() {
        loadView("/com/example/projetjavafx/root/home/home-view.fxml");
    }

    @FXML
    private void onAnalyticsClick() {
        loadView("/com/example/projetjavafx/root/analytics/analytics-view.fxml");
    }

    @FXML
    private void onCreateJobClick() {
        loadView("/com/example/projetjavafx/root/jobs/create-job-view.fxml");
    }

    @FXML
    private void onJobFeedButtonClick() {
        loadView("/com/example/projetjavafx/root/jobs/job-feed-view.fxml");
    }


}

================
File: main/java/com/example/projetjavafx/root/group/GroupProfileRepository.java
================
package com.example.projetjavafx.root.group;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;

import java.sql.*;

public class GroupProfileRepository {
    private Connection connect() throws SQLException {
        String url = "jdbc:mysql://mysql-1dcac8df-moamedsalahsaoudi123-c05d.e.aivencloud.com:22451/projet_integre_db?ssl-mode=REQUIRED";
        String user = "avnadmin";
        String password = "AVNS_5qB58jyOaJs3WW0eYS9";
        return DriverManager.getConnection(url, user, password);
    }


    public ResultSet getGroups(String searchText) {
        String query = "SELECT name, description, rules, profile_picture FROM UserGroups";
        if (searchText != null && !searchText.isEmpty()) {
            query += " WHERE name LIKE ? OR description LIKE ?";
        }

        try {
            Connection connection = AivenMySQLManager.getConnection();
            PreparedStatement statement = connection.prepareStatement(query);

            if (searchText != null && !searchText.isEmpty()) {
                String searchPattern = "%" + searchText.toLowerCase() + "%";
                statement.setString(1, searchPattern);
                statement.setString(2, searchPattern);
            }

            return statement.executeQuery();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }


}

================
File: main/java/com/example/projetjavafx/root/group/SearchMemberRepository.java
================
package com.example.projetjavafx.root.group;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class SearchMemberRepository {
    public ResultSet searchUsers(String searchText) {
        String query = "SELECT * FROM Users WHERE username LIKE ? OR email LIKE ?";
        try {
            Connection connection = AivenMySQLManager.getConnection();
            PreparedStatement statement = connection.prepareStatement(query);

            String searchPattern = "%" + searchText + "%";
            statement.setString(1, searchPattern);
            statement.setString(2, searchPattern);

            return statement.executeQuery();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}

================
File: main/java/com/example/projetjavafx/root/jobApplications/Application.java
================
package com.example.projetjavafx.root.jobApplications;

import javafx.beans.property.*;

public class Application {
    private final IntegerProperty applicationId = new SimpleIntegerProperty();
    private final IntegerProperty userId = new SimpleIntegerProperty();
    private final StringProperty status = new SimpleStringProperty();
    private final StringProperty appliedAt = new SimpleStringProperty();
    private final IntegerProperty rewarded = new SimpleIntegerProperty();
    private final IntegerProperty jobId = new SimpleIntegerProperty();
    private final StringProperty coverLetter = new SimpleStringProperty();
    private final StringProperty resumePath = new SimpleStringProperty();

    public Application(int applicationId, int userId, String status, String appliedAt,
                       int rewarded, int jobId, String coverLetter, String resumePath) {
        this.applicationId.set(applicationId);
        this.userId.set(userId);
        this.status.set(status);
        this.appliedAt.set(appliedAt);
        this.rewarded.set(rewarded);
        this.jobId.set(jobId);
        this.coverLetter.set(coverLetter);
        this.resumePath.set(resumePath);
    }

    // Property accessors
    public IntegerProperty applicationIdProperty() { return applicationId; }
    public int getApplicationId() { return applicationId.get(); }

    public IntegerProperty userIdProperty() { return userId; }
    public int getUserId() { return userId.get(); }

    public StringProperty statusProperty() { return status; }
    public String getStatus() { return status.get(); }
    public void setStatus(String status) { this.status.set(status); }

    public StringProperty appliedAtProperty() { return appliedAt; }
    public String getAppliedAt() { return appliedAt.get(); }

    public IntegerProperty rewardedProperty() { return rewarded; }
    public int getRewarded() { return rewarded.get(); }

    public IntegerProperty jobIdProperty() { return jobId; }
    public int getJobId() { return jobId.get(); }

    public StringProperty coverLetterProperty() { return coverLetter; }
    public String getCoverLetter() { return coverLetter.get(); }

    public StringProperty resumePathProperty() { return resumePath; }
    public String getResumePath() { return resumePath.get(); }
}

================
File: main/java/com/example/projetjavafx/root/jobApplications/AppliedJobsController.java
================
package com.example.projetjavafx.root.jobApplications;

import com.example.projetjavafx.root.organizer.Job;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;

import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

public class AppliedJobsController {

    @FXML private TableView<Job> jobsTable;
    @FXML private TableColumn<Job, Number> jobIdColumn;
    @FXML private TableColumn<Job, String> jobTitleColumn;
    @FXML private TableColumn<Job, String> eventTitleColumn;
    @FXML private TableColumn<Job, String> jobLocationColumn;
    @FXML private TableColumn<Job, String> applicationDeadlineColumn;
    @FXML private TableColumn<Job, String> recruiterColumn;
    @FXML private TableColumn<Job, Void> actionColumn;

    private final ObservableList<Job> jobs = FXCollections.observableArrayList();
    private int userId;

    @FXML
    public void initialize() {
        setupTableColumns();
        // For demonstration purposes, set a default user ID.
        // Replace this with the actual logged-in user’s ID.
        setUserId(1);
    }

    private void setupTableColumns() {
        jobIdColumn.setCellValueFactory(new PropertyValueFactory<>("jobId"));
        jobTitleColumn.setCellValueFactory(new PropertyValueFactory<>("jobTitle"));
        eventTitleColumn.setCellValueFactory(new PropertyValueFactory<>("eventTitle"));
        jobLocationColumn.setCellValueFactory(new PropertyValueFactory<>("jobLocation"));
        applicationDeadlineColumn.setCellValueFactory(new PropertyValueFactory<>("applicationDeadline"));
        recruiterColumn.setCellValueFactory(new PropertyValueFactory<>("recruiterName"));

        // Action column: add a "View" button to each row for further job details.
        actionColumn.setCellFactory(column -> new TableCell<>() {
            private final Button viewButton = new Button("View");

            {
                viewButton.setOnAction(event -> {
                    Job job = getTableView().getItems().get(getIndex());
                    handleViewJobDetails(job);
                });
            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                setGraphic(empty ? null : viewButton);
            }
        });

        jobsTable.setItems(jobs);
    }

    public void setUserId(int userId) {
        this.userId = userId;
        loadJobsAppliedByUser();
    }

    private void loadJobsAppliedByUser() {
        try {
            List<Job> jobsList = com.example.projetjavafx.root.jobApplications.AppliedJobsRepository.getJobsAppliedByUser(userId);
            jobs.setAll(jobsList);
        } catch (SQLException e) {
            showAlert(Alert.AlertType.ERROR, "Database Error", "Failed to load applied jobs", e.getMessage());
        }
    }

    private void handleViewJobDetails(Job job) {
        try {
            // Retrieve the application status for the given job and user.
            String status = AppliedJobsRepository.getApplicationStatusForJob(userId, job.getJobId());
            String message;
            if ("accepted".equalsIgnoreCase(status)) {
                message = "Congrats, you have been accepted!";
            } else if ("rejected".equalsIgnoreCase(status)) {
                message = "Sorry, you have been rejected. Better luck next time!";
            } else if ("pending".equalsIgnoreCase(status)) {
                message = "Your job application hasn't been reviewed yet. Please be patient.";
            } else {
                message = "Application status: " + status;
            }
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Job Application Status");
            alert.setHeaderText(null);
            alert.setContentText(message);
            alert.showAndWait();
        } catch (SQLException e) {
            showAlert(Alert.AlertType.ERROR, "Database Error", "Failed to retrieve application status", e.getMessage());
        }
    }


    private void showAlert(Alert.AlertType type, String title, String header, String content) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(header);
        alert.setContentText(content);
        alert.showAndWait();
    }

    private void loadView(String fxmlPath, ActionEvent event) {
        try {


            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlPath));
            Parent root = loader.load();
            Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            Scene scene = new Scene(root);
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();

        }
    }

    @FXML
    protected void onDashboardClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/organizer/organizer-view.fxml", event);
    }

    @FXML
    protected void onEventsClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/events/events-view.fxml", event);
    }

    @FXML
    protected void onAnalyticsClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/organizer/analytics-view.fxml", event);
    }

    public void onJobApplicationsButtonClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/JobApplications/application_review-view.fxml", event);
    }

    public void onJobFeedButtonClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/jobfeed/job-feed-view.fxml", event);
    }

    public void onCreateJobButtonClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/organizer/create-job-offer-view.fxml", event);
    }

    public void onHomeButtonClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/root/root-view.fxml", event);
    }
}

================
File: main/java/com/example/projetjavafx/root/jobApplications/AppliedJobsRepository.java
================
package com.example.projetjavafx.root.jobApplications;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;
import com.example.projetjavafx.root.organizer.Job;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class AppliedJobsRepository {

    public static List<Job> getJobsAppliedByUser(int userId) throws SQLException {
        List<Job> jobs = new ArrayList<>();
        String sql = "SELECT j.job_id, j.job_title, j.event_title, j.job_location, j.employment_type, " +
                "j.application_deadline, j.min_salary, j.max_salary, j.currency, j.job_description, " +
                "j.recruiter_name, j.recruiter_email, j.created_at " +
                "FROM jobs j JOIN Applications a ON j.job_id = a.job_id " +
                "WHERE a.user_id = ?";
        try (Connection conn = AivenMySQLManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, userId);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                Job job = new Job(
                        rs.getInt("job_id"),
                        rs.getString("job_title"),
                        rs.getString("event_title"),
                        rs.getString("job_location"),
                        rs.getString("employment_type"),
                        rs.getString("application_deadline"),
                        rs.getDouble("min_salary"),
                        rs.getDouble("max_salary"),
                        rs.getString("currency"),
                        rs.getString("job_description"),
                        rs.getString("recruiter_name"),
                        rs.getString("recruiter_email"),
                        rs.getString("created_at")
                );
                jobs.add(job);
            }
        }
        return jobs;
    }

    public static String getApplicationStatusForJob(int userId, int jobId) throws SQLException {
        String sql = "SELECT status FROM Applications WHERE user_id = ? AND job_id = ?";
        try (Connection conn = AivenMySQLManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, userId);
            pstmt.setInt(2, jobId);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getString("status");
            } else {
                return "Unknown"; // Or handle this case as needed.
            }
        }
    }

}

================
File: main/java/com/example/projetjavafx/root/jobApplications/JobApplicationsController.java
================
package com.example.projetjavafx.root.jobApplications;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.ComboBoxTableCell;
import javafx.stage.Stage;


import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.Optional;

public class JobApplicationsController {

    public Button dashboardButton;
    public Button homeButton;
    public Button JobFeedButton;
    public Button jobFeedButton;
    public Button createJobButton;
    public Button eventsButton;
    public Button analyticsButton;
    @FXML private TableView<Application> applicationsTable;
    @FXML private TableColumn<Application, Number> applicationIdColumn;
    @FXML private TableColumn<Application, Number> userIdColumn;
    @FXML private TableColumn<Application, String> coverLetterColumn;
    @FXML private TableColumn<Application, String> resumeColumn;
    @FXML private TableColumn<Application, String> statusColumn;
    @FXML private TableColumn<Application, Void> actionColumn;

    private final ObservableList<Application> applications = FXCollections.observableArrayList();
    private int userId;

    @FXML
    public void initialize() {
        setupTableColumns();
        // For demonstration, we set a default user id.
        // Replace this with your actual user context.
        setUserId(1);
    }

    private void setupTableColumns() {
        // Bind columns to Application properties
        applicationIdColumn.setCellValueFactory(cellData -> cellData.getValue().applicationIdProperty());
        userIdColumn.setCellValueFactory(cellData -> cellData.getValue().userIdProperty());
        coverLetterColumn.setCellValueFactory(cellData -> cellData.getValue().coverLetterProperty());
        resumeColumn.setCellValueFactory(cellData -> cellData.getValue().resumePathProperty());
        statusColumn.setCellValueFactory(cellData -> cellData.getValue().statusProperty());

        // Custom cell for Cover Letter with wrapping text
        coverLetterColumn.setCellFactory(tc -> new TableCell<>() {
            @Override
            protected void updateItem(String item, boolean empty) {
                super.updateItem(item, empty);
                setText(empty || item == null ? null : item);
                setWrapText(true);
            }
        });

        // Hyperlink cell for Resume
        resumeColumn.setCellFactory(column -> new TableCell<>() {
            private final Hyperlink hyperlink = new Hyperlink("View Resume");
            {
                hyperlink.setOnAction(event -> handleViewResume(getTableView().getItems().get(getIndex())));
            }

            @Override
            protected void updateItem(String item, boolean empty) {
                super.updateItem(item, empty);
                setGraphic(empty ? null : hyperlink);
            }
        });

        // Editable status column with ComboBox
        statusColumn.setCellFactory(ComboBoxTableCell.forTableColumn(FXCollections.observableArrayList("pending", "accepted", "rejected")));
        statusColumn.setOnEditCommit(event -> {
            Application application = event.getRowValue();
            application.setStatus(event.getNewValue());
//            handleStatusUpdate(application); // Automatically update the status in the database
        });

        // Action column with an Update button
        actionColumn.setCellFactory(column -> new TableCell<>() {
            private final Button updateButton = new Button("Update");
            {
                updateButton.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white;");
                updateButton.setOnAction(event -> handleStatusUpdate(getTableView().getItems().get(getIndex())));
            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                setGraphic(empty ? null : updateButton);
            }
        });

        applicationsTable.setItems(applications);
        applicationsTable.setEditable(true);
    }

    public void setUserId(int userId) {
        this.userId = userId;
        System.out.println("User ID set: " + userId);
        loadApplicationsForUserJobs();
    }

    private void loadApplicationsForUserJobs() {
        try {
            List<Application> applicationList = JobApplicationsRepository.getApplicationsForUserPostedJobs(userId);
            System.out.println("Applications fetched: " + applicationList.size());
            applications.setAll(applicationList);
        } catch (SQLException e) {
            showAlert(Alert.AlertType.ERROR, "Database Error", "Failed to load applications", e.getMessage());
        }
    }

    private void handleStatusUpdate(Application application) {
        try {
            Optional<ButtonType> result = showConfirmationDialog(
                    "Update Status",
                    "Are you sure you want to update the application status to '" + application.getStatus() + "'?"
            );

            if (result.isPresent() && result.get() == ButtonType.OK) {
                JobApplicationsRepository.updateApplicationStatus(application.getApplicationId(), application.getStatus());
                showAlert(Alert.AlertType.INFORMATION, "Success", "Status Updated", "Application status updated successfully");
            }
        } catch (SQLException e) {
            showAlert(Alert.AlertType.ERROR, "Database Error", "Failed to update status", e.getMessage());
        }
    }

    private void handleViewResume(Application application) {
        // Check if the resumePath is null or empty
        if (application.getResumePath() == null || application.getResumePath().isEmpty()) {
            showAlert(Alert.AlertType.ERROR, "Error", "Resume Not Found", "The resume file path is not specified.");
            return;
        }

        // Create a File object from the resumePath
        File resumeFile = new File(application.getResumePath());

        // Check if the file exists
        if (!resumeFile.exists()) {
            showAlert(Alert.AlertType.ERROR, "Error", "Resume Not Found", "The resume file could not be located at: " + application.getResumePath());
            return;
        }

        // Check if the file is a PDF
        if (!resumeFile.getName().toLowerCase().endsWith(".pdf")) {
            showAlert(Alert.AlertType.ERROR, "Error", "Invalid File Type", "The resume file must be a PDF.");
            return;
        }

        // Try to open the file using the default PDF viewer
        try {
            // Wrap the file path in double quotes to handle spaces and special characters
            String quotedFilePath = STR."\"\{resumeFile.getAbsolutePath()}\"";
            Runtime.getRuntime().exec(new String[]{"cmd", "/c", "start", "", quotedFilePath});
        } catch (IOException e) {
            showAlert(Alert.AlertType.ERROR, "Error", "Could Not Open Resume", "An error occurred while trying to open the resume: " + e.getMessage());
        }
    }

    private void showAlert(Alert.AlertType type, String title, String header, String content) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(header);
        alert.setContentText(content);
        alert.showAndWait();
    }

    private Optional<ButtonType> showConfirmationDialog(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        return alert.showAndWait();
    }

    public void setJobId(int yourActualJobId) {
        // Implement this method if needed
    }

    private void loadView(String fxmlPath, ActionEvent event) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlPath));
            Parent root = loader.load();

            // Get the current stage (instead of opening a new one)
            Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            stage.getScene().setRoot(root); // Set the new root to the same scene
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @FXML
    protected void onDashboardClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/organizer/organizer-view.fxml", event);
    }

    @FXML
    protected void onEventsClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/events/events-view.fxml", event);
    }

    @FXML
    protected void onAnalyticsClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/organizer/analytics-view.fxml", event);
    }

    public void onJobApplicationsButtonClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/JobApplications/application_review-view.fxml", event);
    }

    public void onJobFeedButtonClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/jobfeed/job-feed-view.fxml", event);
    }

    public void onCreateJobButtonClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/organizer/create-job-offer-view.fxml", event);
    }

    public void onHomeButtonClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/root/root-view.fxml", event);
    }
}

================
File: main/java/com/example/projetjavafx/root/jobApplications/JobApplicationsRepository.java
================
package com.example.projetjavafx.root.jobApplications;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class JobApplicationsRepository {

    public static List<Application> getApplicationsForUserPostedJobs(int userId) throws SQLException {
        List<Application> applications = new ArrayList<>();
        String sql = "SELECT * FROM Applications WHERE job_id IN (SELECT job_id FROM jobs WHERE user_id = ?)";

        try (Connection conn = AivenMySQLManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, userId);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                applications.add(new Application(
                        rs.getInt("application_id"),
                        rs.getInt("user_id"),
                        rs.getString("status"),
                        rs.getString("applied_at"),
                        rs.getInt("rewarded"),
                        rs.getInt("job_id"),
                        rs.getString("cover_letter"),
                        rs.getString("resume_path")
                ));
            }
        }
        return applications;
    }

    public static void updateApplicationStatus(int applicationId, String status) throws SQLException {
        String sql = "UPDATE Applications SET status = ? WHERE application_id = ?";
        try (Connection conn = AivenMySQLManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, status);
            pstmt.setInt(2, applicationId);
            pstmt.executeUpdate();
        }
    }
}

================
File: main/java/com/example/projetjavafx/root/jobFeed/ApplicationFormController.java
================
package com.example.projetjavafx.root.jobFeed;

import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.control.TextArea;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import java.io.File;
import java.sql.SQLException;

public class ApplicationFormController {
    @FXML private TextArea coverLetterArea;
    @FXML private TextField resumePathField;
    @FXML private Button browseButton;
    @FXML private Button submitButton;

    private int userId;
    private int jobId;

    public void setUserId(int userId) {
        this.userId = userId;
    }

    public void setJobId(int jobId) {
        this.jobId = jobId;
    }

    @FXML
    public void initialize() {
        // Set up the browse button action
        browseButton.setOnAction(e -> handleBrowse());

        // Set up the submit button action
        submitButton.setOnAction(e -> handleSubmit());
    }

    private void handleBrowse() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Select Resume File");

        // Set extension filter for PDF files
        FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter(
                "PDF files (*.pdf)", "*.pdf");
        fileChooser.getExtensionFilters().add(extFilter);

        // Show the file chooser dialog
        File file = fileChooser.showOpenDialog(new Stage());
        if (file != null) {
            // Set the selected file path to the text field
            resumePathField.setText(file.getAbsolutePath());
        }
    }

    @FXML
    private void handleSubmit() {
        // Get the input values
        String coverLetter = coverLetterArea.getText().trim();
        String resumePath = resumePathField.getText().trim();

        // Validate input fields
        if (coverLetter.isEmpty()) {
            showAlert("Error", "Please write a cover letter.");
            return;
        }

        if (resumePath.isEmpty()) {
            showAlert("Error", "Please select a resume file.");
            return;
        }

        // Check if the resume file exists
        File resumeFile = new File(resumePath);
        if (!resumeFile.exists()) {
            showAlert("Error", "The selected resume file does not exist.");
            return;
        }

        try {
            // Save the application to the database
            ApplicationRepository.saveApplication(userId, jobId, coverLetter, resumePath);

            // Show success message
            showAlert("Success", "Application submitted successfully!");

            // Clear the form after submission
            clearForm();

        } catch (SQLException e) {
            e.printStackTrace();
            showAlert("Error", "Failed to submit application: " + e.getMessage());
        }
    }

    private void clearForm() {
        // Clear the form fields
        coverLetterArea.clear();
        resumePathField.clear();
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}

================
File: main/java/com/example/projetjavafx/root/jobFeed/ApplicationRepository.java
================
package com.example.projetjavafx.root.jobFeed;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;
import com.example.projetjavafx.root.jobApplications.Application; // FIXED IMPORT

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

public class ApplicationRepository {

    // Save a new application to the database
    public static void saveApplication(int userId, int jobId, String coverLetter, String resumePath)
            throws SQLException {
        String sql = "INSERT INTO Applications (user_id, job_id, status, applied_at, rewarded, cover_letter, resume_path) " +
                "VALUES (?, ?, 'pending', ?, 0, ?, ?)";

        try (Connection conn = AivenMySQLManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // Format the current date as a string
            String appliedAt = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));

            // Set parameters
            pstmt.setInt(1, userId);
            pstmt.setInt(2, jobId);
            pstmt.setString(3, appliedAt);
            pstmt.setString(4, coverLetter);
            pstmt.setString(5, resumePath);

            // Execute the query
            pstmt.executeUpdate();
        }
    }

    // Retrieve all applications for a specific job
    public static List<Application> getApplicationsByJobId(int jobId) throws SQLException {
        List<Application> applications = new ArrayList<>();
        String sql = "SELECT * FROM Applications WHERE job_id = ?";

        try (Connection conn = AivenMySQLManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, jobId);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                applications.add(new Application(
                        rs.getInt("application_id"),
                        rs.getInt("user_id"),
                        rs.getString("status"),
                        rs.getString("applied_at"),
                        rs.getInt("rewarded"),
                        rs.getInt("job_id"),
                        rs.getString("cover_letter"),
                        rs.getString("resume_path")
                ));
            }
        }
        return applications;
    }

    public static void updateApplicationStatus(int applicationId, String status) throws SQLException {
        String sql = "UPDATE Applications SET status = ? WHERE application_id = ?";

        try (Connection conn = AivenMySQLManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, status);
            pstmt.setInt(2, applicationId);
            pstmt.executeUpdate();
        }
    }
}

================
File: main/java/com/example/projetjavafx/root/jobFeed/GeminiEvaluation.java
================
package com.example.projetjavafx.root.jobFeed;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;

public class GeminiEvaluation {

    private static final String API_KEY = "AIzaSyASzUusx2wKgSf2YPbgRdu-PRydF2dWpls";
    private static final String API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=" + API_KEY;

    public static void main(String[] args) {
        String jobDescription = "example job description";
        String coverLetter = "example cover letter";

        String inputText = "Job Description: " + jobDescription + "\nCover Letter: " + coverLetter;

        try {
            String response = sendPostRequest(inputText);
            System.out.println("API Response: " + response);


        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static String sendPostRequest(String inputText) throws IOException {
        URL url = new URL(API_URL);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Content-Type", "application/json; utf-8");
        connection.setRequestProperty("Accept", "application/json");
        connection.setDoOutput(true);

        String jsonInputString = STR."{\"contents\": [    {        \"role\": \"user\",        \"parts\": [            {                \"text\": \"\{inputText}\"            }        ]    }],\"systemInstruction\": {    \"role\": \"user\",    \"parts\": [        {            \"text\": \"for the provided job description and cover letter, you will always give an integer evaluation of the cover from 1 to 10\"        }    ]},\"generationConfig\": {    \"temperature\": 1,    \"topK\": 40,    \"topP\": 0.95,    \"maxOutputTokens\": 8192,    \"responseMimeType\": \"application/json\",    \"responseSchema\": {        \"type\": \"object\",        \"properties\": {            \"rating\": {                \"type\": \"number\"            }        }    }}}";

        try (OutputStream os = connection.getOutputStream()) {
            byte[] input = jsonInputString.getBytes(StandardCharsets.UTF_8);
            os.write(input, 0, input.length);
        }

        int responseCode = connection.getResponseCode();
        if (responseCode == HttpURLConnection.HTTP_OK) {
            try (BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8))) {
                StringBuilder response = new StringBuilder();
                String responseLine;
                while ((responseLine = br.readLine()) != null) {
                    response.append(responseLine.trim());
                }
                return response.toString();
            }
        } else {
            throw new IOException("HTTP error code: " + responseCode);
        }
    }

    private static int parseRatingFromResponse(String jsonResponse) {
        // Assuming the response is in the format: {"rating": 7}
        // You can use a JSON library like Jackson or Gson for more complex parsing
        int startIndex = jsonResponse.indexOf("\"rating\":") + 9;
        int endIndex = jsonResponse.indexOf("}", startIndex);
        String ratingStr = jsonResponse.substring(startIndex, endIndex).trim();
        return Integer.parseInt(ratingStr);
    }
}

================
File: main/java/com/example/projetjavafx/root/jobFeed/JobFeedController.java
================
package com.example.projetjavafx.root.jobFeed;

import com.example.projetjavafx.root.organizer.Job;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.scene.control.Alert;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

public class JobFeedController {
    public Button createJobButton;
    public Button jobApplicationsButton;
    public Button analyticsButton;
    @FXML private FlowPane jobsContainer;
    @FXML private Button homeButton, profileButton, logoutButton, dashboardButton, eventsButton;

    private int currentUserId = 1; // Replace with the actual logged-in user's ID

    @FXML
    public void initialize() {
        try {
            loadJobs();
        } catch (SQLException e) {
            e.printStackTrace();
        }

        // Button actions
        homeButton.setOnAction(this::onHomeClick);
        profileButton.setOnAction(this::onProfileClick);
        logoutButton.setOnAction(this::onLogoutClick);
        dashboardButton.setOnAction(this::onDashboardClick);
        eventsButton.setOnAction(this::onEventsClick);
        createJobButton.setOnAction(this::onCreateJobButtonClick);
    }

    private void loadJobs() throws SQLException {
        List<Job> jobs = JobFeedRepository.getAllJobs();
        jobsContainer.getChildren().clear();

        for (Job job : jobs) {
            VBox card = createJobCard(job);
            jobsContainer.getChildren().add(card);
        }

        jobsContainer.setPrefWrapLength(5 * 270); // Ensures 5 cards per row
    }

    private VBox createJobCard(Job job) {
        VBox card = new VBox();
        card.getStyleClass().add("job-card");
        card.setPrefWidth(270);
        card.setSpacing(10);

        Label title = new Label(job.getJobTitle());
        title.getStyleClass().add("job-title");

        Label event = new Label("Event: " + job.getEventTitle());
        Label location = new Label("📍 " + job.getJobLocation());
        Label type = new Label("⚡ " + job.getEmploymentType());
        Label salary = new Label(String.format("💰 %s - %s %s", job.getMinSalary(), job.getMaxSalary(), job.getCurrency()));
        Label deadline = new Label("⏰ Apply by: " + job.getApplicationDeadline());

        Label recruiter = new Label("👤 " + job.getRecruiterName());
        Label email = new Label("📧 " + job.getRecruiterEmail());

        Button applyButton = new Button("Apply Now");
        applyButton.getStyleClass().add("apply-button");

        // Set action for the Apply button
        applyButton.setOnAction(e -> handleApplyButton(job.getJobId()));

        card.getChildren().addAll(title, event, location, type, salary, deadline, recruiter, email, applyButton);
        return card;
    }

    // Handle Apply Button Click
    private void handleApplyButton(int jobId) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/jobfeed/application-form.fxml"));
            Parent root = loader.load();

            ApplicationFormController controller = loader.getController();
            controller.setJobId(jobId);
            controller.setUserId(currentUserId);

            Stage stage = new Stage();
            stage.setScene(new Scene(root));
            stage.setTitle("Application Form");
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();
            Alert errorAlert = new Alert(Alert.AlertType.ERROR);
            errorAlert.setTitle("Error");
            errorAlert.setHeaderText("Cannot open form");
            errorAlert.setContentText("Failed to load application form.");
            errorAlert.showAndWait();
        }
    }


    // Helper method for navigation
    private void navigateTo(String fxmlPath, ActionEvent event) {
        try {
            Parent root = FXMLLoader.load(getClass().getResource(fxmlPath));
            Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            stage.setScene(new Scene(root));
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Navigation Methods
    @FXML
    private void onHomeClick(ActionEvent event) {
        navigateTo("/com/example/projetjavafx/root/root-view.fxml", event);
    }

    @FXML
    private void onProfileClick(ActionEvent event) {
        navigateTo("/com/example/projetjavafx/profile/profile-view.fxml", event);
    }

    @FXML
    private void onLogoutClick(ActionEvent event) {
        System.out.println("Logging out...");
        navigateTo("/com/example/projetjavafx/auth/login-view.fxml", event);
    }

    @FXML
    private void onDashboardClick(ActionEvent event) {
        navigateTo("/com/example/projetjavafx/organizer/organizer-view.fxml", event);
    }

    @FXML
    private void onEventsClick(ActionEvent event) {
        navigateTo("/com/example/projetjavafx/events/events-view.fxml", event);
    }

    @FXML
    private void onGroupsClick(ActionEvent event) {
        navigateTo("/com/example/projetjavafx/group/group-profile-view.fxml", event);
    }

    @FXML
    private void onAnalyticsClick(ActionEvent event) {
        navigateTo("/com/example/projetjavafx/organizer/analytics-view.fxml", event);
    }

    public void onCreateJobButtonClick(ActionEvent event) {
        navigateTo("/com/example/projetjavafx/organizer/create-job-offer-view.fxml", event);

    }
    public void onJobApplicationsButtonClick(ActionEvent event) {
        navigateTo("/com/example/projetjavafx/JobApplications/application_review-view.fxml", event);
    }

}

================
File: main/java/com/example/projetjavafx/root/jobFeed/JobFeedRepository.java
================
package com.example.projetjavafx.root.jobFeed;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;
import com.example.projetjavafx.root.organizer.Job;

import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

public class JobFeedRepository {

    // Method to apply for a job
    public static void applyForJob(int userId, int jobId) throws SQLException {
        String sql = "INSERT INTO Applications (user_id, job_id, status, applied_at, rewarded) VALUES (?, ?, 'pending', ?, 0)";

        try (Connection conn = AivenMySQLManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // Set parameters
            pstmt.setInt(1, userId);
            pstmt.setInt(2, jobId);
            pstmt.setString(3, LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));

            // Execute the query
            pstmt.executeUpdate();
        }
    }
    public static List<Job> getAllJobs() throws SQLException {
        List<Job> jobs = new ArrayList<>();
        String sql = "SELECT job_id, job_title, event_title, job_location, employment_type, application_deadline, " +
                "min_salary, max_salary, currency, job_description, recruiter_name, recruiter_email, created_at " +
                "FROM jobs";

        try (Connection conn = AivenMySQLManager.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                Job job = new Job(
                        rs.getInt("job_id"), // Add job_id
                        rs.getString("job_title"),
                        rs.getString("event_title"),
                        rs.getString("job_location"),
                        rs.getString("employment_type"),
                        rs.getString("application_deadline"),
                        rs.getDouble("min_salary"),
                        rs.getDouble("max_salary"),
                        rs.getString("currency"),
                        rs.getString("job_description"),
                        rs.getString("recruiter_name"),
                        rs.getString("recruiter_email"),
                        rs.getString("created_at")
                );
                jobs.add(job);
            }
        }
        return jobs;
    }
    public static void applyForJob(int userId, int jobId, String coverLetter, String resumePath) throws SQLException {
        String sql = "INSERT INTO Applications (user_id, job_id, status, applied_at, rewarded, cover_letter, resume_path) " +
                "VALUES (?, ?, 'pending', ?, 0, ?, ?)";

        try (Connection conn = AivenMySQLManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, userId);
            pstmt.setInt(2, jobId);
            pstmt.setString(3, LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
            pstmt.setString(4, coverLetter);
            pstmt.setString(5, resumePath);

            pstmt.executeUpdate();
        }
    }

}

================
File: main/java/com/example/projetjavafx/root/organizer/AdsDashboard.java
================
package com.example.projetjavafx.root.organizer;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.PieChart;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TableView;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class AdsDashboard  extends Application {
    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Ads Overview");

        // Top Bar
        HBox topBar = new HBox(10);
        topBar.setPadding(new Insets(10));
        ComboBox<String> sourceFilter = new ComboBox<>();
        sourceFilter.setPromptText("Source");
        ComboBox<String> campaignTypeFilter = new ComboBox<>();
        campaignTypeFilter.setPromptText("Campaign type");
        ComboBox<String> campaignNameFilter = new ComboBox<>();
        campaignNameFilter.setPromptText("Campaign name");
        topBar.getChildren().addAll(sourceFilter, campaignTypeFilter, campaignNameFilter);

        // KPI Labels
        GridPane kpiGrid = new GridPane();
        kpiGrid.setHgap(20);
        kpiGrid.setPadding(new Insets(10));
        String[] kpiTitles = {"Amount Spent", "Impressions", "Clicks", "CTR", "CPM", "CPC"};
        String[] kpiValues = {"$12,567", "294,480", "10,637", "3.61%", "$42.68", "$1.18"};
        for (int i = 0; i < kpiTitles.length; i++) {
            VBox kpiBox = new VBox(new Label(kpiTitles[i]), new Label(kpiValues[i]));
            kpiGrid.add(kpiBox, i, 0);
        }

        // Line Charts
        LineChart<String, Number> spendChart = createLineChart("Spend amount by Date");
        LineChart<String, Number> impressionsChart = createLineChart("Impressions and Clicks by Date");

        HBox chartRow1 = new HBox(10, spendChart, impressionsChart);

        // Bar Charts
        BarChart<String, Number> impressionsCtrChart = createBarChart("Impressions and CTR over time");
        BarChart<String, Number> clicksChart = createBarChart("Clicks performance over time");

        HBox chartRow2 = new HBox(10, impressionsCtrChart, clicksChart);

        // Pie Chart for Sources
        PieChart sourcePieChart = new PieChart();
        sourcePieChart.getData().addAll(new PieChart.Data("Google Ads", 48.6),
                new PieChart.Data("Facebook Ads", 32.2),
                new PieChart.Data("Others", 19.2));
        sourcePieChart.setTitle("Clicks by Source");

        // Table
        TableView<String> tableView = new TableView<>();
        tableView.setPrefHeight(200);

        VBox bottomSection = new VBox(10, sourcePieChart, tableView);

        // Layout
        VBox mainLayout = new VBox(10, topBar, kpiGrid, chartRow1, chartRow2, bottomSection);
        mainLayout.setPadding(new Insets(10));

        Scene scene = new Scene(mainLayout, 1200, 800);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private LineChart<String, Number> createLineChart(String title) {
        CategoryAxis xAxis = new CategoryAxis();
        NumberAxis yAxis = new NumberAxis();
        LineChart<String, Number> lineChart = new LineChart<>(xAxis, yAxis);
        lineChart.setTitle(title);
        return lineChart;
    }

    private BarChart<String, Number> createBarChart(String title) {
        CategoryAxis xAxis = new CategoryAxis();
        NumberAxis yAxis = new NumberAxis();
        BarChart<String, Number> barChart = new BarChart<>(xAxis, yAxis);
        barChart.setTitle(title);
        return barChart;
    }

    public static void main(String[] args) {
        launch(args);
    }
}

================
File: main/java/com/example/projetjavafx/root/organizer/AnalyticsController.java
================
package com.example.projetjavafx.root.organizer;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.chart.*;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.stage.Stage;

import java.io.IOException;
import java.sql.SQLException;
import java.util.List;

public class AnalyticsController {

    @FXML private ComboBox<EventStats> eventComboBox;
    @FXML private Label totalParticipantsLabel;
    @FXML private Label maleParticipantsLabel;
    @FXML private Label femaleParticipantsLabel;
    @FXML private BarChart<String, Number> genderBarChart;
    @FXML private LineChart<String, Number> participationLineChart;

    private int organizerId;

    @FXML
    public void initialize() {
        setupChartAxes();
        setupComboBoxListener();
        System.out.println("AnalyticsController initialized.");
        // Do not call loadEventData() here because organizerId may not yet be set.
    }

    /**
     * Call this method from your main application or parent controller with a valid organizer ID.
     */
    public void setOrganizerId(int organizerId) {
        this.organizerId = organizerId;
        System.out.println("Organizer ID set to: " + organizerId);
        loadEventData();
    }

    private void setupChartAxes() {
        // Configure BarChart axes
        CategoryAxis barXAxis = (CategoryAxis) genderBarChart.getXAxis();
        NumberAxis barYAxis = (NumberAxis) genderBarChart.getYAxis();
        barXAxis.setLabel("Gender");
        barYAxis.setLabel("Participants");

        // Configure LineChart axes
        CategoryAxis lineXAxis = (CategoryAxis) participationLineChart.getXAxis();
        NumberAxis lineYAxis = (NumberAxis) participationLineChart.getYAxis();
        lineXAxis.setLabel("Events");
        lineYAxis.setLabel("Total Participants");
    }

    private void loadEventData() {
        System.out.println("Loading event data for organizer ID: " + organizerId);
        try {
            List<EventStats> stats = AnalyticsRepository.getEventStats(organizerId);
            System.out.println("Fetched " + stats.size() + " event(s).");
            eventComboBox.getItems().clear();
            eventComboBox.getItems().addAll(stats);

            XYChart.Series<String, Number> trendSeries = AnalyticsRepository.getParticipationTrend(organizerId);
            System.out.println("Fetched " + trendSeries.getData().size() + " trend data point(s).");
            participationLineChart.getData().clear();
            participationLineChart.getData().add(trendSeries);

            if (stats.isEmpty()) {
                System.out.println("Warning: No event stats returned from the database.");
            }
        } catch (SQLException e) {
            showErrorAlert("Database Error", "Failed to load event data: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void setupComboBoxListener() {
        eventComboBox.valueProperty().addListener((obs, oldVal, newVal) -> {
            if (newVal != null) {
                System.out.println("Selected event: " + newVal.getEventName());
                updateStatsDisplay(newVal);
                updateGenderChart(newVal);
            }
        });
    }

    private void updateStatsDisplay(EventStats stats) {
        totalParticipantsLabel.setText(String.valueOf(stats.getTotalParticipants()));
        maleParticipantsLabel.setText(String.valueOf(stats.getMaleCount()));
        femaleParticipantsLabel.setText(String.valueOf(stats.getFemaleCount()));
    }

    private void updateGenderChart(EventStats stats) {
        genderBarChart.getData().clear();
        XYChart.Series<String, Number> series = new XYChart.Series<>();
        series.getData().add(new XYChart.Data<>("Male", stats.getMaleCount()));
        series.getData().add(new XYChart.Data<>("Female", stats.getFemaleCount()));
        genderBarChart.getData().add(series);
        System.out.println("Updated gender chart: Male=" + stats.getMaleCount() + ", Female=" + stats.getFemaleCount());
    }

    private void showErrorAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void loadView(String fxmlPath, javafx.event.ActionEvent event) {
        try {


            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlPath));
            Parent root = loader.load();
            Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            Scene scene = new Scene(root);
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();

        }
    }

    @FXML
    protected void onDashboardClick(javafx.event.ActionEvent event) {
        loadView("/com/example/projetjavafx/organizer/organizer-view.fxml", event);
    }

    @FXML
    protected void onEventsClick(javafx.event.ActionEvent event) {
        loadView("/com/example/projetjavafx/events/events-view.fxml", event);
    }

    @FXML
    protected void onAnalyticsClick(javafx.event.ActionEvent event) {
        loadView("/com/example/projetjavafx/organizer/analytics-view.fxml", event);
    }

    public void onJobApplicationsButtonClick(javafx.event.ActionEvent event) {
        loadView("/com/example/projetjavafx/JobApplications/application_review-view.fxml", event);
    }

    public void onJobFeedButtonClick(javafx.event.ActionEvent event) {
        loadView("/com/example/projetjavafx/jobfeed/job-feed-view.fxml", event);
    }

    public void onCreateJobButtonClick(javafx.event.ActionEvent event) {
        loadView("/com/example/projetjavafx/organizer/create-job-offer-view.fxml", event);
    }

    public void onHomeButtonClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/root/root-view.fxml", event);
    }


}

================
File: main/java/com/example/projetjavafx/root/organizer/AnalyticsRepository.java
================
package com.example.projetjavafx.root.organizer;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javafx.scene.chart.XYChart;
import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;

public class AnalyticsRepository {

    public static List<EventStats> getEventStats(int organizerId) throws SQLException {
        List<EventStats> stats = new ArrayList<>();
        String sql = "SELECT e.event_id, e.name, "
                + "COUNT(p.id) AS total, "
                + "SUM(CASE WHEN u.gender = 'Male' THEN 1 ELSE 0 END) AS male, "
                + "SUM(CASE WHEN u.gender = 'Female' THEN 1 ELSE 0 END) AS female "
                + "FROM Events e "
                + "LEFT JOIN participation p ON e.event_id = p.event_id "
                + "LEFT JOIN Users u ON p.participant_id = u.user_id "
                + "WHERE e.organizer_id = ? "
                + "GROUP BY e.event_id";

        try (Connection conn = AivenMySQLManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, organizerId);
            System.out.println("Executing getEventStats query with organizerId: " + organizerId);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                int eventId = rs.getInt("event_id");
                String name = rs.getString("name");
                int total = rs.getInt("total");
                int male = rs.getInt("male");
                int female = rs.getInt("female");
                System.out.println("Row: event_id=" + eventId + ", name=" + name
                        + ", total=" + total + ", male=" + male + ", female=" + female);
                stats.add(new EventStats(eventId, name, total, male, female));
            }
        }
        return stats;
    }

    public static XYChart.Series<String, Number> getParticipationTrend(int organizerId) throws SQLException {
        XYChart.Series<String, Number> series = new XYChart.Series<>();
        String sql = "SELECT e.name, COUNT(p.id) AS participants "
                + "FROM Events e "
                + "LEFT JOIN participation p ON e.event_id = p.event_id "
                + "WHERE e.organizer_id = ? "
                + "GROUP BY e.event_id "
                + "ORDER BY e.start_time";

        try (Connection conn = AivenMySQLManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, organizerId);
            System.out.println("Executing getParticipationTrend query with organizerId: " + organizerId);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                String name = rs.getString("name");
                int participants = rs.getInt("participants");
                System.out.println("Trend Row: name=" + name + ", participants=" + participants);
                series.getData().add(new XYChart.Data<>(name, participants));
            }
        }
        return series;
    }
}

================
File: main/java/com/example/projetjavafx/root/organizer/CreateJobOfferController.java
================
package com.example.projetjavafx.root.organizer;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

import java.io.IOException;
import java.sql.SQLException;

public class CreateJobOfferController {

    @FXML
    private TextField jobTitleField;

    @FXML
    private TextField eventTitleField;

    @FXML
    private TextField jobLocationField;

    @FXML
    private ComboBox<String> employmentTypeComboBox;

    @FXML
    private DatePicker applicationDeadlinePicker;

    @FXML
    private TextField minSalaryField;

    @FXML
    private TextField maxSalaryField;

    @FXML
    private ComboBox<String> currencyComboBox;

    @FXML
    private TextArea jobDescriptionArea;

    @FXML
    private TextField recruiterNameField;

    @FXML
    private TextField recruiterEmailField;

    @FXML
    private Button postJobButton;

    @FXML
    private GridPane formGridPane;

    @FXML
    public void initialize() {

        // Initialize ComboBoxes
        employmentTypeComboBox.getItems().addAll("Full-Time", "Part-Time", "Contract", "Internship");
        currencyComboBox.getItems().addAll("USD", "EUR", "TND");

        // Set default values
        employmentTypeComboBox.setValue("Full-Time");
        currencyComboBox.setValue("USD");

        // Add event handlers
        postJobButton.setOnAction(event -> handlePostJob());
        
    }
   
    @FXML
    private void handlePostJob() {
        if (!validateForm()) {
            showAlert("Error", "Please fill all required fields.");
            return;
        }

        // Insert job offer into the database
        try {
            String jobTitle = jobTitleField.getText();
            String eventTitle = eventTitleField.getText();
            String jobLocation = jobLocationField.getText();
            String employmentType = employmentTypeComboBox.getValue();
            String applicationDeadline = applicationDeadlinePicker.getValue().toString();
            String minSalary = String.valueOf(Double.parseDouble(minSalaryField.getText()));
            String maxSalary = String.valueOf(Double.parseDouble(maxSalaryField.getText()));
            String currency = currencyComboBox.getValue();
            String jobDescription = jobDescriptionArea.getText();
            String recruiterName = recruiterNameField.getText();
            String recruiterEmail = recruiterEmailField.getText();

            JobRepository.createJob(jobTitle, eventTitle, jobLocation, employmentType, applicationDeadline, minSalary, maxSalary, currency, jobDescription, recruiterName, recruiterEmail);

            showAlert("Success", "Job offer posted successfully!");

        } catch (SQLException e) {
            showAlert("Error", "Failed to post job offer: " + e.getMessage());
        }
    }
    private boolean validateForm() {
        // Check if all required fields are filled
        return !jobTitleField.getText().isEmpty() &&
                !eventTitleField.getText().isEmpty() &&
                !jobLocationField.getText().isEmpty() &&
                applicationDeadlinePicker.getValue() != null &&
                !minSalaryField.getText().isEmpty() &&
                !maxSalaryField.getText().isEmpty() &&
                !jobDescriptionArea.getText().isEmpty() &&
                !recruiterNameField.getText().isEmpty() &&
                !recruiterEmailField.getText().isEmpty();
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void loadView(String fxmlPath, ActionEvent event) {
        try {


            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlPath));
            Parent root = loader.load();
            Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            Scene scene = new Scene(root);
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();

        }
    }

    @FXML
    protected void onDashboardClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/organizer/organizer-view.fxml", event);
    }

    @FXML
    protected void onEventsClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/events/events-view.fxml", event);
    }

    @FXML
    protected void onAnalyticsClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/organizer/analytics-view.fxml", event);
    }



    public void onJobFeedButtonClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/jobfeed/job-feed-view.fxml", event);
    }



    public void onHomeButtonClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/root/root-view.fxml", event);
    }
}

================
File: main/java/com/example/projetjavafx/root/organizer/EventStats.java
================
package com.example.projetjavafx.root.organizer;

public class EventStats {
    private int eventId;
    private String eventName;
    private int totalParticipants;
    private int maleCount;
    private int femaleCount;

    public EventStats(int eventId, String eventName, int totalParticipants, int maleCount, int femaleCount) {
        this.eventId = eventId;
        this.eventName = eventName;
        this.totalParticipants = totalParticipants;
        this.maleCount = maleCount;
        this.femaleCount = femaleCount;
    }

    public int getEventId() { return eventId; }
    public String getEventName() { return eventName; }
    public int getTotalParticipants() { return totalParticipants; }
    public int getMaleCount() { return maleCount; }
    public int getFemaleCount() { return femaleCount; }

    @Override
    public String toString() {
        return eventName; // Display event name in ComboBox
    }
}

================
File: main/java/com/example/projetjavafx/root/organizer/Job.java
================
package com.example.projetjavafx.root.organizer;



public class Job {
    private int jobId; // Add this field
    private String jobTitle;
    private String eventTitle;
    private String jobLocation;
    private String employmentType;
    private String applicationDeadline;
    private double minSalary;
    private double maxSalary;
    private String currency;
    private String jobDescription;
    private String recruiterName;
    private String recruiterEmail;
    private String createdAt;

    // Constructor
    public Job(int jobId, String jobTitle, String eventTitle, String jobLocation, String employmentType,
               String applicationDeadline, double minSalary, double maxSalary, String currency,
               String jobDescription, String recruiterName, String recruiterEmail, String createdAt) {
        this.jobId = jobId;
        this.jobTitle = jobTitle;
        this.eventTitle = eventTitle;
        this.jobLocation = jobLocation;
        this.employmentType = employmentType;
        this.applicationDeadline = applicationDeadline;
        this.minSalary = minSalary;
        this.maxSalary = maxSalary;
        this.currency = currency;
        this.jobDescription = jobDescription;
        this.recruiterName = recruiterName;
        this.recruiterEmail = recruiterEmail;
        this.createdAt = createdAt;
    }

    // Add getter for jobId
    public int getJobId() {
        return jobId;
    }

    // Getters and Setters
    public String getJobTitle() {
        return jobTitle;
    }

    public void setJobTitle(String jobTitle) {
        this.jobTitle = jobTitle;
    }

    public String getEventTitle() {
        return eventTitle;
    }

    public void setEventTitle(String eventTitle) {
        this.eventTitle = eventTitle;
    }

    public String getJobLocation() {
        return jobLocation;
    }

    public void setJobLocation(String jobLocation) {
        this.jobLocation = jobLocation;
    }

    public String getEmploymentType() {
        return employmentType;
    }

    public void setEmploymentType(String employmentType) {
        this.employmentType = employmentType;
    }

    public String getApplicationDeadline() {
        return applicationDeadline;
    }

    public void setApplicationDeadline(String applicationDeadline) {
        this.applicationDeadline = applicationDeadline;
    }

    public double getMinSalary() {
        return minSalary;
    }

    public void setMinSalary(double minSalary) {
        this.minSalary = minSalary;
    }

    public double getMaxSalary() {
        return maxSalary;
    }

    public void setMaxSalary(double maxSalary) {
        this.maxSalary = maxSalary;
    }

    public String getCurrency() {
        return currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }

    public String getJobDescription() {
        return jobDescription;
    }

    public void setJobDescription(String jobDescription) {
        this.jobDescription = jobDescription;
    }

    public String getRecruiterName() {
        return recruiterName;
    }

    public void setRecruiterName(String recruiterName) {
        this.recruiterName = recruiterName;
    }

    public String getRecruiterEmail() {
        return recruiterEmail;
    }

    public void setRecruiterEmail(String recruiterEmail) {
        this.recruiterEmail = recruiterEmail;
    }

    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }
}

================
File: main/java/com/example/projetjavafx/root/organizer/JobRepository.java
================
package com.example.projetjavafx.root.organizer;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;

import java.awt.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class JobRepository {
    public static void createJob(String jobTitle , String eventTitle ,String jobLocation,String employmentType,String applicationDeadline,String minSalary,String maxSalary,String currency,String jobDescription , String recruiterName , String recruiterEmail) throws SQLException {


        Connection conn = AivenMySQLManager.getConnection();
        String sql = "INSERT INTO jobs (job_title, event_title, job_location, employment_type, application_deadline, min_salary, max_salary, currency, job_description, recruiter_name, recruiter_email, user_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement pstmt = conn.prepareStatement(sql);

        // Set parameters

        pstmt.setString(1, jobTitle);
        pstmt.setString(2,eventTitle );
        pstmt.setString(3, jobLocation );
        pstmt.setString(4, employmentType);
        pstmt.setString(5, applicationDeadline );
        pstmt.setDouble(6, Double.parseDouble(minSalary));
        pstmt.setDouble(7, Double.parseDouble(maxSalary));
        pstmt.setString(8, currency );
        pstmt.setString(9, jobDescription);
        pstmt.setString(10, recruiterName);
        pstmt.setString(11, recruiterEmail);
        pstmt.setInt(12, 1); // Replace with the logged-in user's ID (e.g., from session)

        // Execute the query
        pstmt.executeUpdate();


    }
}

================
File: main/java/com/example/projetjavafx/root/organizer/OrganizerController.java
================
package com.example.projetjavafx.root.organizer;

import com.example.projetjavafx.root.jobApplications.JobApplicationsController;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;

import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

public class OrganizerController {

    // Event Table Components
    @FXML private TableView<Map<String, String>> eventsTable;
    @FXML private TableColumn<Map<String, String>, String> eventNameColumn;
    @FXML private TableColumn<Map<String, String>, String> eventDescColumn;
    @FXML private TableColumn<Map<String, String>, String> eventStartColumn;
    @FXML private TableColumn<Map<String, String>, String> eventEndColumn;
    @FXML private TableColumn<Map<String, String>, String> eventLocationColumn;

    // Job Table Components
    @FXML private TableView<Map<String, String>> jobsTable;
    @FXML private TableColumn<Map<String, String>, String> jobTitleColumn;
    @FXML private TableColumn<Map<String, String>, String> eventTitleColumn;
    @FXML private TableColumn<Map<String, String>, String> jobLocationColumn;
    @FXML private TableColumn<Map<String, String>, String> employmentTypeColumn;
    @FXML private TableColumn<Map<String, String>, String> applicationDeadlineColumn;
    @FXML private TableColumn<Map<String, String>, String> minSalaryColumn;
    @FXML private TableColumn<Map<String, String>, String> maxSalaryColumn;
    @FXML private TableColumn<Map<String, String>, String> currencyColumn;
    @FXML private TableColumn<Map<String, String>, String> jobDescColumn;
    @FXML private TableColumn<Map<String, String>, String> recruiterNameColumn;
    @FXML private TableColumn<Map<String, String>, String> recruiterEmailColumn;
    @FXML private TableColumn<Map<String, String>, String> createdAtColumn;
    private String fatalError;

    @FXML
    public void initialize() {
        setupEventTableColumns();
        setupJobTableColumns();
        loadData();
    }


    private void setupEventTableColumns() {
        eventNameColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().get("name")));
        eventDescColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().get("description")));
        eventStartColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().get("start_time")));
        eventEndColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().get("end_time")));
        eventLocationColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().get("location")));
    }

    private void setupJobTableColumns() {
        jobTitleColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().get("job_title")));
        eventTitleColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().get("event_title")));
        jobLocationColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().get("job_location")));
        employmentTypeColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().get("employment_type")));
        applicationDeadlineColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().get("application_deadline")));
        minSalaryColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().get("min_salary")));
        maxSalaryColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().get("max_salary")));
        currencyColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().get("currency")));
        jobDescColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().get("job_description")));
        recruiterNameColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().get("recruiter_name")));
        recruiterEmailColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().get("recruiter_email")));
        createdAtColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().get("created_at")));
    }

    private void loadData() {
        try {
            int currentUserId = 1; // Replace with actual session management

            // Load events
            List<Map<String, String>> events = OrganizerRepository.getOrganizerEvents(currentUserId);
            ObservableList<Map<String, String>> eventItems = FXCollections.observableArrayList(events);
            eventsTable.setItems(eventItems);

            // Load jobs
            List<Map<String, String>> jobs = OrganizerRepository.getOrganizerJobs(currentUserId);
            ObservableList<Map<String, String>> jobItems = FXCollections.observableArrayList(jobs);
            jobsTable.setItems(jobItems);

        } catch (SQLException e) {
            e.printStackTrace();
            // Show an error alert
        }




    }

    @FXML
    public void onNewJobPostClick(ActionEvent event) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/organizer/create-job-offer-view.fxml"));
            Parent root = loader.load();
            Stage stage = (Stage)((Button)event.getSource()).getScene().getWindow();
            stage.setScene(new Scene(root));
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    @FXML
    public void onCreateJobClick(ActionEvent event) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/organizer/create-job-offer-view.fxml"));
            Parent root = loader.load();
            Stage stage = (Stage)((Button)event.getSource()).getScene().getWindow();
            stage.setScene(new Scene(root));
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    @FXML
    private void handleHomeButton(javafx.event.ActionEvent event) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/root/root-view.fxml"));
            Parent root = loader.load();

            Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            stage.setScene(new Scene(root));
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();

        }
    }




    public void onAnalyticsClick(ActionEvent event) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/organizer/analytics-view.fxml"));
            Parent root = loader.load();

            Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            stage.setScene(new Scene(root));
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();

        }
    }

    public void onJobFeedButtonClick(ActionEvent event) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/jobfeed/job-feed-view.fxml"));
            Parent root = loader.load();

            Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            stage.setScene(new Scene(root));
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();

        }
    }

    @FXML
    private void onReviewApplicationsButtonClick(ActionEvent event) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource(
                    "/com/example/projetjavafx/JobApplications/application_review-view.fxml"
            ));

            Parent root = loader.load();

            // Ensure the controller is correctly initialized
            JobApplicationsController controller = loader.getController();
            int yourActualJobId = 1; // Replace with actual job ID
            controller.setJobId(yourActualJobId);

            // Get the current scene and update the root
            Scene scene = ((Button) event.getSource()).getScene();
            scene.setRoot(root); // Set the new content without opening a new window

        } catch (IOException e) {
            e.printStackTrace();
            showAlert("Error", "Failed to load Job Applications View.");
        }
    }


    private void showAlert(String title, String message) {
        javafx.scene.control.Alert alert = new javafx.scene.control.Alert(javafx.scene.control.Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    public void onAppliedAtButtonClick(ActionEvent event) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/jobApplications/applied-jobs.fxml"));
            Parent root = loader.load();

            Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            stage.setScene(new Scene(root));
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();

        }

    }
}

================
File: main/java/com/example/projetjavafx/root/organizer/OrganizerRepository.java
================
package com.example.projetjavafx.root.organizer;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizerRepository {

    // Fetch all events for the organizer
    public static List<Map<String, String>> getOrganizerEvents(int userId) throws SQLException {
        List<Map<String, String>> events = new ArrayList<>();
        String sql = "SELECT name, description, start_time, end_time, location FROM Events WHERE organizer_id = ?";

        try (Connection conn = AivenMySQLManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, userId);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                Map<String, String> event = new HashMap<>();
                event.put("name", rs.getString("name"));
                event.put("description", rs.getString("description"));
                event.put("start_time", rs.getString("start_time"));
                event.put("end_time", rs.getString("end_time"));
                event.put("location", rs.getString("location"));
                events.add(event);
            }
        }
        return events;
    }

    // Fetch all jobs for the organizer
    public static List<Map<String, String>> getOrganizerJobs(int userId) throws SQLException {
        List<Map<String, String>> jobs = new ArrayList<>();
        String sql = "SELECT job_title, event_title, job_location, employment_type, application_deadline, " +
                "min_salary, max_salary, currency, job_description, recruiter_name, recruiter_email, created_at " +
                "FROM jobs WHERE user_id = ?";

        try (Connection conn = AivenMySQLManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, userId);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                Map<String, String> job = new HashMap<>();
                job.put("job_title", rs.getString("job_title"));
                job.put("event_title", rs.getString("event_title"));
                job.put("job_location", rs.getString("job_location"));
                job.put("employment_type", rs.getString("employment_type"));
                job.put("application_deadline", rs.getString("application_deadline"));
                job.put("min_salary", rs.getString("min_salary"));
                job.put("max_salary", rs.getString("max_salary"));
                job.put("currency", rs.getString("currency"));
                job.put("job_description", rs.getString("job_description"));
                job.put("recruiter_name", rs.getString("recruiter_name"));
                job.put("recruiter_email", rs.getString("recruiter_email"));
                job.put("created_at", rs.getString("created_at"));
                jobs.add(job);
            }
        }

        return jobs;
    }
}

================
File: main/java/com/example/projetjavafx/root/profile/EditProfileController.java
================
package com.example.projetjavafx.root.profile;

import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.image.ImageView;
import javafx.stage.FileChooser;

import java.io.File;

public class EditProfileController {



        @FXML
        private ImageView profileImageView;

        @FXML
        private TextField txtName;

        @FXML
        private Button btnSaveChanges;

        @FXML
        private Button btnBack;

        private String profileImagePath;

        @FXML
        public void initialize() {
            // Initialize default profile details (optional)
            txtName.setText("Aya");

            // Handle save button
            btnSaveChanges.setOnAction(e -> saveProfileChanges());

            // Handle back button
            btnBack.setOnAction(e -> goBack());
        }

        // Method to change profile photo (now triggered by clicking the image)
        @FXML
        private void changeProfileImage() {
            FileChooser fileChooser = new FileChooser();
            fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("Image Files", ".png", ".jpg", "*.jpeg"));
            File file = fileChooser.showOpenDialog(profileImageView.getScene().getWindow());

            if (file != null) {
                profileImagePath = file.getAbsolutePath();
                profileImageView.setImage(new javafx.scene.image.Image("file:" + profileImagePath));
            }
        }

        // Method to save profile changes
        @FXML
        private void saveProfileChanges() {
            String name = txtName.getText();

            if (profileImagePath == null || profileImagePath.isEmpty()) {
                Alert alert = new Alert(Alert.AlertType.WARNING);
                alert.setTitle("No Image Selected");
                alert.setHeaderText("Please select a profile image.");
                alert.showAndWait();
                return;
            }

            // Save the changes (e.g., save to a database or a file)
            System.out.println("Profile saved: " + name + ", " + profileImagePath);

            // Optionally, show a confirmation message
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Profile Updated");
            alert.setHeaderText("Your profile has been updated successfully.");
            alert.showAndWait();
        }

        // Go back to the previous page (Dashboard)
        private void goBack() {
            // Navigate to your Dashboard or the previous screen here
        }
    }

================
File: main/java/com/example/projetjavafx/root/profile/EditProfileRepository.java
================
package com.example.projetjavafx.root.profile;

public class EditProfileRepository {
}

================
File: main/java/com/example/projetjavafx/root/profile/ProfileController.java
================
package com.example.projetjavafx.root.profile;

public class ProfileController {
}

================
File: main/java/com/example/projetjavafx/root/profile/ProfileRepository.java
================
package com.example.projetjavafx.root.profile;

public class ProfileRepository {

}

================
File: main/java/com/example/projetjavafx/root/RootController.java
================
package com.example.projetjavafx.root;

import com.example.projetjavafx.root.auth.SessionManager;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.image.ImageView;
import javafx.stage.Stage;

import java.io.IOException;
import java.sql.SQLException;

public class RootController {
    public Button organizerButton;
    public Button eventsButton;
    public Button profileButton;
    public Button registerButton;
    public Button loginButton;
    public Button groupButton;
    public Button createJobButton;
    public Button jobButton;
    @FXML
    private ImageView imageView;

    @FXML
    private void initialize() {
        // Check if user is logged in at the start
        if (!isUserLoggedIn()) {
            // Redirect to login page if not logged in
            redirectToLogin();
        }
    }
    // Method to check if the user is logged in
    private boolean isUserLoggedIn() {
        return SessionManager.getInstance().getCurrentUserId() != -1;
    }

    // Method to handle logout and redirect to the login page
    @FXML
    private void onLogout() {
        SessionManager.getInstance().logout();  // Clear session
        redirectToLogin();  // Redirect to login
    }


    // Method to redirect to the login page
    private void redirectToLogin() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/auth/login-view.fxml"));
            Parent root = loader.load();
            Stage stage = (Stage) ((Parent) root).getScene().getWindow();
            Scene scene = new Scene(root);
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    private void loadView(String fxmlPath, ActionEvent event) {
        try {


            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlPath));
            Parent root = loader.load();
            Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            Scene scene = new Scene(root);
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();

        }
    }

    @FXML
    protected void onOrganizerButtonClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/organizer/organizer-view.fxml", event);
    }

    @FXML
    protected void onEventsClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/events/events-view.fxml", event);
    }

    @FXML
    protected void onProfileClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/profile/profile-view.fxml", event);
    }

    @FXML
    protected void onLoginClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/auth/login-view.fxml", event);
    }

    @FXML
    protected void onGroupButtonClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/group/group-profile-view.fxml", event);
    }

    @FXML
    protected void onRegisterClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/auth/register-view.fxml", event);
    }

    @FXML
    protected void onCreateJobClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/organizer/create-job-offer-view.fxml", event);
    }

    public void onDachClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/organizer/organizer-view.fxml", event);
    }

    @FXML
    protected void onAnalyticsClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/organizer/analytics-view.fxml", event);
    }

    @FXML
    protected void onJobFeedClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/jobfeed/job-feed-view.fxml", event);
    }


    @FXML
    protected void onsocialButtonClick(ActionEvent event) {
        loadView("/com/example/projetjavafx/social/Feed.fxml", event);
    }
}

================
File: main/java/com/example/projetjavafx/root/social/Account.java
================
package com.example.projetjavafx.root.social;

public class Account {
    private String name;
    private String profileImg;
    private boolean isVerified;

    // ✅ Ajout du constructeur avec paramètres
    public Account(String name, String profileImg, boolean isVerified) {
        this.name = name;
        this.profileImg = profileImg;
        this.isVerified = isVerified;
    }

    // ✅ Constructeur par défaut (inutile si on n'en a pas besoin)
    public Account() {}

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getProfileImg() {
        return this.profileImg;
    }

    public void setProfileImg(String profileImg) {
        this.profileImg = profileImg;
    }

    public boolean isVerified() {
        return this.isVerified;
    }

    public void setVerified(boolean verified) {
        this.isVerified = verified;
    }
}

================
File: main/java/com/example/projetjavafx/root/social/GroupController.java
================
package com.example.projetjavafx.root.social;

import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;
import javafx.scene.control.Button;
import java.sql.SQLException;
import java.util.List;

public class GroupController {

    @FXML private ListView<Post> groupFeedListView;
    @FXML private TextArea newPostContent;
    @FXML private Button postButton;

    private PostDAO postDAO;
    private int currentGroupId;

    public void initialize() {
        loadGroupPosts();
        postButton.setOnAction(e -> {
            try {
                handleNewPost();
            } catch (SQLException ex) {
                showAlert("Database Error", "Failed to create new post: " + ex.getMessage());
            }
        });
    }

    private void loadGroupPosts() {
        try {
            List<Post> groupPosts = postDAO.getPostsByGroupId(currentGroupId);
            groupFeedListView.getItems().setAll(groupPosts);
        } catch (SQLException e) {
            e.printStackTrace();
            showAlert("Database Error", "Failed to load group posts: " + e.getMessage());
        }
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void handleNewPost() throws SQLException {
        String content = newPostContent.getText().trim();
        if (!content.isEmpty()) {
            Post newPost = new Post(1, content, null, null); // Remplacez 1 par l'ID utilisateur actuel
            newPost.setGroupId(currentGroupId);
            postDAO.savePost(newPost);
            loadGroupPosts();
            newPostContent.clear();
        }
    }
}

================
File: main/java/com/example/projetjavafx/root/social/Post.java
================
package com.example.projetjavafx.root.social;

import java.time.LocalDateTime;

public class Post {

    private int postId;
    private int userId;
    private String content;
    private String imagePath;
    private String timestamp;
    private Integer eventId;
    private boolean isDeleted;
    private String createdAt;
    private String updatedAt;
    private int scorePopularite;
    private int groupId; // Add this field if it doesn't exist


    public Post(int userId, String content, Integer eventId, String imagePath) {
        this.userId = userId;
        this.content = content;
        this.imagePath = imagePath;
        this.eventId = eventId;
        this.isDeleted = false;
        this.createdAt = LocalDateTime.now().toString();
        this.updatedAt = this.createdAt;
        this.scorePopularite = 0;
    }

    // Getters and Setters
    public int getPostId() { return postId; }
    public void setPostId(int postId) { this.postId = postId; }

    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }

    public String getContent() { return content; }
    public void setContent(String content) { this.content = content; }

    public String getImagePath() {
        return imagePath;
    }

    public void setImagePath(String imagePath) {
        this.imagePath = imagePath;
    }

    public String getTimestamp() { return timestamp; }
    public void setTimestamp(String timestamp) { this.timestamp = timestamp; }

    public Integer getEventId() { return eventId; }
    public void setEventId(Integer eventId) { this.eventId = eventId; }

    public boolean isDeleted() { return isDeleted; }
    public void setDeleted(boolean deleted) { isDeleted = deleted; }

    public String getCreatedAt() { return createdAt; }
    public void setCreatedAt(String createdAt) { this.createdAt = createdAt; }

    public String getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(String updatedAt) { this.updatedAt = updatedAt; }

    public int getScorePopularite() { return scorePopularite; }
    public void setScorePopularite(int scorePopularite) { this.scorePopularite = scorePopularite; }

    public void setGroupId(int groupId) {
        this.groupId = groupId;
    }

    public int getGroupId() {
        return groupId;
    }
}

================
File: main/java/com/example/projetjavafx/root/social/PostAudience.java
================
package com.example.projetjavafx.root.social;

//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//


public enum PostAudience {
    PUBLIC(0, "Public", "/com/example/projetjavafx/social/img/ic_public.png"),
    FRIENDS(1, "Friends", "/com/example/projetjavafx/social/img/ic_friend.png");

    private int id;
    private String name;
    private String imgSrc;

    private PostAudience(int id, String name, String imgSrc) {
        this.id = id;
        this.name = name;
        this.imgSrc = imgSrc;
    }

    public int getId() {
        return this.id;
    }

    public String getName() {
        return this.name;
    }

    public String getImgSrc() {
        return this.imgSrc;
    }
}

================
File: main/java/com/example/projetjavafx/root/social/PostController.java
================
package com.example.projetjavafx.root.social;

import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextArea;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.input.TransferMode;
import javafx.scene.layout.StackPane;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.List;

public class PostController {

    // Références FXML
    @FXML private TextArea postContent;
    @FXML private Button publishButton;
    @FXML private ImageView mediaPreview;
    @FXML private StackPane mediaPreviewContainer;
    @FXML private ComboBox<String> privacyComboBox;

    private SocialController socialController;
    private File selectedFile;

    public void setSocialController(SocialController controller) {
        this.socialController = controller;
    }

    @FXML
    public void initialize() {
        configurePrivacyOptions();
        setupDragAndDrop();
        publishButton.setDisable(true);

        postContent.textProperty().addListener((obs, oldVal, newVal) ->
                checkPublishButtonState()
        );
    }

    private void configurePrivacyOptions() {
        privacyComboBox.getItems().addAll("Moi uniquement", "Amis", "Public");
        privacyComboBox.setValue("Moi uniquement");
    }

    private void setupDragAndDrop() {
        mediaPreviewContainer.setOnDragOver(event -> {
            if (event.getDragboard().hasFiles()) {
                event.acceptTransferModes(TransferMode.COPY);
            }
            event.consume();
        });

        mediaPreviewContainer.setOnDragDropped(event -> {
            List<File> files = event.getDragboard().getFiles();
            if (!files.isEmpty()) {
                handleFileSelection(files.get(0));
            }
            event.setDropCompleted(true);
            event.consume();
        });
    }

    @FXML
    private void handleAddMediaClick(MouseEvent event) {
        chooseFile();
    }

    @FXML
    private void chooseFile() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.getExtensionFilters().addAll(
                new FileChooser.ExtensionFilter("Images", "*.png", "*.jpg", "*.jpeg"),
                new FileChooser.ExtensionFilter("Vidéos", "*.mp4", "*.mov")
        );

        File file = fileChooser.showOpenDialog(publishButton.getScene().getWindow());
        if (file != null) {
            handleFileSelection(file);
        }
    }

    private void handleFileSelection(File file) {
        selectedFile = file;
        if (file.getName().matches("(?i).*\\.(mp4|mov)$")) {
            mediaPreview.setVisible(false);
        } else {
            mediaPreview.setImage(new Image(file.toURI().toString()));
            mediaPreview.setVisible(true);
        }
        mediaPreviewContainer.setVisible(true);
        checkPublishButtonState();
    }

    @FXML
    private void removeMedia() {
        selectedFile = null;
        mediaPreview.setImage(null);
        mediaPreviewContainer.setVisible(false);
        checkPublishButtonState();
    }

    private void checkPublishButtonState() {
        boolean hasContent = !postContent.getText().trim().isEmpty();
        boolean hasMedia = selectedFile != null;
        publishButton.setDisable(!(hasContent || hasMedia));
    }

    @FXML
    private void handlePostSubmission() {
        String content = postContent.getText().trim();
        String imagePath = null;

        if (selectedFile != null) {
            String uniqueFileName = System.currentTimeMillis() + "_" + selectedFile.getName();
            // Use a dedicated folder (e.g., "images/") instead of the resources folder
            String targetDir = "images/";
            File targetFile = new File(targetDir + uniqueFileName);

            try {
                new File(targetDir).mkdirs(); // Ensure directory exists
                Files.copy(selectedFile.toPath(), targetFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                // Store the absolute path for later retrieval
                imagePath = targetFile.getAbsolutePath();
            } catch (IOException e) {
                showAlert("Error", "Failed to save image: " + e.getMessage());
                return;
            }
        }


        String privacy = privacyComboBox.getValue();

        Post newPost = new Post(
                1, // Replace with actual user ID
                content,
                null, // eventId
                imagePath
        );

        if (socialController != null) {
            socialController.addPostToFeed(newPost);
        }

        closeWindow();
    }

    private Account getCurrentUser() {
        // Remplacer par la logique réelle d'authentification
        return new Account("Hadil Lajili", "/com/example/projetjavafx/social/img/userprofile.png", true);
    }

    private void closeWindow() {
        ((Stage) publishButton.getScene().getWindow()).close();
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.WARNING);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}

================
File: main/java/com/example/projetjavafx/root/social/PostDAO.java
================
package com.example.projetjavafx.root.social;


import java.sql.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class PostDAO {
    private Connection connection;

    public PostDAO(Connection connection) {
        this.connection = connection;
    }

    public void savePost(Post post) throws SQLException {
        String sql = "INSERT INTO FeedPosts (user_id, content, event_id, is_deleted, created_at, updated_at, score_popularite, image_path) " +
                "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

        try (PreparedStatement pstmt = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            pstmt.setInt(1, post.getUserId());
            pstmt.setString(2, post.getContent());
            if (post.getEventId() != null) {
                pstmt.setInt(3, post.getEventId());
            } else {
                pstmt.setNull(3, Types.INTEGER);
            }
            pstmt.setInt(4, post.isDeleted() ? 1 : 0);
            pstmt.setString(5, post.getCreatedAt());
            pstmt.setString(6, post.getUpdatedAt());
            pstmt.setInt(7, post.getScorePopularite());
            pstmt.setString(8, post.getImagePath());

            pstmt.executeUpdate();

            ResultSet rs = pstmt.getGeneratedKeys();
            if (rs.next()) {
                post.setPostId(rs.getInt(1));
            }
        }
    }
    public List<Post> getAllPosts() throws SQLException {
        List<Post> posts = new ArrayList<>();
        String sql = "SELECT p.*, " +
                "(SELECT COUNT(*) FROM Likes l WHERE l.post_id = p.post_id) as like_count, " +
                "(SELECT COUNT(*) FROM Comments c WHERE c.post_id = p.post_id) as comment_count, " +
                "(SELECT COUNT(*) FROM Shares s WHERE s.post_id = p.post_id) as share_count " +
                "FROM FeedPosts p " +
                "WHERE p.is_deleted = 0 " +
                "ORDER BY (like_count + comment_count + share_count) DESC, p.created_at DESC";

        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                Post post = new Post(
                        rs.getInt("user_id"),
                        rs.getString("content"),
                        rs.getInt("event_id"),
                        rs.getString("image_path")
                );
                post.setPostId(rs.getInt("post_id"));
                post.setCreatedAt(rs.getString("created_at"));
                post.setUpdatedAt(rs.getString("updated_at"));

                // Calculate and set popularity score
                int likeCount = rs.getInt("like_count");
                int commentCount = rs.getInt("comment_count");
                int shareCount = rs.getInt("share_count");
                int popularityScore = likeCount + commentCount + shareCount;
                post.setScorePopularite(popularityScore);

                posts.add(post);
            }
        }
        return posts;
    }

    public void updatePopularityScore(int postId) throws SQLException {
        String sql = "UPDATE FeedPosts SET score_popularite = " +
                "(SELECT COUNT(*) FROM Likes WHERE post_id = ?) + " +
                "(SELECT COUNT(*) FROM Comments WHERE post_id = ?) + " +
                "(SELECT COUNT(*) FROM Shares WHERE post_id = ?) " +
                "WHERE post_id = ?";

        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setInt(1, postId);
            pstmt.setInt(2, postId);
            pstmt.setInt(3, postId);
            pstmt.setInt(4, postId);
            pstmt.executeUpdate();
        }
    }


    public void updatePost(Post post) throws SQLException {
        String sql = "UPDATE FeedPosts SET content = ?, updated_at = ? WHERE post_id = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, post.getContent());
            pstmt.setString(2, LocalDateTime.now().toString());
            pstmt.setInt(3, post.getPostId());
            pstmt.executeUpdate();
        }
    }
    public List<Post> searchPosts(String searchText) throws SQLException {
        List<Post> posts = new ArrayList<>();
        String sql = "SELECT * FROM FeedPosts WHERE content LIKE ? AND is_deleted = 0 ORDER BY created_at DESC";

        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, "%" + searchText + "%");

            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    Post post = new Post(
                            rs.getInt("user_id"),
                            rs.getString("content"),
                            rs.getInt("event_id"),
                            rs.getString("image_path"));
                    post.setPostId(rs.getInt("post_id"));
                    post.setTimestamp(rs.getString("timestamp"));
                    post.setDeleted(rs.getBoolean("is_deleted"));
                    post.setCreatedAt(rs.getString("created_at"));
                    post.setUpdatedAt(rs.getString("updated_at"));
                    post.setScorePopularite(rs.getInt("score_popularite"));
                    posts.add(post);
                }
            }
        }
        return posts;
    }
    public void toggleLike(int postId, int userId) throws SQLException {
        // Check if user already liked the post
        String checkSql = "SELECT like_id FROM Likes WHERE post_id = ? AND user_id = ?";
        try (PreparedStatement checkStmt = connection.prepareStatement(checkSql)) {
            checkStmt.setInt(1, postId);
            checkStmt.setInt(2, userId);
            ResultSet rs = checkStmt.executeQuery();

            if (rs.next()) {
                // Unlike: Remove existing like
                String deleteSql = "DELETE FROM Likes WHERE post_id = ? AND user_id = ?";
                try (PreparedStatement deleteStmt = connection.prepareStatement(deleteSql)) {
                    deleteStmt.setInt(1, postId);
                    deleteStmt.setInt(2, userId);
                    deleteStmt.executeUpdate();
                }
            } else {
                // Like: Add new like
                String insertSql = "INSERT INTO Likes (post_id, user_id) VALUES (?, ?)";
                try (PreparedStatement insertStmt = connection.prepareStatement(insertSql)) {
                    insertStmt.setInt(1, postId);
                    insertStmt.setInt(2, userId);
                    insertStmt.executeUpdate();
                }
            }
        }
        updatePopularityScore(postId);
    }

    public void addComment(int postId, int userId, String content) throws SQLException {
        String sql = "INSERT INTO Comments (post_id, user_id, content) VALUES (?, ?, ?)";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setInt(1, postId);
            pstmt.setInt(2, userId);
            pstmt.setString(3, content);
            pstmt.executeUpdate();
        }
        updatePopularityScore(postId);
    }

    public void sharePost(int postId, int userId) throws SQLException {
        String sql = "INSERT INTO Shares (post_id, user_id) VALUES (?, ?)";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setInt(1, postId);
            pstmt.setInt(2, userId);
            pstmt.executeUpdate();
        }
        updatePopularityScore(postId);
    }

    public int getLikeCount(int postId) throws SQLException {
        return getCount("Likes", postId);
    }

    public int getCommentCount(int postId) throws SQLException {
        return getCount("Comments", postId);
    }

    public int getShareCount(int postId) throws SQLException {
        return getCount("Shares", postId);
    }

    private int getCount(String table, int postId) throws SQLException {
        String sql = "SELECT COUNT(*) FROM " + table + " WHERE post_id = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setInt(1, postId);
            ResultSet rs = pstmt.executeQuery();
            return rs.next() ? rs.getInt(1) : 0;
        }
    }

    public List<Post> getPostsByGroupId(int groupId) throws SQLException {
        List<Post> posts = new ArrayList<>();
        String sql = "SELECT * FROM FeedPosts WHERE group_id = ? AND is_deleted = 0 ORDER BY created_at DESC";

        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setInt(1, groupId);

            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    Post post = new Post(
                            rs.getInt("user_id"),
                            rs.getString("content"),
                            rs.getInt("event_id"),
                            rs.getString("image_path")
                    );
                    post.setPostId(rs.getInt("post_id"));
                    post.setCreatedAt(rs.getString("created_at"));
                    post.setUpdatedAt(rs.getString("updated_at"));
                    post.setScorePopularite(rs.getInt("score_popularite"));
                    posts.add(post);
                }
            }
        }
        return posts;
    }

    public void deletePost(int postId) {
    }
}

================
File: main/java/com/example/projetjavafx/root/social/PostItemController.java
================
package com.example.projetjavafx.root.social;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.VBox;

import java.io.File;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Optional;

public class PostItemController {
    @FXML private ImageView userAvatar;
    @FXML private Label userName;
    @FXML private Label postContent;
    @FXML private ImageView postImage;
    @FXML private Button likeButton;
    @FXML private Button commentButton;
    @FXML private Button shareButton;
    @FXML private Label likeCount;
    @FXML private Label commentCount;
    @FXML private Label shareCount;

    private Post post;
    private PostDAO postDAO;
    private Connection connection;

    @FXML
    public void initialize() {
        try {
            connection = AivenMySQLManager.getConnection();
            postDAO = new PostDAO(connection);

            likeButton.setOnAction(e -> handleLike());
            commentButton.setOnAction(e -> handleComment());
            shareButton.setOnAction(e -> handleShare());
        } catch (SQLException e) {
            e.printStackTrace();
            showAlert(Alert.AlertType.ERROR, "Error", "Failed to initialize database connection");
        }
    }

    private void showAlert(Alert.AlertType alertType, String error, String failedToInitializeDatabaseConnection) {
    }

    public void setData(Post post) {
        // Set user avatar (default image for now)
        userAvatar.setImage(new Image(getClass().getResource("/com/example/projetjavafx/social/img/user.png").toString()));

        // Set username (you can get this from your user management system)
        userName.setText("User " + post.getUserId());

        // Set post content
        postContent.setText(post.getContent());

        // Set post image if exists
        if (post.getImagePath() != null) {
            File imageFile = new File(post.getImagePath());
            if (imageFile.exists()) {
                Image image = new Image(imageFile.toURI().toString());
                postImage.setImage(image);
                postImage.setVisible(true);
            } else {
                System.err.println("Error loading image. File not found: " + post.getImagePath());
                postImage.setVisible(false);
            }
        } else {
            postImage.setVisible(false);
        }
    }
    @FXML
    private void handleLike() {
        try {
           // postDAO.toggleLike(post.getPostId(), getCurrentUserId());
            updateLikeButton();
            updateCounts();
        } catch (SQLException e) {
            showAlert(Alert.AlertType.ERROR, "Error", "Failed to process like: " + e.getMessage());
        }
    }

    @FXML
    private void handleComment() {
        TextInputDialog dialog = new TextInputDialog();
        dialog.setTitle("Add Comment");
        dialog.setHeaderText(null);
        dialog.setContentText("Write your comment:");

        Optional<String> result = dialog.showAndWait();
        result.ifPresent(comment -> {
            try {
              //  postDAO.addComment(post.getPostId(), getCurrentUserId(), comment);
                updateCounts();
                // Optionally show success message
                showAlert(Alert.AlertType.ERROR, "Success", "Comment added successfully!");
            } catch (SQLException e) {
                showAlert(Alert.AlertType.ERROR, "Error", "Failed to add comment: " + e.getMessage());
            }
        });
    }

    @FXML
    private void handleShare() {
        Alert confirmDialog = new Alert(Alert.AlertType.CONFIRMATION);
        confirmDialog.setTitle("Share Post");
        confirmDialog.setHeaderText(null);
        confirmDialog.setContentText("Do you want to share this post?");

        Optional<ButtonType> result = confirmDialog.showAndWait();
        if (result.isPresent() && result.get() == ButtonType.OK) {
            try {
               // postDAO.sharePost(post.getPostId(), getCurrentUserId());
                updateCounts();
                showAlert(Alert.AlertType.ERROR, "Success", "Post shared successfully!");
            } catch (SQLException e) {
                showAlert(Alert.AlertType.ERROR, "Error", "Failed to share post: " + e.getMessage());
            }
        }
    }

    private void updateCounts() throws SQLException {
        likeCount.setText(String.valueOf(postDAO.getLikeCount(post.getPostId())));
        commentCount.setText(String.valueOf(postDAO.getCommentCount(post.getPostId())));
        shareCount.setText(String.valueOf(postDAO.getShareCount(post.getPostId())));
    }

    private void updateLikeButton() {
        // Update like button appearance based on whether the current user has liked the post
      //  try {
          //  boolean hasLiked = postDAO.hasUserLikedPost(getCurrentUserId(), post.getPostId());
          //  likeButton.setStyle(hasLiked ? "-fx-background-color: #2196F3;" : "-fx-background-color: transparent;");
      //  } catch (SQLException e) {
        //    e.printStackTrace();
        //}
    }
    @FXML private Button deleteButton;
    @FXML
    public void handleDelete() {
        if (post == null) {
            showAlert("Error", "No post selected");
            return;
        }

        Alert confirmDialog = new Alert(Alert.AlertType.CONFIRMATION);
        confirmDialog.setTitle("Delete Post");
        confirmDialog.setHeaderText(null);
        confirmDialog.setContentText("Are you sure you want to delete this post?");

        Optional<ButtonType> result = confirmDialog.showAndWait();
        if (result.isPresent() && result.get() == ButtonType.OK) {
            postDAO.deletePost(post.getPostId());

            // Remove post from view
            Node postNode = deleteButton.getParent();
            while (!(postNode.getParent() instanceof VBox)) {
                postNode = postNode.getParent();
            }
            ((VBox) postNode.getParent()).getChildren().remove(postNode);
        }
    }

    public void setPost(Post post) {
        this.post = post;
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}

================
File: main/java/com/example/projetjavafx/root/social/Reactions.java
================
package com.example.projetjavafx.root.social;

//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//


public enum Reactions {
    NON(0, "Like", "#606266", "/com/example/projetjavafx/social/img/ic_like_outline.png"),
    LIKE(1, "Like", "#056BE1", "/com/example/projetjavafx/social/img/ic_like.png"),
    LOVE(2, "Love", "#E12C4A", "/com/example/projetjavafx/social/img/ic_love_.png"),
    CARE(3, "Care", "#EAA823", "/com/example/projetjavafx/social/img/ic_care.png"),
    HAHA(4, "Haha", "#EAA823", "/com/example/projetjavafx/social/img/ic_haha.png"),
    WOW(5, "Wow", "#EAA823", "/com/example/projetjavafx/social/img/ic_wow.png"),
    SAD(6, "Sad", "#EAA823", "/com/example/projetjavafx/social/img/ic_sad.png"),
    ANGRY(7, "Angry", "#DD6B0E", "/com/example/projetjavafx/social/img/ic_angry.png");

    private int id;
    private String name;
    private String color;
    private String imgSrc;

    private Reactions(int id, String name, String color, String imgSrc) {
        this.id = id;
        this.name = name;
        this.color = color;
        this.imgSrc = imgSrc;
    }

    public int getId() {
        return this.id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getColor() {
        return this.color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    public String getImgSrc() {
        return this.imgSrc;
    }

    public void setImgSrc(String imgSrc) {
        this.imgSrc = imgSrc;
    }
}

================
File: main/java/com/example/projetjavafx/root/social/SocialController.java
================
package com.example.projetjavafx.root.social;

import com.example.projetjavafx.root.DbConnection.AivenMySQLManager;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.control.Alert;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.sql.Connection;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.List;
import java.util.ResourceBundle;

public class SocialController implements Initializable {

    @FXML private VBox postsContainer;
    @FXML private VBox createPostForm;
    @FXML private TextArea postContent;
    @FXML private ImageView userProfilePic;
    @FXML private ImageView selectedImage;
    @FXML private Label userName;
    @FXML private TextField searchField;

    @FXML private File selectedImageFile;
    @FXML private PostDAO postDAO;
    @FXML private Connection connection;

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        try {
            connection = AivenMySQLManager.getConnection();
            postDAO = new PostDAO(connection);
            loadUserProfile();
            loadAllPosts();



        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void loadUserProfile() {
        try {
            URL imageUrl = getClass().getResource("/com/example/projetjavafx/social/img/user.png");
            if (imageUrl != null) {
                userProfilePic.setImage(new Image(imageUrl.toString()));
            }
            userName.setText("Current User"); // Replace with actual user data
        } catch (Exception e) {
            System.err.println("Error loading user profile: " + e.getMessage());
        }
    }

    @FXML
    private void openPostCreationModal() {
        createPostForm.setVisible(true);
        createPostForm.setManaged(true);
    }

    @FXML
    private void addImage() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Select Image");
        fileChooser.getExtensionFilters().add(
                new FileChooser.ExtensionFilter("Image Files", "*.png", "*.jpg", "*.jpeg", "*.gif")
        );

        File file = fileChooser.showOpenDialog(null);
        if (file != null) {
            selectedImageFile = file;
            selectedImage.setImage(new Image(file.toURI().toString()));
            selectedImage.setVisible(true);
            selectedImage.setManaged(true);
        }
    }

    @FXML
    private void cancelPost() {
        clearPostForm();
    }

    @FXML
    private void publishPost() {
        String content = postContent.getText();
        String imagePath = null;
        if (selectedImageFile != null) {
            String uniqueFileName = System.currentTimeMillis() + "_" + selectedImageFile.getName();
            String targetDir = "images/";
            File targetFile = new File(targetDir + uniqueFileName);

            try {
                new File(targetDir).mkdirs();
                Files.copy(selectedImageFile.toPath(), targetFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                imagePath = targetFile.getAbsolutePath();
            } catch (IOException e) {
                showAlert("Error", "Failed to save image: " + e.getMessage());
                return;
            }
        }
    }

    private void clearPostForm() {
        postContent.clear();
        selectedImage.setImage(null);
        selectedImage.setVisible(false);
        selectedImage.setManaged(false);
        selectedImageFile = null;
        createPostForm.setVisible(false);
        createPostForm.setManaged(false);
    }

    public void addPostToFeed(Post post) {
        try {
            // Save to database first
            postDAO.savePost(post);

            // Then add to UI
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/social/PostItem.fxml"));
            Node postNode = loader.load();

            PostItemController controller = loader.getController();
            controller.setData(post);

            // Add to the beginning of the feed
            postsContainer.getChildren().add(0, postNode);

        } catch (Exception e) {
            System.err.println("Error adding post to feed: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void loadPosts() {
        try {
            postsContainer.getChildren().clear();
            List<Post> posts = postDAO.getAllPosts();
            for (Post post : posts) {
                addPostToFeed(post);
            }
        } catch (SQLException e) {
            System.err.println("Error loading posts: " + e.getMessage());
        }
    }

   /* private void searchPosts(String searchText) throws SQLException {
        if (searchText == null || searchText.trim().isEmpty()) {
            loadPosts();
            return;
        }

        postsContainer.getChildren().clear();
        List<Post> searchResults = postDAO.searchPosts(searchText);
        for (Post post : searchResults) {
            addPostToFeed(post);
        }
    }*/

    @FXML
    private void refreshFeed() {
        loadPosts();
    }

    public void deletePost(int postId) {
        postDAO.deletePost(postId);
        loadPosts(); // Refresh the feed after deletion
    }

    public void updatePost(Post post) {
        try {
            postDAO.updatePost(post);
            loadPosts(); // Refresh the feed after update
        } catch (SQLException e) {
            System.err.println("Error updating post: " + e.getMessage());
        }
    }

    public void handleInteraction(Post post, String interactionType) {
        try {
            // Update the interaction in the database (like, comment, or share)
            switch (interactionType) {
                case "LIKE":
                   // postDAO.addLike(post.getPostId(), getCurrentUserId());
                    break;
                case "COMMENT":
                    // Handle comment
                    break;
                case "SHARE":
                    // Handle share
                    break;
            }

            // Update popularity score
            postDAO.updatePopularityScore(post.getPostId());

            // Refresh the feed to show updated order
            loadAllPosts();
        } catch (SQLException e) {
            e.printStackTrace();
            showAlert("Error", "Failed to update post interaction: " + e.getMessage());
        }
    }

    private void loadAllPosts() {
        try {
            postsContainer.getChildren().clear();
            List<Post> posts = postDAO.getAllPosts();

            for (Post post : posts) {
                FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/social/PostItem.fxml"));
                Node postNode = loader.load();
                PostItemController controller = loader.getController();
                controller.setData(post);
                postsContainer.getChildren().add(postNode);
            }
        } catch (Exception e) {
            e.printStackTrace();
            showAlert("Error", "Failed to load posts: " + e.getMessage());
        }
    }
   /* private void loadAllPosts() {
        try {
            // Clear existing posts
            postsContainer.getChildren().clear();

            // Get all posts from database
            List<Post> posts = postDAO.getAllPosts();

            // Add each post to the feed
            for (Post post : posts) {
                FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/social/PostItem.fxml"));
                Node postNode = loader.load();

                PostItemController controller = loader.getController();
                controller.setData(post);

                postsContainer.getChildren().add(postNode);
            }
        } catch (Exception e) {
            System.err.println("Error loading posts: " + e.getMessage());
            e.printStackTrace();
        }
    }*/

    @FXML
    private void searchPosts(String searchText) {
        try {
            List<Post> searchResults = postDAO.searchPosts(searchText);
            postsContainer.getChildren().clear();

            for (Post post : searchResults) {
                FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/projetjavafx/social/PostItem.fxml"));
                Node postNode = loader.load();
                PostItemController controller = loader.getController();
                controller.setData(post);
                postsContainer.getChildren().add(postNode);
            }
        } catch (SQLException | IOException e) {
            e.printStackTrace();
            showAlert("Error", "Failed to search posts: " + e.getMessage());
        }
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}

================
File: main/java/module-info.java
================
module com.example.projetjavafx {
    requires javafx.controls;
    requires javafx.fxml;
    requires javafx.web;

    requires org.controlsfx.controls;
    requires com.dlsc.formsfx;
    requires net.synedra.validatorfx;
    requires org.kordamp.ikonli.javafx;
    requires org.kordamp.bootstrapfx.core;
    requires eu.hansolo.tilesfx;
    requires com.almasb.fxgl.all;
    requires java.sql;
    requires mysql.connector.j;
    requires java.desktop;

    // Root package
    exports com.example.projetjavafx.root;
    opens com.example.projetjavafx.root to javafx.fxml;
    opens com.example.projetjavafx.root.jobFeed to javafx.fxml;



    // Controller package accesses
    opens com.example.projetjavafx.root.auth to javafx.fxml;
    opens com.example.projetjavafx.root.events to javafx.fxml;
    opens com.example.projetjavafx.root.explore to javafx.fxml;
    opens com.example.projetjavafx.root.organizer to javafx.fxml;
    opens com.example.projetjavafx.root.group to javafx.fxml;
    opens com.example.projetjavafx.root.profile to javafx.fxml;
    opens com.example.projetjavafx.root.social to javafx.fxml;
    // CSS directories
    opens com.example.projetjavafx.auth.css to javafx.fxml;
//    opens com.example.projetjavafx.events.css to javafx.fxml;
    opens com.example.projetjavafx.explore.css to javafx.fxml;
    opens com.example.projetjavafx.group.css to javafx.fxml;
    opens com.example.projetjavafx.organizer.css to javafx.fxml;
    opens com.example.projetjavafx.profile.css to javafx.fxml;
    opens com.example.projetjavafx.root.css to javafx.fxml;
    opens com.example.projetjavafx.social.css to javafx.fxml;

    // Explicit exports for public controller classes
    exports com.example.projetjavafx.root.auth;
    exports com.example.projetjavafx.root.events;
    exports com.example.projetjavafx.root.explore;
    exports com.example.projetjavafx.root.organizer;
    exports com.example.projetjavafx.root.group;
    exports com.example.projetjavafx.root.profile;
    exports com.example.projetjavafx.root.social;
    // Add to exports section
    exports com.example.projetjavafx.root.jobFeed;
    exports com.example.projetjavafx.root.jobApplications;
    opens com.example.projetjavafx.root.jobApplications to javafx.fxml;


}

================
File: main/resources/com/example/projetjavafx/auth/categories-view.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.CheckBox?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.text.Font?>

<AnchorPane prefHeight="885.0" prefWidth="1100.0" xmlns="http://javafx.com/javafx/23.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.projetjavafx.root.auth.CategorieController">
   <children>
      <CheckBox fx:id="music" layoutX="233.0" layoutY="168.0" mnemonicParsing="false" prefHeight="100.0" prefWidth="155.0" text="Music">
         <font>
            <Font size="24.0" />
         </font>
      </CheckBox>
      <CheckBox fx:id="sport" layoutX="233.0" layoutY="281.0" mnemonicParsing="false" prefHeight="100.0" prefWidth="155.0" text="Sport">
         <font>
            <Font size="24.0" />
         </font>
      </CheckBox>
      <CheckBox fx:id="gaming" layoutX="233.0" layoutY="406.0" mnemonicParsing="false" prefHeight="100.0" prefWidth="155.0" text="Gaming">
         <font>
            <Font size="24.0" />
         </font>
      </CheckBox>
      <CheckBox fx:id="education" layoutX="730.0" layoutY="393.0" mnemonicParsing="false" prefHeight="100.0" prefWidth="155.0" text="Éducation ">
         <font>
            <Font size="24.0" />
         </font>
      </CheckBox>
      <CheckBox fx:id="culturel" layoutX="730.0" layoutY="268.0" mnemonicParsing="false" prefHeight="100.0" prefWidth="155.0" text="Culturel">
         <font>
            <Font size="24.0" />
         </font>
      </CheckBox>
      <CheckBox fx:id="social" layoutX="730.0" layoutY="163.0" mnemonicParsing="false" prefHeight="100.0" prefWidth="155.0" text="Social">
         <font>
            <Font size="24.0" />
         </font>
      </CheckBox>
      <CheckBox fx:id="technologique" layoutX="240.0" layoutY="521.0" mnemonicParsing="false" prefHeight="100.0" prefWidth="200.0" text="Technologique">
         <font>
            <Font size="24.0" />
         </font>
      </CheckBox>
<!--      <ImageView fitHeight="75.0" fitWidth="75.0" layoutX="149.0" layoutY="294.0" pickOnBounds="true" preserveRatio="true">-->
<!--         <image>-->
<!--            <Image url="@../../../../../../../../../Downloads/des-sports%20(1).png" />-->
<!--         </image>-->
<!--      </ImageView>-->
      <ImageView fitHeight="75.0" fitWidth="75.0" layoutX="149.0" layoutY="181.0" pickOnBounds="true" preserveRatio="true">
         <image>
            <Image url="@../photos/music.png" />
         </image>
      </ImageView>
      <ImageView fitHeight="75.0" fitWidth="75.0" layoutX="640.0" layoutY="181.0" pickOnBounds="true" preserveRatio="true">
         <image>
            <Image url="@../photos/social.png" />
         </image>
      </ImageView>
      <ImageView fitHeight="75.0" fitWidth="75.0" layoutX="149.0" layoutY="419.0" pickOnBounds="true" preserveRatio="true">
         <image>
            <Image url="@../photos/gaming.png" />
         </image>
      </ImageView>
      <ImageView fitHeight="75.0" fitWidth="75.0" layoutX="640.0" layoutY="281.0" pickOnBounds="true" preserveRatio="true">
         <image>
            <Image url="@../photos/culturel.png" />
         </image>
      </ImageView>
      <ImageView fitHeight="75.0" fitWidth="75.0" layoutX="640.0" layoutY="406.0" pickOnBounds="true" preserveRatio="true">
         <image>
            <Image url="@../photos/education.png" />
         </image>
      </ImageView>
<!--      <ImageView fitHeight="100.0" fitWidth="116.0" layoutX="143.0" layoutY="526.0" pickOnBounds="true" preserveRatio="true">-->
<!--         <image>-->
<!--            <Image url="@../../../../../../../../../Pictures/Screenshots/Capture%20d'écran%202025-02-16%20173450.png" />-->
<!--         </image>-->
<!--      </ImageView>-->
      <Label layoutX="333.0" layoutY="40.0" prefHeight="93.0" prefWidth="359.0" text="Cathegories">
         <font>
            <Font size="64.0" />
         </font>
      </Label>
       <Button fx:id="valide" layoutX="224.0" layoutY="704.0" mnemonicParsing="false" onAction="#onValideClick" prefHeight="30.0" prefWidth="667.0" style="-fx-background-color: #d34e68;" text="Valider" />
      <ImageView fitHeight="75.0" fitWidth="75.0" layoutX="149.0" layoutY="294.0" pickOnBounds="true" preserveRatio="true">
         <image>
            <Image url="@../photos/sport.png" />
         </image>
      </ImageView>
      <ImageView fitHeight="75.0" fitWidth="75.0" layoutX="149.0" layoutY="534.0" pickOnBounds="true" preserveRatio="true">
         <image>
            <Image url="@../photos/technoligique.png" />
         </image>
      </ImageView>

   </children>
</AnchorPane>

================
File: main/resources/com/example/projetjavafx/auth/login-view.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Hyperlink?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>

<AnchorPane prefHeight="1050" prefWidth="1920" stylesheets="@css/login.css" xmlns="http://javafx.com/javafx/23.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.projetjavafx.root.auth.LoginController">
    <children>
        <AnchorPane layoutX="132.0" prefHeight="885.0" prefWidth="929.0">
            <children>
                <TextField fx:id="username" layoutX="197.0" layoutY="306.0" prefHeight="35.0" prefWidth="500.0" promptText="Email" />
                <TextField fx:id="password" layoutX="197.0" layoutY="367.0" prefHeight="35.0" prefWidth="500.0" promptText="Password" />
                <Button fx:id="login" onAction="#handleLogin" layoutX="187.0" layoutY="478.0" mnemonicParsing="false" prefHeight="35.0"
                        prefWidth="500.0" style="-fx-background-color: #d34e68;" text="Login" />
                <ImageView fitHeight="270.0" fitWidth="306.0" layoutX="298.0" layoutY="28.0" pickOnBounds="true" preserveRatio="true">
                    <image>
                        <Image url="@../../../../photos/login.png" />
                    </image>
                </ImageView>
                <Button fx:id="signup" layoutX="187.0" layoutY="538.0" mnemonicParsing="false" onAction="#onLoginClick" prefHeight="35.0" prefWidth="500.0" style="-fx-background-color: #d34e68;" text="Sign Up" />
                <Hyperlink layoutX="570.0" layoutY="408.0" onAction="#goToForgotPasswordPage" prefHeight="23.0" prefWidth="156.0" text="Forgot Password ?" />
            </children>
        </AnchorPane>
    </children>
</AnchorPane>

================
File: main/resources/com/example/projetjavafx/auth/password-view.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>

<AnchorPane prefHeight="885.0" prefWidth="1100.0" xmlns="http://javafx.com/javafx/23.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.projetjavafx.root.auth.PasswordController">
   <children>
      <Button fx:id="buttonconfirmpass" layoutX="300.0" layoutY="474.0" mnemonicParsing="false" prefHeight="35.0" prefWidth="500.0" style="-fx-background-color: #d34e68;" text="Confirm" />
      <TextField fx:id="newpassword" layoutX="300.0" layoutY="313.0" prefHeight="35.0" prefWidth="500.0" promptText="New Password" />
      <TextField fx:id="comfirmpassword" layoutX="300.0" layoutY="377.0" prefHeight="35.0" prefWidth="500.0" promptText="Confirm Password" />
      <ImageView fitHeight="281.0" fitWidth="318.0" layoutX="386.0" layoutY="14.0" pickOnBounds="true" preserveRatio="true">
         <image>
<!--            <Image url="@../photos/password.png" />-->
         </image>
      </ImageView>
   </children>
</AnchorPane>

================
File: main/resources/com/example/projetjavafx/auth/register-view.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Accordion?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.RadioButton?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.text.Font?>

<AnchorPane prefHeight="1050" prefWidth="1920" stylesheets="@css/register.css" xmlns="http://javafx.com/javafx/23.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.projetjavafx.root.auth.AuthController">
    <children>
        <Accordion layoutX="184.0" layoutY="211.0" />

        <ImageView fx:id="imageView" fitHeight="278.0" fitWidth="291.0" layoutX="408.0" layoutY="22.0" pickOnBounds="true" preserveRatio="true">
            <image>
                 <Image url="@../../../../photos/register.png" />
            </image></ImageView>

        <TextField fx:id="username" layoutX="308.0" layoutY="310.0" prefHeight="35.0" prefWidth="500.0" promptText="User Name" />
        <TextField fx:id="email" layoutX="308.0" layoutY="443.0" prefHeight="35.0" prefWidth="500.0" promptText="Email" />
        <TextField fx:id="password" layoutX="308.0" layoutY="508.0" prefHeight="35.0" prefWidth="500.0" promptText="Password" />

        <Button fx:id="register" layoutX="308.0" layoutY="678.0" mnemonicParsing="false" onAction="#onSignupClick" prefHeight="35.0" prefWidth="500.0" style="-fx-background-color: #d34e68;" text="Sign Up" />

        <Button fx:id="login" layoutX="308.0" layoutY="744.0" mnemonicParsing="false" onAction="#onLoginClick" prefHeight="35.0" prefWidth="500.0" style="-fx-background-color: #d34e68;" text="Login" />
        <TextField fx:id="age" layoutX="308.0" layoutY="373.0" prefHeight="35.0" prefWidth="500.0" promptText="Age" />
        <RadioButton fx:id="male" layoutX="458.0" layoutY="582.0" mnemonicParsing="false" prefHeight="35.0" prefWidth="100.0" text="Male">
            <font>
                <Font size="18.0" />
            </font>
        </RadioButton>
        <RadioButton fx:id="female" layoutX="564.0" layoutY="582.0" mnemonicParsing="false" prefHeight="35.0" prefWidth="100.0" text="Female">
            <font>
                <Font size="18.0" />
            </font>
        </RadioButton>
        <Label layoutX="308.0" layoutY="586.0" text="Gender">
            <font>
                <Font size="18.0" />
            </font>
        </Label>
    </children>
</AnchorPane>

================
File: main/resources/com/example/projetjavafx/auth/username-view.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>

<AnchorPane prefHeight="874.0" prefWidth="1222.0" xmlns="http://javafx.com/javafx/23.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.projetjavafx.root.auth.UsernameController">
   <children>
       <TextField fx:id="usernameField" layoutX="337.0" layoutY="363.0" prefHeight="35.0" prefWidth="500.0" promptText="Email" />
       <Button fx:id="checkButton" layoutX="337.0" layoutY="420.0" onAction="#loadPasswordPage" prefHeight="35.0" prefWidth="500.0" style="-fx-background-color: #d34e68;" text="Check" />
      <ImageView fitHeight="281.0" fitWidth="379.0" layoutX="447.0" layoutY="29.0" pickOnBounds="true" preserveRatio="true">
         <image>
            <Image url="@../photos/username.png" />
         </image></ImageView>

   </children>
</AnchorPane>

================
File: main/resources/com/example/projetjavafx/events/create-events.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.ComboBox?>
<?import javafx.scene.control.DatePicker?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.ScrollPane?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.VBox?>

<BorderPane prefHeight="1050" prefWidth="1920" stylesheets="@css/create-events.css" xmlns="http://javafx.com/javafx/23.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.projetjavafx.root.events.CreateEventController">

    <!-- Left Sidebar (Navigation Bar) -->
    <left>
        <VBox fx:id="sidebar" prefHeight="1050.0" prefWidth="250.0">
            <!-- Navigation Buttons -->
            <VBox>
                <Label prefHeight="76.0" prefWidth="237.0" styleClass="title-label" text="Add Event" />
                <Button fx:id="homeButton" onAction="#goToHomePage" prefHeight="38.0" prefWidth="241.0" text="Home" />
                <Button fx:id="analyticsButton" onAction="#goToAnalyticsPage" prefHeight="38.0" prefWidth="242.0" text="Analytics" />

            </VBox>

        </VBox>
    </left>

    <!-- Center Content -->
    <center>
        <ScrollPane fitToHeight="true" fitToWidth="true">
            <VBox spacing="20" style="-fx-padding: 20;">
                <Label styleClass="form-title" text="Create New Event" />

                <!-- Form Container -->
                <VBox spacing="15" style="-fx-padding: 0 20;">
                    <Label text="Event Name" />
                    <TextField fx:id="nameField" maxWidth="Infinity" promptText="Please enter the name of your event" />

                    <Label text="Description" />
                    <TextArea fx:id="descriptionField" maxWidth="Infinity" prefRowCount="4" promptText="Describe your event" />

                    <!-- Date Container -->
                    <HBox spacing="20">
                        <VBox spacing="5" HBox.hgrow="ALWAYS">
                            <Label text="Start day" />
                            <DatePicker fx:id="startDatePicker" maxWidth="Infinity" promptText="Start Date" />
                        </VBox>
                        <VBox spacing="5" HBox.hgrow="ALWAYS">
                            <Label text="End day" />
                            <DatePicker fx:id="endDatePicker" maxWidth="Infinity" promptText="End Date" />
                        </VBox>
                    </HBox>

                    <Label text="Location" />
                    <TextField fx:id="locationField" maxWidth="Infinity" promptText="Location" />
                    <Label text="Category" />
                    <ComboBox fx:id="categoryComboBox" maxWidth="Infinity" promptText="Category" />

                    <!-- Image Section -->
                    <VBox spacing="10">
                        <Button maxWidth="Infinity" onAction="#onUploadImageClick" styleClass="upload-button" text="Upload Image" />
                        <ImageView fx:id="imagePreview" fitWidth="300" preserveRatio="true" style="-fx-max-width: 300; -fx-max-height: 300;" />
                    </VBox>

                    <!-- Buttons -->
                    <HBox alignment="CENTER_RIGHT" spacing="20">
                        <Button onAction="#onCancelClick" styleClass="cancel-button" text="Cancel" />
                        <Button onAction="#onSaveEventClick" styleClass="save-button" text="Save Event" />
                    </HBox>
                </VBox>
            </VBox>
        </ScrollPane>
    </center>
</BorderPane>

================
File: main/resources/com/example/projetjavafx/events/css/create-events.css
================
/* Base styles using the custom palette */
.root {
    -fx-background-color: #cabfbe; /* silver-rust */
    -fx-font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

/* Form title */
.form-title {
    -fx-font-size: 24px;
    -fx-font-weight: bold;
    -fx-text-fill: #1c2b5d; /* biscay */
    -fx-padding: 10 0 20 0;
}

/* Labels */
.label {
    -fx-font-size: 14px;
    -fx-text-fill: #1e1c27; /* steel-gray */
    -fx-font-weight: bold;
}

/* Text fields and text areas */
.text-field, .text-area {
    -fx-background-color: white;
    -fx-border-color: #6a6a5a; /* kokoda */
    -fx-border-radius: 4px;
    -fx-padding: 8px;
    -fx-font-size: 14px;
}

.text-field:focused, .text-area:focused {
    -fx-border-color: #8989ba; /* wild-blue yonder */
    -fx-background-color: white;
    -fx-effect: dropshadow(three-pass-box, rgba(137, 137, 186, 0.3), 5, 0, 0, 0);
}

/* ComboBox styling */
.combo-box {
    -fx-background-color: white;
    -fx-border-color: #6a6a5a; /* kokoda */
    -fx-border-radius: 4px;
    -fx-font-size: 14px;
    -fx-padding: 4px;
}

.combo-box:focused {
    -fx-border-color: #8989ba; /* wild-blue yonder */
}

.combo-box .list-cell {
    -fx-padding: 4px 8px 4px 8px;
}

/* DatePicker styling */
.date-picker {
    -fx-border-color: #6a6a5a; /* kokoda */
    -fx-border-radius: 4px;
    -fx-background-color: white;
}

.date-picker:focused {
    -fx-border-color: #8989ba; /* wild-blue yonder */
}

.date-picker .arrow-button {
    -fx-background-color: #3d5472; /* east-bay */
    -fx-background-radius: 0 4 4 0;
}

.date-picker .arrow-button .arrow {
    -fx-background-color: white;
}

/* Button base styling */
.button {
    -fx-background-color: #3d5472; /* east-bay */
    -fx-text-fill: white;
    -fx-font-size: 14px;
    -fx-font-weight: bold;
    -fx-padding: 10 20;
    -fx-border-radius: 4px;
    -fx-background-radius: 4px;
    -fx-cursor: hand;
    -fx-transition: all 0.3s ease;
}

/* Save button specific styling */
.save-button {
    -fx-background-color: #1c2b5d; /* biscay */
}

.save-button:hover {
    -fx-background-color: #1e298f; /* jacksons-purple */
    -fx-scale-x: 1.05;
    -fx-scale-y: 1.05;
    -fx-effect: dropshadow(three-pass-box, rgba(30, 41, 143, 0.5), 10, 0, 0, 0);
}

.save-button:pressed {
    -fx-scale-x: 0.95;
    -fx-scale-y: 0.95;
}

/* Cancel button specific styling */
.cancel-button {
    -fx-background-color: #d54d67; /* cabaret */
}

.cancel-button:hover {
    -fx-background-color: #b53c55; /* darker cabaret */
    -fx-scale-x: 1.05;
    -fx-scale-y: 1.05;
    -fx-effect: dropshadow(three-pass-box, rgba(213, 77, 103, 0.5), 10, 0, 0, 0);
}

.cancel-button:pressed {
    -fx-scale-x: 0.95;
    -fx-scale-y: 0.95;
}

/* Upload button specific styling */
.upload-button {
    -fx-background-color: #8989ba; /* wild-blue yonder */
}

.upload-button:hover {
    -fx-background-color: #6f6fa8; /* darker wild-blue yonder */
    -fx-scale-x: 1.05;
    -fx-scale-y: 1.05;
    -fx-effect: dropshadow(three-pass-box, rgba(137, 137, 186, 0.5), 10, 0, 0, 0);
}

.upload-button:pressed {
    -fx-scale-x: 0.95;
    -fx-scale-y: 0.95;
}

/* ImageView styling */
#imagePreview {
    -fx-border-color: #6a6a5a; /* kokoda */
    -fx-border-radius: 4px;
    -fx-background-color: #88a0af; /* bali-hai */
}

/* VBox styling */
.vbox {
    -fx-spacing: 10;
    -fx-padding: 20;
}

/* Hover effects for text fields */
.text-field:hover, .text-area:hover, .combo-box:hover, .date-picker:hover {
    -fx-effect: dropshadow(three-pass-box, rgba(103, 85, 82, 0.5), 5, 0, 0, 0); /* dorado */
    -fx-border-color: #675552; /* dorado */
}
/* ============================== */
/*       Styles de la Barre de Navigation */
/* ============================== */
#sidebar {
    -fx-background-color: #1c2b5d; /* biscay - deep navy */
    -fx-padding: 20px;
    -fx-spacing: 15px;
    -fx-border-color: #8989ba; /* wild-blue yonder accent */
    -fx-border-width: 0 1px 0 0;
}

/* Titre de la barre de navigation */
#sidebar .title-label {
    -fx-text-fill: white;
    -fx-font-size: 24px;
    -fx-font-weight: 600;
    -fx-padding: 0 0 15px 0;
    -fx-border-width: 0 0 1px 0;
    -fx-border-color: #8989ba; /* wild-blue yonder */
}

/* Boutons de navigation */
#sidebar .button {
    -fx-background-color: transparent; /* Fond transparent par défaut */
    -fx-text-fill: white; /* Texte blanc */
    -fx-font-size: 14px;
    -fx-padding: 10px 20px;
    -fx-background-radius: 4px;
    -fx-border-width: 0 0 0 3px; /* Bordure à gauche */
    -fx-border-color: transparent; /* Bordure transparente par défaut */
    -fx-cursor: hand;
    -fx-transition: all 0.2s; /* Transition fluide */
}

/* Effet de survol pour les boutons de la navbar */
#sidebar .button:hover {
    -fx-background-color: #1e298f30; /* Fond semi-transparent au survol */
    -fx-border-color: #8989ba; /* Bordure colorée au survol */
}

================
File: main/resources/com/example/projetjavafx/events/css/event-details.css
================
/* --- Style général de la popup --- */
.popup-card {
    -fx-padding: 20px;
    -fx-background-color: white;
    -fx-border-radius: 12px;
    -fx-background-radius: 12px;
    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 15, 0, 0, 8);
    -fx-alignment: center;
    -fx-spacing: 15;
}

/* --- Image de l'événement --- */
.popup-image {
    -fx-border-radius: 12px;
}

/* --- Titre de l'événement --- */
.popup-title {
    -fx-font-size: 22px;
    -fx-font-weight: bold;
    -fx-text-fill: #1c2b5d;
}

/* --- Texte de description et des détails --- */
.popup-text {
    -fx-font-size: 14px;
    -fx-text-fill: #6a6a5a;
    -fx-text-alignment: center;
}

/* --- Bouton de fermeture --- */
.popup-button {
    -fx-background-color: #d54d67;
    -fx-text-fill: white;
    -fx-font-size: 14px;
    -fx-padding: 10px 15px;
    -fx-border-radius: 8px;
    -fx-background-radius: 8px;
    -fx-cursor: hand;
    -fx-transition: 0.3s;
}

.popup-button:hover {
    -fx-background-color: #b03c54;
}

================
File: main/resources/com/example/projetjavafx/events/css/events.css
================
/* ============================== */
/*       Styles Généraux          */
/* ============================== */
.root {
    -fx-background-color: #f5f5f5;
    -fx-font-family: "Arial", sans-serif;
}

/* ============================== */
/*       Styles pour Tous les Boutons */
/* ============================== */
.button {
    -fx-background-color: transparent; /* Fond transparent par défaut */
    -fx-text-fill: white; /* Couleur du texte */
    -fx-font-size: 14px;
    -fx-padding: 8px 12px;
    -fx-border-radius: 8px;
    -fx-background-radius: 8px;
    -fx-cursor: hand;
    -fx-transition: 0.3s;
}

/* ============================== */
/*       Titre et Barre de Recherche */
/* ============================== */
.title-label {
    -fx-font-size: 24px;
    -fx-font-weight: bold;
    -fx-text-fill: #333;
}

#searchField {
    -fx-pref-height: 35px;
    -fx-pref-width: 300px;
    -fx-padding: 5px;
    -fx-border-color: #ccc;
    -fx-border-radius: 5px;
    -fx-background-radius: 5px;
}

#searchField:focused {
    -fx-border-color: #0078D7;
}

/* ============================== */
/*       Bouton "New Event"       */
/* ============================== */
.new-event-button {
    -fx-background-color:  #1c2b5d;
    -fx-text-fill: white;
    -fx-font-size: 14px;
    -fx-padding: 8px 12px;
    -fx-border-radius: 8px;
    -fx-background-radius: 8px;
    -fx-cursor: hand;
    -fx-transition: 0.3s;
}

.new-event-button:hover {
    -fx-background-color: #1e298f30;
}

/* ============================== */
/*      Conteneur des Événements  */
/* ============================== */
#eventsContainer {
    -fx-padding: 20px;
}

/* ============================== */
/*      Cartes des Événements     */
/* ============================== */
.event-card {
    -fx-pref-width: 300px;
    -fx-pref-height: 200px;
    -fx-padding: 15px;
    -fx-border-radius: 10px;
    -fx-background-radius: 10px;
    -fx-background-color: white;
    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.2), 10, 0, 0, 5);
    -fx-alignment: center;
    -fx-transition: 0.3s;
}

.event-card:hover {
    -fx-scale-x: 1.05;
    -fx-scale-y: 1.05;
    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 15, 0, 0, 8);
}

/* ============================== */
/*       Image de l'Événement     */
/* ============================== */
.event-image {
    -fx-border-radius: 10px;
}

/* ============================== */
/*      Description de l'Événement */
/* ============================== */
.event-description {
    -fx-font-size: 14px;
    -fx-text-alignment: center;
    -fx-text-fill: #6a6a5a;
}

/* ============================== */
/*      Boutons des Événements    */
/* ============================== */
.event-buttons {
    -fx-spacing: 10;
    -fx-alignment: center;
}

/* --- Bouton "View Details" --- */
.event-button {
    -fx-background-color: #d54d67;
    -fx-text-fill: white;
    -fx-font-size: 14px;
    -fx-padding: 8px 12px;
    -fx-border-radius: 8px;
    -fx-background-radius: 8px;
    -fx-cursor: hand;
    -fx-transition: 0.3s;
}

.event-button:hover {
    -fx-background-color: #b03c54;
}

/* --- Bouton "Participer" --- */
.event-button-secondary {
    -fx-background-color: #1c2b5d;
    -fx-text-fill: white;
    -fx-font-size: 14px;
    -fx-padding: 8px 12px;
    -fx-border-radius: 8px;
    -fx-background-radius: 8px;
    -fx-cursor: hand;
    -fx-transition: 0.3s;
}

.event-button-secondary:hover {
    -fx-background-color: #3d5472;
}

/* ============================== */
/*       Styles de la Barre de Navigation */
/* ============================== */
#sidebar {
    -fx-background-color: #1c2b5d; /* biscay - deep navy */
    -fx-padding: 20px;
    -fx-spacing: 15px;
    -fx-border-color: #8989ba; /* wild-blue yonder accent */
    -fx-border-width: 0 1px 0 0;
}

/* Titre de la barre de navigation */
#sidebar .title-label {
    -fx-text-fill: white;
    -fx-font-size: 24px;
    -fx-font-weight: 600;
    -fx-padding: 0 0 15px 0;
    -fx-border-width: 0 0 1px 0;
    -fx-border-color: #8989ba; /* wild-blue yonder */
}

/* Styles par défaut pour les boutons de la navbar */
#sidebar #homeButton,
#sidebar #analyticsButton,
#sidebar #createJobButton,
#sidebar #jobFeedButton {
    -fx-background-color: transparent; /* Fond transparent par défaut */
    -fx-text-fill: white; /* Texte blanc */
    -fx-font-size: 14px;
    -fx-padding: 10px 20px;
    -fx-background-radius: 4px;
    -fx-border-width: 0 0 0 3px; /* Bordure à gauche */
    -fx-border-color: transparent; /* Bordure transparente par défaut */
    -fx-cursor: hand;
    -fx-transition: all 0.2s; /* Transition fluide */
}

/* Effet de survol pour les boutons de la navbar */
#sidebar #homeButton:hover,
#sidebar #analyticsButton:hover,
#sidebar #createJobButton:hover,
#sidebar #jobFeedButton:hover {
    -fx-background-color: #1e298f30; /* Fond semi-transparent au survol */
    -fx-border-color: #8989ba; /* Bordure colorée au survol */
}
/* ... other styles */

.alert {
    -fx-background-color: #ffffff; /* Example background color */
    -fx-border-color: #cccccc; /* Example border color */
    -fx-border-width: 1;
    -fx-padding: 20;
   //
}

.alert .content.label {
    -fx-font-size: 14; /* Example font size */
}

.alert .button-bar {
    -fx-alignment: CENTER; /* Center buttons */
}

.alert .button {
    -fx-background-color: #007bff; /* Example button color */
    -fx-text-fill: white;
    -fx-padding: 8 16;
    -fx-background-radius: 5;
}

================
File: main/resources/com/example/projetjavafx/events/event-details.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Text?>



<VBox alignment="CENTER" spacing="15" xmlns="http://javafx.com/javafx/8.0.111" xmlns:fx="http://javafx.com/fxml/1"
      fx:controller="com.example.projetjavafx.root.events.EventDetailsController"
      stylesheets="@css/event-details.css"
      styleClass="popup-card">


    <ImageView fx:id="eventImage" fitWidth="300" preserveRatio="true" styleClass="popup-image"/>
    <Label fx:id="eventName" styleClass="popup-title"/>
    <Text fx:id="eventDescription" styleClass="popup-text"/>
    <Text fx:id="eventDate" styleClass="popup-text"/>
    <Text fx:id="eventLocation" styleClass="popup-text"/>

    <Button text="Close" onAction="#closeWindow" styleClass="popup-button"/>
</VBox>

================
File: main/resources/com/example/projetjavafx/events/events-view.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.ComboBox?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.ScrollPane?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.FlowPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.VBox?>

<BorderPane prefHeight="1050" prefWidth="1920" stylesheets="@css/events.css"
            xmlns="http://javafx.com/javafx/23.0.1"
            xmlns:fx="http://javafx.com/fxml/1"
            fx:controller="com.example.projetjavafx.root.events.EventsController">

    <!-- Left Sidebar (Navigation Bar) -->
    <left>
        <VBox fx:id="sidebar" prefHeight="1050.0" prefWidth="250.0">
            <!-- Navigation Buttons -->
            <VBox>
                <Label prefHeight="76.0" prefWidth="237.0" styleClass="title-label" text="Featured Events" />
                <Button fx:id="homeButton" onAction="#handleHomeButton" prefHeight="38.0" prefWidth="241.0" text="Home" />
                <Button fx:id="analyticsButton" onAction="#onAnalyticsClick" prefHeight="38.0" prefWidth="242.0" text="Analytics" />
                <Button fx:id="createJobButton" onAction="#onCreateJobClick" prefHeight="38.0" prefWidth="247.0" text="Create Job Post" />
                <Button fx:id="jobFeedButton" onAction="#onJobFeedButtonClick" prefHeight="38.0" prefWidth="250.0" text="Job Feed" />
            </VBox>
        </VBox>
    </left>

    <!-- Center Content -->
    <center>
        <AnchorPane minHeight="600.0" minWidth="800.0" prefHeight="1050" prefWidth="1920">
            <VBox spacing="20" AnchorPane.bottomAnchor="20.0" AnchorPane.leftAnchor="20.0" AnchorPane.rightAnchor="20.0" AnchorPane.topAnchor="20.0">
                <HBox alignment="CENTER_LEFT" spacing="20">
                    <TextField fx:id="searchField" maxWidth="300" promptText="Rechercher par nom ou description" />
                    <ComboBox fx:id="categoryFilter" onAction="#onCategorySelected" promptText="Filtrer par catégorie" />
                    <Button onAction="#onNewEventClick" styleClass="new-event-button" text="New Event" />
                </HBox>
                <!-- The Spinner has been removed in favor of a loading alert -->
                <!-- Event List -->
                <ScrollPane fitToHeight="true" fitToWidth="true" hbarPolicy="NEVER" vbarPolicy="AS_NEEDED" VBox.vgrow="ALWAYS">
                    <FlowPane fx:id="eventsContainer" alignment="TOP_CENTER" hgap="20" vgap="20" />
                </ScrollPane>
            </VBox>
        </AnchorPane>
    </center>
</BorderPane>

================
File: main/resources/com/example/projetjavafx/explore/explore-view.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.layout.AnchorPane?>


<AnchorPane prefHeight="400.0" prefWidth="600.0" stylesheets="@css/explore.css" xmlns="http://javafx.com/javafx/23.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.projetjavafx.root.explore.ExploreController">

</AnchorPane>

================
File: main/resources/com/example/projetjavafx/group/css/group_profile.css
================
/* ============================== */
/*       General Styles           */
/* ============================== */
.root {
    -fx-background-color: #f5f5f5; /* Light gray background */
    -fx-font-family: "Arial", sans-serif;
}

/* ============================== */
/*       Styles for All Buttons   */
/* ============================== */
.button {
    -fx-background-color: transparent; /* Transparent background by default */
    -fx-text-fill: white; /* White text */
    -fx-font-size: 14px;
    -fx-padding: 8px 12px;
    -fx-border-radius: 8px;
    -fx-background-radius: 8px;
    -fx-cursor: hand;
    -fx-transition: 0.3s;
}

/* ============================== */
/*       Title and Search Bar     */
/* ============================== */
.title-label {
    -fx-font-size: 24px;
    -fx-font-weight: bold;
    -fx-text-fill: #333; /* Dark gray text */
}

#searchField {
    -fx-pref-height: 35px;
    -fx-pref-width: 300px;
    -fx-padding: 5px;
    -fx-border-color: #ccc; /* Light gray border */
    -fx-border-radius: 5px;
    -fx-background-radius: 5px;
}

#searchField:focused {
    -fx-border-color: #0078D7; /* Blue border when focused */
}

/* ============================== */
/*       "New Group" Button       */
/* ============================== */
.new-group-button {
    -fx-background-color: #1c2b5d; /* Deep navy blue */
    -fx-text-fill: white;
    -fx-font-size: 14px;
    -fx-padding: 8px 12px;
    -fx-border-radius: 8px;
    -fx-background-radius: 8px;
    -fx-cursor: hand;
    -fx-transition: 0.3s;
}

.new-group-button:hover {
    -fx-background-color: #1e298f; /* Darker blue on hover */
}

/* ============================== */
/*       Group List Container     */
/* ============================== */
#groupsContainer {
    -fx-padding: 20px;
}

/* ============================== */
/*       Group Cards              */
/* ============================== */
.group-card {
    -fx-pref-width: 300px;
    -fx-pref-height: 200px;
    -fx-padding: 15px;
    -fx-border-radius: 10px;
    -fx-background-radius: 10px;
    -fx-background-color: white; /* White background */
    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.2), 10, 0, 0, 5); /* Shadow effect */
    -fx-alignment: center;
    -fx-transition: 0.3s;
}

.group-card:hover {
    -fx-scale-x: 1.05;
    -fx-scale-y: 1.05;
    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 15, 0, 0, 8); /* Enhanced shadow on hover */
}

/* ============================== */
/*       Group Image              */
/* ============================== */
.group-image {
    -fx-border-radius: 10px;
}

/* ============================== */
/*       Group Description        */
/* ============================== */
.group-description {
    -fx-font-size: 14px;
    -fx-text-alignment: center;
    -fx-text-fill: #6a6a5a; /* Gray text */
}

/* ============================== */
/*       Group Buttons            */
/* ============================== */
.group-buttons {
    -fx-spacing: 10;
    -fx-alignment: center;
}

/* --- "View Details" Button --- */
.group-button {
    -fx-background-color: #d54d67; /* Red */
    -fx-text-fill: white;
    -fx-font-size: 14px;
    -fx-padding: 8px 12px;
    -fx-border-radius: 8px;
    -fx-background-radius: 8px;
    -fx-cursor: hand;
    -fx-transition: 0.3s;
}

.group-button:hover {
    -fx-background-color: #b03c54; /* Darker red on hover */
}

/* --- "Add Member" Button --- */
.group-button-secondary {
    -fx-background-color: #1c2b5d; /* Deep navy blue */
    -fx-text-fill: white;
    -fx-font-size: 14px;
    -fx-padding: 8px 12px;
    -fx-border-radius: 8px;
    -fx-background-radius: 8px;
    -fx-cursor: hand;
    -fx-transition: 0.3s;
}

.group-button-secondary:hover {
    -fx-background-color: #3d5472; /* Darker blue on hover */
}

/* ============================== */
/*       Navigation Bar Styles    */
/* ============================== */
#sidebar {
    -fx-background-color: #1c2b5d; /* Deep navy blue */
    -fx-padding: 20px;
    -fx-spacing: 15px;
    -fx-border-color: #8989ba; /* Light blue accent */
    -fx-border-width: 0 1px 0 0;
}

/* Navigation Bar Title */
#sidebar .title-label {
    -fx-text-fill: white;
    -fx-font-size: 24px;
    -fx-font-weight: 600;
    -fx-padding: 0 0 15px 0;
    -fx-border-width: 0 0 1px 0;
    -fx-border-color: #8989ba; /* Light blue accent */
}

/* Navigation Bar Buttons */
#sidebar #homeButton,
#sidebar #analyticsButton,
#sidebar #createJobButton,
#sidebar #jobFeedButton {
    -fx-background-color: transparent; /* Transparent background */
    -fx-text-fill: white; /* White text */
    -fx-font-size: 14px;
    -fx-padding: 10px 20px;
    -fx-background-radius: 4px;
    -fx-border-width: 0 0 0 3px; /* Left border */
    -fx-border-color: transparent; /* Transparent by default */
    -fx-cursor: hand;
    -fx-transition: all 0.2s; /* Smooth transition */
}

/* Hover Effect for Navigation Bar Buttons */
#sidebar #homeButton:hover,
#sidebar #analyticsButton:hover,
#sidebar #createJobButton:hover,
#sidebar #jobFeedButton:hover {
    -fx-background-color: #1e298f30; /* Semi-transparent background on hover */
    -fx-border-color: #8989ba; /* Light blue accent */
}

/* ============================== */
/*       Alert Dialog Styles      */
/* ============================== */
.alert {
    -fx-background-color: #ffffff; /* White background */
    -fx-border-color: #cccccc; /* Light gray border */
    -fx-border-width: 1;
    -fx-padding: 20;
}

.alert .content.label {
    -fx-font-size: 14px; /* Font size for alert content */
}

.alert .button-bar {
    -fx-alignment: CENTER; /* Center buttons */
}

.alert .button {
    -fx-background-color: #007bff; /* Blue button */
    -fx-text-fill: white;
    -fx-padding: 8px 16px;
    -fx-background-radius: 5px;
}

================
File: main/resources/com/example/projetjavafx/group/css/group-add-member.css
================
/* Base styles for the VBox container */
.root {
    -fx-background-color: #cabfbe; /* silver-rust */
    -fx-font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    -fx-padding: 20px;
}

/* VBox styling */
.vbox {
    -fx-spacing: 10;
    -fx-padding: 20;
}

/* ListView styling */
.list-view {
    -fx-background-color: white;
    -fx-border-color: #6a6a5a; /* kokoda */
    -fx-border-radius: 4px;
    -fx-padding: 5px;
    -fx-font-size: 14px;
}

.list-view .list-cell {
    -fx-padding: 8px 12px;
    -fx-border-width: 0 0 1px 0;
    -fx-border-color: #cabfbe; /* Light border between items */
    -fx-text-fill: #1e1c27; /* steel-gray */
}

/* Hover effect for list items */
.list-view .list-cell:hover {
    -fx-background-color: #5617bf; /* soft light gray */
}

/* Selected item style */
.list-view .list-cell:selected {
    -fx-background-color: #ba194a; /* wild-blue yonder */
    -fx-text-fill: white;
    -fx-font-weight: bold;
}

================
File: main/resources/com/example/projetjavafx/group/css/group-add.css
================
/* Base styles using the custom palette */
.root {
    -fx-background-color: #cabfbe; /* silver-rust */
    -fx-font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

/* Form title */
.form-title {
    -fx-font-size: 24px;
    -fx-font-weight: bold;
    -fx-text-fill: #1c2b5d; /* biscay */
    -fx-padding: 10 0 20 0;
}

/* Labels */
.label {
    -fx-font-size: 14px;
    -fx-text-fill: #1e1c27; /* steel-gray */
    -fx-font-weight: bold;
}

/* Text fields and text areas */
.text-field, .text-area {
    -fx-background-color: white;
    -fx-border-color: #6a6a5a; /* kokoda */
    -fx-border-radius: 4px;
    -fx-padding: 8px;
    -fx-font-size: 14px;
}

.text-field:focused, .text-area:focused {
    -fx-border-color: #8989ba; /* wild-blue yonder */
    -fx-background-color: white;
    -fx-effect: dropshadow(three-pass-box, rgba(137, 137, 186, 0.3), 5, 0, 0, 0);
}

/* Buttons styling */
.button {
    -fx-background-color: #3d5472; /* east-bay */
    -fx-text-fill: white;
    -fx-font-size: 14px;
    -fx-font-weight: bold;
    -fx-padding: 10 20;
    -fx-border-radius: 4px;
    -fx-background-radius: 4px;
    -fx-cursor: hand;
    -fx-transition: all 0.3s ease;
}

/* Save button styling */
.save-button {
    -fx-background-color: #1c2b5d; /* biscay */
}

.save-button:hover {
    -fx-background-color: #1e298f; /* jacksons-purple */
    -fx-scale-x: 1.05;
    -fx-scale-y: 1.05;
    -fx-effect: dropshadow(three-pass-box, rgba(30, 41, 143, 0.5), 10, 0, 0, 0);
}

.save-button:pressed {
    -fx-scale-x: 0.95;
    -fx-scale-y: 0.95;
}

/* Cancel button styling */
.cancel-button {
    -fx-background-color: #d54d67; /* cabaret */
}

.cancel-button:hover {
    -fx-background-color: #b53c55; /* darker cabaret */
    -fx-scale-x: 1.05;
    -fx-scale-y: 1.05;
    -fx-effect: dropshadow(three-pass-box, rgba(213, 77, 103, 0.5), 10, 0, 0, 0);
}

.cancel-button:pressed {
    -fx-scale-x: 0.95;
    -fx-scale-y: 0.95;
}

/* Upload button styling */
.upload-button {
    -fx-background-color: #8989ba; /* wild-blue yonder */
}

.upload-button:hover {
    -fx-background-color: #6f6fa8; /* darker wild-blue yonder */
    -fx-scale-x: 1.05;
    -fx-scale-y: 1.05;
    -fx-effect: dropshadow(three-pass-box, rgba(137, 137, 186, 0.5), 10, 0, 0, 0);
}

.upload-button:pressed {
    -fx-scale-x: 0.95;
    -fx-scale-y: 0.95;
}

/* ImageView styling */
#imagePreview {
    -fx-border-color: #6a6a5a; /* kokoda */
    -fx-border-radius: 4px;
    -fx-background-color: #88a0af; /* bali-hai */
}

/* VBox styling */
.vbox {
    -fx-spacing: 10;
    -fx-padding: 20;
}

/* Sidebar styling */
#sidebar {
    -fx-background-color: #1c2b5d; /* biscay - deep navy */
    -fx-padding: 20px;
    -fx-spacing: 15px;
    -fx-border-color: #8989ba; /* wild-blue yonder accent */
    -fx-border-width: 0 1px 0 0;
}

#sidebar .title-label {
    -fx-text-fill: white;
    -fx-font-size: 24px;
    -fx-font-weight: 600;
    -fx-padding: 0 0 15px 0;
    -fx-border-width: 0 0 1px 0;
    -fx-border-color: #8989ba; /* wild-blue yonder */
}

#sidebar .button {
    -fx-background-color: transparent;
    -fx-text-fill: white;
    -fx-font-size: 14px;
    -fx-padding: 10px 20px;
    -fx-background-radius: 4px;
    -fx-border-width: 0 0 0 3px;
    -fx-border-color: transparent;
    -fx-cursor: hand;
    -fx-transition: all 0.2s;
}

#sidebar .button:hover {
    -fx-background-color: #1e298f30;
    -fx-border-color: #8989ba;
}

/* Hover effects for form elements */
.text-field:hover, .text-area:hover {
    -fx-effect: dropshadow(three-pass-box, rgba(103, 85, 82, 0.5), 5, 0, 0, 0);
    -fx-border-color: #675552; /* dorado */
}

================
File: main/resources/com/example/projetjavafx/group/group-add-view.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.ScrollPane?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.VBox?>

<BorderPane prefHeight="1050" prefWidth="1920" stylesheets="@css/group-add.css"
            xmlns="http://javafx.com/javafx/23.0.1"
            xmlns:fx="http://javafx.com/fxml/1"
            fx:controller="com.example.projetjavafx.root.group.GroupAddController">

    <!-- Left Sidebar (Navigation Bar) -->
    <left>
        <VBox fx:id="sidebar" prefHeight="1050.0" prefWidth="250.0">
            <!-- Navigation Buttons -->
            <VBox>
                <Label prefHeight="76.0" prefWidth="237.0" styleClass="title-label" text="Featured Groups" />
                <Button fx:id="homeButton" onAction="#handleHomeButton" prefHeight="38.0" prefWidth="241.0" text="Home" />
                <Button fx:id="analyticsButton" onAction="#onAnalyticsClick" prefHeight="38.0" prefWidth="242.0" text="Analytics" />
                <Button fx:id="createJobButton" onAction="#onCreateJobClick" prefHeight="38.0" prefWidth="247.0" text="Create Job Post" />
                <Button fx:id="jobFeedButton" onAction="#onJobFeedButtonClick" prefHeight="38.0" prefWidth="250.0" text="Job Feed" />
            </VBox>
        </VBox>
    </left>

    <!-- Center Content -->
    <center>
        <ScrollPane fitToHeight="true" fitToWidth="true">
            <VBox spacing="20" style="-fx-padding: 20;">
                <Label styleClass="form-title" text="Create New Group" />

                <!-- Form Container -->
                <VBox spacing="15" style="-fx-padding: 0 20;">
                    <Label fx:id="groupname" text="Group Name" />
                    <TextField fx:id="nameField" maxWidth="Infinity" promptText="Please enter the name of your group" />

                    <Label text="Description" />
                    <TextArea fx:id="descriptionField" maxWidth="Infinity" prefRowCount="4" promptText="Describe your group" />

                    <!-- Date Container -->
                    <HBox spacing="20">
                        <VBox spacing="5" HBox.hgrow="ALWAYS" />
                        <VBox spacing="5" HBox.hgrow="ALWAYS" />
                    </HBox>

                    <Label text="Rules" />
                    <TextField fx:id="rulesField" maxWidth="Infinity" promptText="Rules" />

                    <!-- Image Section -->
                    <VBox spacing="10">
                        <Button maxWidth="Infinity" onAction="#onUploadImageClick" styleClass="upload-button" text="Upload Image" />
                        <ImageView fx:id="imagePreview" fitWidth="300" preserveRatio="true" style="-fx-max-width: 300; -fx-max-height: 300;" />
                    </VBox>

                    <!-- Buttons -->
                    <HBox alignment="CENTER_RIGHT" spacing="20">
                        <Button onAction="#onCancelClick" styleClass="cancel-button" text="Cancel" />
                        <Button onAction="#onSaveGroupClick" styleClass="save-button" text="Save Group" />
                    </HBox>
                </VBox>
            </VBox>
        </ScrollPane>
    </center>
</BorderPane>

================
File: main/resources/com/example/projetjavafx/group/group-details.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Text?>



<VBox alignment="CENTER" spacing="15" xmlns="http://javafx.com/javafx/8.0.111" xmlns:fx="http://javafx.com/fxml/1"
      fx:controller="com.example.projetjavafx.root.group.GroupDetailsController"
      stylesheets="@css/group_profile.css"
      styleClass="popup-card">


    <ImageView fx:id="groupImage" fitWidth="300" preserveRatio="true" styleClass="popup-image"/>
    <Label fx:id="groupName" styleClass="popup-title"/>
    <Text fx:id="groupDescription" styleClass="popup-text"/>
    <Text fx:id="groupRules" styleClass="popup-text"/>

    <Button text="Close" onAction="#closeWindow" styleClass="popup-button"/>


</VBox>

================
File: main/resources/com/example/projetjavafx/group/group-members-view.fxml
================
<?xml version="1.0" encoding="UTF-8"?>
<?import javafx.scene.control.ListView?>
<?import javafx.scene.layout.VBox?>

<VBox xmlns="http://javafx.com/javafx/8" stylesheets="@css/group-add-member.css"  xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.projetjavafx.root.group.GroupMembersController">
    <ListView fx:id="membersListView" />
</VBox>

================
File: main/resources/com/example/projetjavafx/group/group-profile-view.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.ScrollPane?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.FlowPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.VBox?>

<BorderPane prefHeight="1050" prefWidth="1920" stylesheets="@css/group_profile.css"
            xmlns="http://javafx.com/javafx/23.0.1"
            xmlns:fx="http://javafx.com/fxml/1"
            fx:controller="com.example.projetjavafx.root.group.GroupProfileController">

    <!-- Left Sidebar (Navigation Bar) -->
    <left>
        <VBox fx:id="sidebar" prefHeight="1050.0" prefWidth="250.0">
            <!-- Navigation Buttons -->
            <VBox>
                <Label prefHeight="76.0" prefWidth="237.0" styleClass="title-label" text="Featured Groups" />
                <Button fx:id="homeButton" onAction="#handleHomeButton" prefHeight="38.0" prefWidth="241.0" text="Home" />
                <Button fx:id="analyticsButton" onAction="#onAnalyticsClick" prefHeight="38.0" prefWidth="242.0" text="Analytics" />
                <Button fx:id="createJobButton" onAction="#onCreateJobClick" prefHeight="38.0" prefWidth="247.0" text="Create Job Post" />
                <Button fx:id="jobFeedButton" onAction="#onJobFeedButtonClick" prefHeight="38.0" prefWidth="250.0" text="Job Feed" />
            </VBox>
        </VBox>
    </left>

    <!-- Center Content -->
    <center>
        <AnchorPane minHeight="600.0" minWidth="800.0" prefHeight="1050" prefWidth="1920">
            <VBox spacing="20" AnchorPane.bottomAnchor="20.0" AnchorPane.leftAnchor="20.0" AnchorPane.rightAnchor="20.0" AnchorPane.topAnchor="20.0">
                <HBox alignment="CENTER_LEFT" spacing="20">
                    <Label styleClass="title-label" text="Featured Groups" />
                    <TextField fx:id="searchField" maxWidth="300" promptText="Rechercher par nom ou description" />
                    <Button onAction="#onNewGroupClick" styleClass="new-group-button" text="New Group" />
                </HBox>

                <!-- Group List -->
                <ScrollPane fitToHeight="true" fitToWidth="true" hbarPolicy="NEVER" vbarPolicy="AS_NEEDED" VBox.vgrow="ALWAYS">
                    <FlowPane fx:id="groupsContainer" alignment="TOP_CENTER" hgap="20" prefHeight="718.0" prefWidth="1164.0" vgap="20" />
                </ScrollPane>
            </VBox>
        </AnchorPane>
    </center>
</BorderPane>

================
File: main/resources/com/example/projetjavafx/JobApplications/application_review-view.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TableColumn?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.VBox?>

<BorderPane prefHeight="1050" prefWidth="1920" stylesheets="@css/ApplicationsReview.css" xmlns="http://javafx.com/javafx/23.0.1" xmlns:fx="http://javafx.com/fxml/1"
            fx:controller="com.example.projetjavafx.root.jobApplications.JobApplicationsController">

    <left>
        <VBox id="sidebar" prefHeight="979.0" prefWidth="250.0" spacing="10">
            <Button fx:id="homeButton" onAction="#onHomeButtonClick" prefHeight="40.0" prefWidth="225.0" styleClass="nav-button" text="Home" />
            <Button fx:id="dashboardButton" onAction="#onDashboardClick" prefHeight="40.0" prefWidth="232.0" styleClass="nav-button" text="Dashboard" />
            <Button fx:id="jobFeedButton" onAction="#onJobFeedButtonClick" prefHeight="40.0" prefWidth="229.0" styleClass="nav-button" text="Job Feed" />
         <Button fx:id="JobFeedButton" mnemonicParsing="false" onAction="#onJobApplicationsButtonClick" prefHeight="40.0" prefWidth="238.0" text="Job Applications" />
            <Button fx:id="createJobButton" onAction="#onCreateJobButtonClick" prefHeight="40.0" prefWidth="237.0" styleClass="nav-button" text="Create Job" />
            <Button fx:id="eventsButton" onAction="#onEventsClick" prefHeight="40.0" prefWidth="259.0" styleClass="nav-button" text="Events" />
            <Button fx:id="analyticsButton" onAction="#onAnalyticsClick" prefHeight="40.0" prefWidth="258.0" styleClass="nav-button" text="Analytics" />
        </VBox>
    </left>
    <center>
        <VBox id="contentContainer" spacing="10">
            <Label id="jobLabel" text="Job Applications" />
            <TableView fx:id="applicationsTable">
                <columns>
                    <TableColumn fx:id="applicationIdColumn" text="ID" />
                    <TableColumn fx:id="userIdColumn" text="Applicant ID" />
                    <TableColumn fx:id="coverLetterColumn" text="Cover Letter" />
                    <TableColumn fx:id="resumeColumn" text="Resume" />
                    <TableColumn fx:id="statusColumn" prefWidth="130.0" text="Status" />
                    <TableColumn fx:id="actionColumn" minWidth="7.0" prefWidth="123.0" text="Action" />
                </columns>
            </TableView>
        </VBox>
    </center>
</BorderPane>

================
File: main/resources/com/example/projetjavafx/JobApplications/applied-jobs.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TableColumn?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.VBox?>

<BorderPane prefHeight="1050" prefWidth="1920" stylesheets="@css/ApplicationsReview.css" xmlns="http://javafx.com/javafx/23.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.projetjavafx.root.jobApplications.AppliedJobsController">
    <left>
        <VBox id="sidebar" prefHeight="979.0" prefWidth="250.0" spacing="10">
         <Button fx:id="homeButton" mnemonicParsing="false" onAction="#onHomeButtonClick" prefHeight="40.0" prefWidth="228.0" text="Home" />
            <Button fx:id="dashboardButton" onAction="#onDashboardClick" prefHeight="40.0" prefWidth="332.0" styleClass="nav-button" text="Dashboard" />
            <Button fx:id="jobFeedButton" onAction="#onJobFeedButtonClick" prefHeight="40.0" prefWidth="246.0" styleClass="nav-button" text="Job Feed" />
            <Button fx:id="jobApplicationsButton" onAction="#onJobApplicationsButtonClick" prefHeight="40.0" prefWidth="225.0" styleClass="nav-button" text="Job Applications" />
            <Button fx:id="createJobButton" onAction="#onCreateJobButtonClick" prefHeight="40.0" prefWidth="299.0" styleClass="nav-button" text="CreateJob" />
         <Button fx:id="eventsButton" mnemonicParsing="false" onAction="#onEventsClick" prefHeight="40.0" prefWidth="227.0" text="Events" />
         <Button fx:id="analyticsButton" mnemonicParsing="false" onAction="#onAnalyticsClick" prefHeight="40.0" prefWidth="224.0" text="Analytics" />
        </VBox>
    </left>
    <center>
        <VBox id="contentContainer" spacing="10">
            <Label id="pageTitle" text="Jobs You Applied For" />
            <TableView fx:id="jobsTable">
                <columns>
                    <TableColumn fx:id="jobIdColumn" text="Job ID" />
                    <TableColumn fx:id="jobTitleColumn" text="Job Title" />
                    <TableColumn fx:id="eventTitleColumn" text="Event Title" />
                    <TableColumn fx:id="jobLocationColumn" text="Location" />
                    <TableColumn fx:id="applicationDeadlineColumn" text="Deadline" />
                    <TableColumn fx:id="recruiterColumn" text="Recruiter" />
                    <TableColumn fx:id="actionColumn" text="Action" />
                </columns>
            </TableView>
        </VBox>
    </center>
</BorderPane>

================
File: main/resources/com/example/projetjavafx/JobApplications/css/ApplicationsReview.css
================
/* Professional Event Platform Styling */
.root {
    -fx-accent: #1e298f; /* jacksons-purple for focus */
    -fx-font-family: 'Segue UI', sans-serif;
}

/* Sophisticated Sidebar */
#sidebar {
    -fx-background-color: #1c2b5d; /* biscay - deep navy */
    -fx-padding: 20px;
    -fx-spacing: 15px;
    -fx-border-color: #8989ba; /* wild-blue yonder accent */
    -fx-border-width: 0 1px 0 0;
}

/* Clean Navigation Buttons */
#sidebar > Button {
    -fx-background-color: transparent;
    -fx-text-fill: #ffffff;
    -fx-font-size: 14px;
    -fx-padding: 10px 20px;
    -fx-background-radius: 4;
    -fx-alignment: CENTER_LEFT;
    -fx-border-width: 0 0 0 3px;
    -fx-border-color: transparent;
    -fx-cursor: hand;
    -fx-transition: all 0.2s;
}

#sidebar > Button:hover {
    -fx-background-color: #1e298f30; /* jacksons-purple with transparency */
    -fx-border-color: #8989ba; /* wild-blue yonder accent */
}

/* Professional Content Area */
#contentContainer {
    -fx-background-color: #ffffff;
    -fx-padding: 30px;
    -fx-spacing: 20px;
}

/* Minimalist Section Headers */
#jobLabel {
    -fx-text-fill: #1c2b5d; /* biscay */
    -fx-font-size: 20px;
    -fx-font-weight: 600;
    -fx-graphic-text-gap: 10px;
}

================
File: main/resources/com/example/projetjavafx/jobfeed/application-form.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.VBox?>

<VBox xmlns="http://javafx.com/javafx/17"
      xmlns:fx="http://javafx.com/fxml/1"
      fx:controller="com.example.projetjavafx.root.jobFeed.ApplicationFormController"
      spacing="10"
      styleClass="root">
    <!-- SIDE BAR -->

    <padding>
        <Insets top="20.0" right="20.0" bottom="20.0" left="20.0"/>
    </padding>

    <Label text="Application Form" styleClass="form-title"/>

    <Label text="Cover Letter:" styleClass="form-label"/>
    <TextArea fx:id="coverLetterArea"
              promptText="Write your cover letter here..."
              wrapText="true"
              prefHeight="200"
              styleClass="form-field"/>

    <Label text="Resume:" styleClass="form-label"/>
    <HBox spacing="10">
        <TextField fx:id="resumePathField"
                   editable="false"
                   prefWidth="300"
                   styleClass="form-field"/>
        <Button fx:id="browseButton"
                text="Browse..."
                styleClass="browse-button"/>
    </HBox>

    <Button fx:id="submitButton"
            text="Submit Application"
            defaultButton="true"
            styleClass="submit-button"/>
</VBox>

================
File: main/resources/com/example/projetjavafx/jobfeed/css/application-form.css
================
/* Main styling */
.root {
    -fx-background-color: #ffffff;
    -fx-font-family: 'Segoe UI', sans-serif;
}

/* Form title */
.form-title {
    -fx-font-size: 24px;
    -fx-font-weight: bold;
    -fx-text-fill: #1c2b5d; /* biscay */
}

/* Form labels */
.form-label {
    -fx-font-size: 16px;
    -fx-text-fill: #1c2b5d; /* biscay */
    -fx-font-weight: 500;
}

/* Form fields */
.form-field {
    -fx-pref-height: 35px;
    -fx-pref-width: 300px;
    -fx-font-size: 14px;
    -fx-padding: 5px 10px;
    -fx-background-radius: 4px;
    -fx-border-color: #cabfbe; /* silver-rust */
    -fx-border-radius: 4px;
}

/* Submit button */
.submit-button {
    -fx-background-color: #1e298f; /* jacksons-purple */
    -fx-text-fill: white;
    -fx-font-size: 18px;
    -fx-padding: 12px 40px;
    -fx-background-radius: 4px;
    -fx-cursor: hand;
}

.submit-button:hover {
    -fx-background-color: #2a38b3;
}

================
File: main/resources/com/example/projetjavafx/jobfeed/css/job-feed.css
================
/* Main container styling */
.root {
    -fx-background-color: #ffffff;
}

/* Top Bar Styling */
#topBar {
    -fx-background-color: #1c2b5d; /* biscay */
    -fx-padding: 15px;
    -fx-border-color: #8989ba; /* wild-blue yonder */
    -fx-border-width: 0 0 1px 0;
}

#appTitle {
    -fx-text-fill: white;
    -fx-font-size: 24px;
    -fx-font-weight: 600;
}

/* Sidebar Styling */
#sidebar {
    -fx-background-color: #1c2b5d; /* biscay */
    -fx-padding: 20px;
    -fx-border-color: #8989ba; /* wild-blue yonder */
    -fx-border-width: 0 1px 0 0;
}

.nav-button {
    -fx-background-color: transparent;
    -fx-text-fill: white;
    -fx-font-size: 14px;
    -fx-padding: 10px 20px;
    -fx-alignment: CENTER_LEFT;
    -fx-border-width: 0 0 0 3px;
    -fx-border-color: transparent;
    -fx-cursor: hand;
    -fx-transition: all 0.2s;
}

.nav-button:hover {
    -fx-background-color: #1e298f30; /* jacksons-purple with transparency */
    -fx-border-color: #8989ba; /* wild-blue yonder */
}

.active-nav-button {
    -fx-background-color: #1e298f; /* jacksons-purple */
    -fx-text-fill: white;
    -fx-border-color: #8989ba !important;
}

/* Logout Button */
#logoutButton {
    -fx-background-color: #d54d67; /* cabaret */
    -fx-text-fill: white;
    -fx-background-radius: 4px;
    -fx-padding: 8px 20px;
}

#logoutButton:hover {
    -fx-background-color: #b34158;
}

/* Content Area */
.scroll-pane {
    -fx-background-color: transparent;
}


/* Remove margin from FlowPane children */
.flow-pane > * {
    -fx-margin: 0;
}

/* Adjust ScrollPane width calculation */
.scroll-pane > .viewport {
    -fx-pref-width: 100%;
}
/* Job Card Styling (to be added dynamically) */
.job-card {
    -fx-min-width: 320px;
    -fx-pref-width: 320px;  /* Fixed width for consistent columns */
    -fx-max-width: 320px;
    -fx-background-color: white;
    -fx-background-radius: 8px;
    -fx-border-color: #8989ba;
    -fx-border-width: 1.5px;
    -fx-border-radius: 8px;
    -fx-padding: 24px;
    -fx-effect: dropshadow(gaussian, rgba(28,43,93,0.1), 8, 0.05, 0, 2);
}

 .job-title {
     -fx-text-fill: #1c2b5d; /* biscay */
     -fx-font-size: 18px;
     -fx-font-weight: 600;
     -fx-wrap-text: true;
 }
.job-card:hover {
    -fx-effect: dropshadow(gaussian, rgba(28,43,93,0.15), 12, 0.1, 2, 4);
    -fx-border-color: #1e298f; /* jacksons-purple */
    -fx-translate-y: -3px;
 }

 /* Optional: For even more depth */
 .job-card:active {
     -fx-effect: dropshadow(gaussian, rgba(28,43,93,0.2), 6, 0.1, 1, 2);
     -fx-translate-y: 0;
 }
 /* If you prefer a double border effect */
 .job-card-inner {
     -fx-border-color: #cabfbe; /* silver-rust */
     -fx-border-width: 1px;
     -fx-border-radius: 6px;
     -fx-padding: 20px;
 }

 .job-company {
     -fx-text-fill: #675552; /* dorado */
     -fx-font-size: 14px;
     -fx-font-weight: 500;
     -fx-padding: 4px 0;
 }

 .job-detail {
     -fx-text-fill: #6a6a5a; /* kokoda */
     -fx-font-size: 13px;
     -fx-padding: 2px 0;
 }

 .job-divider {
     -fx-stroke: #cabfbe; /* silver-rust */
     -fx-stroke-width: 1px;
     -fx-padding: 8px 0;
 }

 .job-status {
     -fx-background-radius: 12px;
     -fx-padding: 4px 12px;
     -fx-font-size: 12px;
     -fx-font-weight: 500;
 }

 .status-active {
     -fx-background-color: #88a0af20; /* bali-hai 20% opacity */
     -fx-text-fill: #1c2b5d; /* biscay */
 }

 .status-expired {
     -fx-background-color: #cabfbe20; /* silver-rust 20% opacity */
     -fx-text-fill: #675552; /* dorado */
 }

 .apply-button {
     -fx-background-color: #1e298f; /* jacksons-purple */
     -fx-text-fill: white;
     -fx-background-radius: 4px;
     -fx-padding: 8px 24px;
     -fx-font-weight: 500;
     -fx-cursor: hand;
 }

 .apply-button:hover {
     -fx-background-color: #2a38b3;
 }

 /* Hover effect for entire card */
 .job-card:hover {
     -fx-effect: dropshadow(gaussian, rgba(28,43,93,0.12), 10, 0, 3, 5);
     -fx-border-color: #8989ba; /* wild-blue yonder */
     -fx-translate-y: -2px;
     -fx-transition: all 0.2s;
 }

 /* Salary highlight */
 .salary-text {
     -fx-text-fill: #3d5472; /* east-bay */
     -fx-font-weight: 600;
     -fx-font-size: 14px;
 }

/* Consistent spacing */
.flow-pane > * {
    -fx-margin: 10px;
}

================
File: main/resources/com/example/projetjavafx/jobfeed/job-feed-view.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.ScrollPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.FlowPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.Region?>
<?import javafx.scene.layout.VBox?>

<BorderPane prefHeight="1050" prefWidth="1920" stylesheets="@css/job-feed.css" xmlns="http://javafx.com/javafx/23.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.projetjavafx.root.jobFeed.JobFeedController">

    <!-- TOP BAR -->
    <top>
        <HBox id="topBar" spacing="10">
            <Label id="appTitle" text="Job Feed" />
            <Region HBox.hgrow="ALWAYS" />
            <Button fx:id="profileButton" styleClass="nav-button" text="Profile" />
            <Button id="logoutButton" fx:id="logoutButton" text="Logout" />
        </HBox>
    </top>

    <!-- SIDE BAR -->
    <left>
        <VBox id="sidebar" prefHeight="979.0" prefWidth="250.0" spacing="10">
            <Button fx:id="homeButton" prefHeight="40.0" prefWidth="231.0" styleClass="nav-button" text="Home" />
            <Button fx:id="dashboardButton" prefHeight="40.0" prefWidth="209.0" styleClass="nav-button" text="Dashboard" textAlignment="CENTER" />
            <Button fx:id="eventsButton" prefHeight="40.0" prefWidth="209.0" styleClass="nav-button" text="Events" textAlignment="CENTER" />
            <Button fx:id="jobApplicationsButton" onAction="#onJobApplicationsButtonClick" prefHeight="40.0" prefWidth="209.0" styleClass="nav-button" text="Job Applications" />
            <Button fx:id="analyticsButton" onAction="#onAnalyticsClick" prefHeight="40.0" prefWidth="209.0" styleClass="nav-button" text="Analytics" />
            <Button fx:id="createJobButton" prefHeight="40.0" prefWidth="209.0" styleClass="nav-button" text="Create Job" />


        </VBox>
    </left>

    <!-- JOB FEED SCROLL VIEW -->
    <center>
        <ScrollPane fx:id="scrollPane">
            <content>
                <FlowPane fx:id="jobsContainer" alignment="CENTER" hgap="20" prefWrapLength="1793" vgap="20">
                    <padding>
                        <Insets bottom="20" left="20" right="20" top="20" />
                    </padding>
                </FlowPane>
            </content>
        </ScrollPane>
    </center>

</BorderPane>

================
File: main/resources/com/example/projetjavafx/organizer/analytics-view.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.ComboBox?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.chart.BarChart?>
<?import javafx.scene.chart.LineChart?>
<?import javafx.scene.chart.CategoryAxis?>
<?import javafx.scene.chart.NumberAxis?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.VBox?>

<BorderPane prefHeight="1050" prefWidth="1920" stylesheets="@css/analytics.css"
            xmlns="http://javafx.com/javafx/23.0.1" xmlns:fx="http://javafx.com/fxml/1"
            fx:controller="com.example.projetjavafx.root.organizer.AnalyticsController">

    <!-- Sidebar with navigation buttons -->
    <left>
        <VBox id="sidebar" prefHeight="979.0" prefWidth="250.0" spacing="10">
            <Button fx:id="homeButton" mnemonicParsing="false" onAction="#onHomeButtonClick" prefHeight="40.0" prefWidth="228.0" text="Home" styleClass="nav-button" />
            <Button fx:id="dashboardButton" onAction="#onDashboardClick" prefHeight="40.0" prefWidth="332.0" styleClass="nav-button" text="Dashboard" />
            <Button fx:id="jobFeedButton" onAction="#onJobFeedButtonClick" prefHeight="40.0" prefWidth="246.0" styleClass="nav-button" text="Job Feed" />
            <Button fx:id="jobApplicationsButton" onAction="#onJobApplicationsButtonClick" prefHeight="40.0" prefWidth="225.0" styleClass="nav-button" text="Job Applications" />
            <Button fx:id="createJobButton" onAction="#onCreateJobButtonClick" prefHeight="40.0" prefWidth="299.0" styleClass="nav-button" text="Create Job" />
            <Button fx:id="eventsButton" mnemonicParsing="false" onAction="#onEventsClick" prefHeight="40.0" prefWidth="227.0" styleClass="nav-button" text="Events" />
            <Button fx:id="analyticsButton" mnemonicParsing="false" onAction="#onAnalyticsClick" prefHeight="40.0" prefWidth="224.0" styleClass="nav-button" text="Analytics" />
        </VBox>
    </left>

    <!-- Top bar for the analytics view -->
    <top>
        <HBox id="topBar" alignment="CENTER" spacing="15">
            <Label text="Event Analytics" id="appTitle" />
            <ComboBox fx:id="eventComboBox" promptText="Select an event" />
        </HBox>
    </top>

    <!-- Main content area for statistics and charts -->
    <center>
        <VBox id="mainContent" spacing="20" alignment="CENTER">
            <!-- Stats Display -->
            <HBox id="stats-container" spacing="25" alignment="CENTER">
                <VBox spacing="10" alignment="CENTER">
                    <Label text="Total Participants:" styleClass="feature-title"/>
                    <Label fx:id="totalParticipantsLabel" text="0" styleClass="feature-description"/>
                </VBox>
                <VBox spacing="10" alignment="CENTER">
                    <Label text="Male Participants:" styleClass="feature-title"/>
                    <Label fx:id="maleParticipantsLabel" text="0" styleClass="feature-description"/>
                </VBox>
                <VBox spacing="10" alignment="CENTER">
                    <Label text="Female Participants:" styleClass="feature-title"/>
                    <Label fx:id="femaleParticipantsLabel" text="0" styleClass="feature-description"/>
                </VBox>
            </HBox>

            <!-- Charts Section -->
            <HBox id="charts-container" spacing="30" alignment="CENTER">
                <BarChart fx:id="genderBarChart" title="Gender Distribution">
                    <xAxis>
                        <CategoryAxis label="Gender"/>
                    </xAxis>
                    <yAxis>
                        <NumberAxis label="Participants"/>
                    </yAxis>
                </BarChart>

                <LineChart fx:id="participationLineChart" title="Participation Trend">
                    <xAxis>
                        <CategoryAxis label="Events"/>
                    </xAxis>
                    <yAxis>
                        <NumberAxis label="Total Participants"/>
                    </yAxis>
                </LineChart>
            </HBox>
        </VBox>
    </center>
</BorderPane>

================
File: main/resources/com/example/projetjavafx/organizer/create-job-offer-view.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.ComboBox?>
<?import javafx.scene.control.DatePicker?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.ColumnConstraints?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.RowConstraints?>
<?import javafx.scene.layout.VBox?>

<BorderPane prefHeight="1050" prefWidth="1920" stylesheets="@css/create-job.css" xmlns="http://javafx.com/javafx/23.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.projetjavafx.root.organizer.CreateJobOfferController">

    <!-- Left Sidebar -->
    <left>
        <VBox id="sidebar" alignment="TOP_LEFT" prefHeight="1050.0" spacing="15">
            <!-- Application Title -->
            <Label id="sidebarTitle" text="Create New Job" />

            <!-- Navigation Buttons -->
            <VBox id="navButtons" spacing="10">
                <Button onAction="#onHomeButtonClick" styleClass="nav-button" text="Home" />
            <Button fx:id="dashboardButton" mnemonicParsing="false" onAction="#onDashboardClick" prefHeight="23.0" prefWidth="232.0" styleClass="nav-button" text="Dashboard" />
                <Button fx:id="jobFeedButton" onAction="#onJobFeedButtonClick" styleClass="nav-button" text="Job Feed" />
                <Button styleClass="nav-button" text="Create Event" />
                <Button fx:id="eventsButton" onAction="#onEventsClick" prefHeight="25.0" prefWidth="215.0" styleClass="nav-button" text="Events" />
                <Button fx:id="analyticsButton" onAction="#onAnalyticsClick" styleClass="nav-button" text="Analytics" />
            </VBox>
        </VBox>
    </left>

    <!-- Center Content -->
    <center>
        <VBox id="formContainer" alignment="TOP_CENTER" spacing="20">
            <!-- Form Title -->
            <Label id="formTitle" text="Create New Job Offer" />

            <!-- Form Fields -->
            <GridPane id="formGrid" hgap="20" vgap="15">
                <!-- Job Title -->
                <Label styleClass="form-label" text="Job Title:" GridPane.columnIndex="0" GridPane.rowIndex="0" />
                <TextField fx:id="jobTitleField" styleClass="form-field" GridPane.columnIndex="1" GridPane.rowIndex="0" />

                <!-- Event Title -->
                <Label styleClass="form-label" text="Event Title:" GridPane.columnIndex="0" GridPane.rowIndex="1" />
                <TextField fx:id="eventTitleField" styleClass="form-field" GridPane.columnIndex="1" GridPane.rowIndex="1" />

                <!-- Job Location -->
                <Label styleClass="form-label" text="Job Location:" GridPane.columnIndex="0" GridPane.rowIndex="2" />
                <TextField fx:id="jobLocationField" styleClass="form-field" GridPane.columnIndex="1" GridPane.rowIndex="2" />

                <!-- Employment Type -->
                <Label styleClass="form-label" text="Employment Type:" GridPane.columnIndex="0" GridPane.rowIndex="3" />
                <ComboBox fx:id="employmentTypeComboBox" styleClass="form-field" GridPane.columnIndex="1" GridPane.rowIndex="3" />

                <!-- Application Deadline -->
                <Label styleClass="form-label" text="Application Deadline:" GridPane.columnIndex="0" GridPane.rowIndex="4" />
                <DatePicker fx:id="applicationDeadlinePicker" styleClass="form-field" GridPane.columnIndex="1" GridPane.rowIndex="4" />

                <!-- Min Salary -->
                <Label styleClass="form-label" text="Min Salary:" GridPane.columnIndex="0" GridPane.rowIndex="5" />
                <TextField fx:id="minSalaryField" styleClass="form-field" GridPane.columnIndex="1" GridPane.rowIndex="5" />

                <!-- Max Salary -->
                <Label styleClass="form-label" text="Max Salary:" GridPane.columnIndex="0" GridPane.rowIndex="6" />
                <TextField fx:id="maxSalaryField" styleClass="form-field" GridPane.columnIndex="1" GridPane.rowIndex="6" />

                <!-- Currency -->
                <Label styleClass="form-label" text="Currency:" GridPane.columnIndex="0" GridPane.rowIndex="7" />
                <ComboBox fx:id="currencyComboBox" styleClass="form-field" GridPane.columnIndex="1" GridPane.rowIndex="7" />

                <!-- Job Description -->
                <Label styleClass="form-label" text="Job Description:" GridPane.columnIndex="0" GridPane.rowIndex="8" />
                <TextArea fx:id="jobDescriptionArea" styleClass="form-field" GridPane.columnIndex="1" GridPane.rowIndex="8" />

                <!-- Recruiter Name -->
                <Label styleClass="form-label" text="Recruiter Name:" GridPane.columnIndex="0" GridPane.rowIndex="9" />
                <TextField fx:id="recruiterNameField" styleClass="form-field" GridPane.columnIndex="1" GridPane.rowIndex="9" />

                <!-- Recruiter Email -->
                <Label styleClass="form-label" text="Recruiter Email:" GridPane.columnIndex="0" GridPane.rowIndex="10" />
                <TextField fx:id="recruiterEmailField" styleClass="form-field" GridPane.columnIndex="1" GridPane.rowIndex="10" />

                <!-- Grid Constraints -->
                <columnConstraints>
                    <ColumnConstraints halignment="RIGHT" />
                    <ColumnConstraints hgrow="ALWAYS" />
                </columnConstraints>
                <rowConstraints>
                    <RowConstraints prefHeight="40" />
                    <RowConstraints prefHeight="40" />
                    <RowConstraints prefHeight="40" />
                    <RowConstraints prefHeight="40" />
                    <RowConstraints prefHeight="40" />
                    <RowConstraints prefHeight="40" />
                    <RowConstraints prefHeight="40" />
                    <RowConstraints prefHeight="40" />
                    <RowConstraints prefHeight="100" />
                    <RowConstraints prefHeight="40" />
                    <RowConstraints prefHeight="40" />
                </rowConstraints>
            </GridPane>

            <!-- Submit Button -->
            <Button fx:id="postJobButton" onAction="#handlePostJob" styleClass="submit-button" text="Post Job" />
        </VBox>
    </center>
</BorderPane>

================
File: main/resources/com/example/projetjavafx/organizer/css/analytics.css
================
/* Main color palette */
.root {
    -fx-background-color: #ffffff;
    -fx-accent: #1e298f; /* jacksons-purple */
    -fx-font-family: 'Segue UI', sans-serif;
}

/* Top Bar Styling */
#topBar {
    -fx-background-color: #1c2b5d; /* biscay */
    -fx-padding: 15px;
    -fx-border-color: #8989ba; /* wild-blue yonder */
    -fx-border-width: 0 0 1px 0;
}

#appTitle {
    -fx-text-fill: white;
    -fx-font-size: 24px;
    -fx-font-weight: 600;
}

/* Auth Buttons */
.auth-button {
    -fx-background-color: #d54d67; /* cabaret */
    -fx-text-fill: white;
    -fx-background-radius: 4px;
    -fx-padding: 8px 20px;
    -fx-font-size: 14px;
}

.auth-button:hover {
    -fx-background-color: #b34158;
}

/* Sidebar Styling */
#sidebar {
    -fx-background-color: #1c2b5d; /* biscay */
    -fx-padding: 20px;
    -fx-spacing: 15px;
    -fx-border-color: #8989ba; /* wild-blue yonder */
    -fx-border-width: 0 1px 0 0;
    -fx-pref-width: 250px;
}

/* Navigation Buttons */
.nav-button {
    -fx-background-color: transparent;
    -fx-text-fill: white !important; /* Force text color */
    -fx-font-size: 14px;
    -fx-padding: 0 15px;
    -fx-alignment: CENTER_LEFT;
    -fx-border-width: 0 0 0 3px;
    -fx-border-color: transparent;
    -fx-cursor: hand;
    -fx-pref-height: 38px;
    -fx-min-width: 250px;
    -fx-transition: all 0.2s;
}

/* Hover state */
.nav-button:hover {
    -fx-background-color: #1e298f30; /* jacksons-purple with 30% opacity */
    -fx-border-color: #8989ba; /* wild-blue yonder */
}

/* Active state */
.nav-button:armed {
    -fx-background-color: #1e298f60; /* darker active state */
}

.primary-action {
    -fx-background-color: #1e298f; /* jacksons-purple */
    -fx-text-fill: white;
    -fx-background-radius: 4px;
}

/* Main Content Area */
#mainContent {
    -fx-padding: 40px;
    -fx-background-color: #f8f9fa;
}

#heroTitle {
    -fx-text-fill: #1c2b5d; /* biscay */
    -fx-font-size: 32px;
    -fx-font-weight: 700;
    -fx-wrap-text: true;
    -fx-text-alignment: center;
}

#heroSubtitle {
    -fx-text-fill: #6a6a5a; /* kokoda */
    -fx-font-size: 18px;
    -fx-padding: 10px 0 20px 0;
}

/* Feature Cards */
.feature-card {
    -fx-background-color: white;
    -fx-background-radius: 8px;
    -fx-border-color: #cabfbe; /* silver-rust */
    -fx-border-width: 1px;
    -fx-padding: 20px;
    -fx-spacing: 10px;
    -fx-effect: dropshadow(gaussian, rgba(28,43,93,0.05), 6, 0, 1, 2);
    -fx-min-width: 280px;
    -fx-alignment: CENTER;
}

.feature-title {
    -fx-text-fill: #1c2b5d; /* biscay */
    -fx-font-size: 16px;
    -fx-font-weight: 600;
}

.feature-description {
    -fx-text-fill: #6a6a5a; /* kokoda */
    -fx-font-size: 14px;
    -fx-wrap-text: true;
    -fx-text-alignment: center;
}

/* Action Buttons */
.action-button {
    -fx-background-color: #1e298f; /* jacksons-purple */
    -fx-text-fill: white;
    -fx-background-radius: 4px;
    -fx-padding: 12px 30px;
    -fx-font-size: 14px;
}

.action-button:hover {
    -fx-background-color: #2a38b3;
}

/* Charts Container Styling (if needed) */
#charts-container {
    -fx-padding: 20px;
}

/* Additional Chart Styling (if needed) */
.chart-title {
    -fx-font-size: 16px;
    -fx-text-fill: #1e298f;
}

.axis-label {
    -fx-font-size: 14px;
    -fx-text-fill: #6a6a5a;
}

.chart-legend {
    -fx-font-size: 12px;
    -fx-text-fill: #6a6a5a;
}

/* BarChart styling */
.default-color0.chart-bar {
    -fx-bar-fill: #1e298f;
}

.default-color1.chart-bar {
    -fx-bar-fill: #FFC107;
}

/* LineChart styling */
.default-color0.chart-series-line {
    -fx-stroke: #1e298f;
}

.default-color0.chart-line-symbol {
    -fx-background-color: #1e298f, white;
    -fx-background-insets: 0, 2;
    -fx-background-radius: 5px;
    -fx-padding: 5px;
}

================
File: main/resources/com/example/projetjavafx/organizer/css/application-form.css
================
/* Main styling */
.root {
    -fx-background-color: #ffffff;
    -fx-font-family: 'Segoe UI', sans-serif;
}

/* Form title */
.form-title {
    -fx-font-size: 24px;
    -fx-font-weight: bold;
    -fx-text-fill: #1c2b5d; /* biscay */
}

/* Form labels */
.form-label {
    -fx-font-size: 16px;
    -fx-text-fill: #1c2b5d; /* biscay */
    -fx-font-weight: 500;
}

/* Form fields */
.form-field {
    -fx-pref-height: 35px;
    -fx-pref-width: 300px;
    -fx-font-size: 14px;
    -fx-padding: 5px 10px;
    -fx-background-radius: 4px;
    -fx-border-color: #cabfbe; /* silver-rust */
    -fx-border-radius: 4px;
}

/* Browse button */
.browse-button {
    -fx-background-color: #34495e;
    -fx-text-fill: white;
    -fx-padding: 8px 15px;
    -fx-background-radius: 4px;
    -fx-cursor: hand;
}

.browse-button:hover {
    -fx-background-color: #2c3e50;
}

/* Submit button */
.submit-button {
    -fx-background-color: #1e298f; /* jacksons-purple */
    -fx-text-fill: white;
    -fx-font-size: 18px;
    -fx-padding: 12px 40px;
    -fx-background-radius: 4px;
    -fx-cursor: hand;
}

.submit-button:hover {
    -fx-background-color: #2a38b3;
}

================
File: main/resources/com/example/projetjavafx/organizer/css/create-job.css
================
/* Main styling */
.root {
    -fx-background-color: #ffffff;
    -fx-font-family: 'Segoe UI', sans-serif;
}

/* Sidebar styling */
#sidebar {
    -fx-background-color: #1c2b5d; /* biscay */
    -fx-padding: 20px;
    -fx-spacing: 15px;
    -fx-pref-width: 250px;
}

#sidebarTitle {
    -fx-text-fill: white;
    -fx-font-size: 20px;
    -fx-font-weight: bold;
    -fx-padding: 0 0 15px 0;
}

.nav-button {
    -fx-background-color: transparent;
    -fx-text-fill: white;
    -fx-font-size: 14px;
    -fx-padding: 10px 20px;
    -fx-alignment: CENTER_LEFT;
    -fx-pref-width: 250px;
    -fx-pref-height: 38px;
    -fx-border-width: 0 0 0 3px;
    -fx-border-color: transparent;
    -fx-cursor: hand;
}

.active-nav-button {
    -fx-background-color: #1e298f; /* jacksons-purple */
    -fx-border-color: #8989ba !important;
}

/* Form container */
#formContainer {
    -fx-padding: 40px;
    -fx-background-color: #f8f9fa;
}

#formTitle {
    -fx-font-size: 24px;
    -fx-font-weight: bold;
    -fx-text-fill: #1c2b5d; /* biscay */
}

/* Form grid styling */
#formGrid {
    -fx-padding: 20px;
    -fx-background-color: white;
    -fx-border-color: #cabfbe; /* silver-rust */
    -fx-border-width: 1px;
    -fx-effect: dropshadow(gaussian, rgba(28,43,93,0.05), 6, 0, 1, 2);
}

.form-label {
    -fx-font-size: 16px;
    -fx-text-fill: #1c2b5d; /* biscay */
    -fx-font-weight: 500;
}

.form-field {
    -fx-pref-height: 35px;
    -fx-pref-width: 300px;
    -fx-font-size: 14px;
    -fx-padding: 5px 10px;
    -fx-background-radius: 4px;
    -fx-border-color: #cabfbe;
    -fx-border-radius: 4px;
}

/* Submit button */
.submit-button {
    -fx-background-color: #1e298f; /* jacksons-purple */
    -fx-text-fill: white;
    -fx-font-size: 18px;
    -fx-padding: 12px 40px;
    -fx-background-radius: 4px;
    -fx-cursor: hand;
}

.submit-button:hover {
    -fx-background-color: #2a38b3;
}

/* Profile section */
#userProfile {
    -fx-padding: 15px;
    -fx-background-color: #34495e;
    -fx-spacing: 10px;
}

.profile-image {
    -fx-fit-width: 40px;
    -fx-fit-height: 40px;
    -fx-background-radius: 20px;
}

.profile-name {
    -fx-text-fill: white;
    -fx-font-weight: bold;
}

.profile-role {
    -fx-text-fill: #bdc3c7;
}

================
File: main/resources/com/example/projetjavafx/organizer/css/orgnaizer.css
================
/* Professional Event Platform Styling */
.root {
    -fx-accent: #1e298f; /* jacksons-purple for focus */
    -fx-font-family: 'Segoe UI', sans-serif;
}

/* Sophisticated Sidebar */
#sidebar {
    -fx-background-color: #1c2b5d; /* biscay - deep navy */
    -fx-padding: 20px;
    -fx-spacing: 15px;
    -fx-border-color: #8989ba; /* wild-blue yonder accent */
    -fx-border-width: 0 1px 0 0;
}

#appTitle {
    -fx-text-fill: #ffffff;
    -fx-font-size: 24px;
    -fx-font-weight: 600;
    -fx-padding: 0 0 15px 0;
    -fx-border-width: 0 0 1px 0;
    -fx-border-color: #8989ba; /* wild-blue yonder */
}

/* Clean Navigation Buttons */
VBox > Button, #jobFeedButton {
    -fx-background-color: transparent;
    -fx-text-fill: #ffffff;
    -fx-font-size: 14px;
    -fx-padding: 10px 20px;
    -fx-background-radius: 4;
    -fx-alignment: CENTER_LEFT;
    -fx-border-width: 0 0 0 3px;
    -fx-border-color: transparent;
    -fx-cursor: hand;
    -fx-transition: all 0.2s;
}

VBox > Button:hover, #jobFeedButton:hover {
    -fx-background-color: #1e298f30; /* jacksons-purple with transparency */
    -fx-border-color: #8989ba; /* wild-blue yonder accent */
}

/* Professional Content Area */
#contentContainer {
    -fx-background-color: #ffffff;
    -fx-padding: 30px;
    -fx-spacing: 20px;
}

/* Minimalist Section Headers */
#eventHeader, #jobHeader {
    -fx-background-color: #ffffff;
    -fx-padding: 15px;
    -fx-spacing: 15px;
    -fx-border-width: 0 0 1px 0;
    -fx-border-color: #cabfbe; /* silver-rust */
}

#eventLabel, #jobLabel {
    -fx-text-fill: #1c2b5d; /* biscay */
    -fx-font-size: 20px;
    -fx-font-weight: 600;
    -fx-graphic-text-gap: 10px;
}

/* Professional Action Buttons */
#newEventButton, #newJobPostButton {
    -fx-background-color: #1e298f; /* jacksons-purple */
    -fx-text-fill: white;
    -fx-font-size: 14px;
    -fx-padding: 8px 20px;
    -fx-background-radius: 4;
    -fx-cursor: hand;
    -fx-effect: dropshadow(gaussian, rgba(30,41,143,0.1), 2, 0, 1, 1);
    -fx-transition: all 0.2s;
}

#newEventButton:hover, #newJobPostButton:hover {
    -fx-background-color: #2a38b3;
    -fx-effect: dropshadow(gaussian, rgba(30,41,143,0.2), 4, 0, 2, 2);
}

/* Elegant Table Design */
TableView {
    -fx-background-color: #ffffff;
    -fx-border-color: #cabfbe; /* silver-rust */
    -fx-border-radius: 4;
    -fx-background-insets: 0;
}

.table-row-cell:filled {
    -fx-border-color: transparent transparent #f5f5f5 transparent;
}

.table-row-cell:filled:selected {
    -fx-background-color: #88a0af20; /* bali-hai with transparency */
}

.table-row-cell:filled:hover {
    -fx-background-color: #f8f9fa;
}

TableColumn .column-header-background {
    -fx-background-color: #1c2b5d; /* biscay */
}

TableColumn .column-header {
    -fx-text-fill: white;
    -fx-font-weight: 500;
    -fx-alignment: CENTER_LEFT;
    -fx-padding: 12px 15px;
}

TableColumn .label {
    -fx-text-fill: white;
}

/* Professional Status Indicators */
.status-indicator {
    -fx-padding: 4px 8px;
    -fx-background-radius: 12;
    -fx-font-size: 12px;
    -fx-font-weight: 500;
}

.status-active {
    -fx-background-color: #88a0af30; /* bali-hai transparency */
    -fx-text-fill: #1c2b5d; /* biscay */
}

.status-completed {
    -fx-background-color: #cabfbe30; /* silver-rust transparency */
    -fx-text-fill: #675552; /* dorado */
}

/* Subtle Interactive Elements */
.hyperlink {
    -fx-text-fill: #1e298f; /* jacksons-purple */
    -fx-border-color: transparent;
    -fx-underline: false;
    -fx-cursor: hand;
}

.hyperlink:hover {
    -fx-underline: true;
}

/* Professional Form Controls */
.text-field, .combo-box {
    -fx-background-color: #ffffff;
    -fx-border-color: #cabfbe; /* silver-rust */
    -fx-border-radius: 4;
    -fx-padding: 8px;
}

.text-field:focused, .combo-box:focused {
    -fx-border-color: #1e298f; /* jacksons-purple */
}

================
File: main/resources/com/example/projetjavafx/organizer/organizer-view.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TableColumn?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.VBox?>

<BorderPane prefHeight="1050" prefWidth="1920" stylesheets="@css/orgnaizer.css" xmlns="http://javafx.com/javafx/23.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.projetjavafx.root.organizer.OrganizerController">

    <!-- Left Sidebar -->
    <left>
        <VBox fx:id="sidebar" prefHeight="1050.0" prefWidth="250.0">
            <!-- Application Title -->
            <Label fx:id="appTitle" prefHeight="45.0" prefWidth="229.0" text="Your Posts" />

            <!-- Navigation Buttons -->
            <VBox>
                <Button fx:id="homeButton" onAction="#handleHomeButton" prefHeight="38.0" prefWidth="213.0" text="Home" />
                <Button fx:id="analyticsButton" onAction="#onAnalyticsClick" prefHeight="38.0" prefWidth="227.0" text="Analytics" />
                <Button fx:id="createEventButton" prefHeight="38.0" prefWidth="213.0" text="Create Event" />
                <Button fx:id="createJobButton" onAction="#onCreateJobClick" prefHeight="38.0" prefWidth="223.0" text="Create Job Post" />
               <Button fx:id="jobFeedButton" onAction="#onJobFeedButtonClick" prefHeight="38.0" prefWidth="241.0" text="Job Feed" />
            <Button fx:id="reviewApplicationsButton" mnemonicParsing="false" onAction="#onReviewApplicationsButtonClick" prefHeight="38.0" prefWidth="211.0" text="Review Applications" />
            <Button fx:id="appliedAtButton" mnemonicParsing="false" onAction="#onAppliedAtButtonClick" prefHeight="38.0" prefWidth="264.0" text="Applied  At " />
            </VBox>
        </VBox>
    </left>

    <!-- Center Content -->
    <center>
        <VBox fx:id="contentContainer">
            <!-- Event Management Section -->
            <VBox fx:id="eventSection">
                <HBox fx:id="eventHeader">
                    <Label fx:id="eventLabel" text="Event Management" />
                    <Button fx:id="newEventButton" text="+ New Event" />
                </HBox>
                <TableView fx:id="eventsTable">
                    <columns>
                        <TableColumn fx:id="eventNameColumn" text="Name" />
                        <TableColumn fx:id="eventDescColumn" text="Description" />
                        <TableColumn fx:id="eventStartColumn" text="Start Time" />
                        <TableColumn fx:id="eventEndColumn" text="End Time" />
                        <TableColumn fx:id="eventLocationColumn" text="Location" />
                    </columns>
                </TableView>
            </VBox>

            <!-- Job Management Section -->
            <VBox fx:id="jobSection">
                <HBox fx:id="jobHeader">
                    <Label fx:id="jobLabel" text="Job Post Management" />
                    <Button fx:id="newJobPostButton" onAction="#onNewJobPostClick" text="+ New Job Post" />
                </HBox>
                <TableView fx:id="jobsTable">
                    <columns>
                        <TableColumn fx:id="jobTitleColumn" text="Job Title" />
                        <TableColumn fx:id="eventTitleColumn" text="Event Title" />
                        <TableColumn fx:id="jobLocationColumn" text="Location" />
                        <TableColumn fx:id="employmentTypeColumn" text="Employment Type" />
                        <TableColumn fx:id="applicationDeadlineColumn" text="Deadline" />
                        <TableColumn fx:id="minSalaryColumn" text="Min Salary" />
                        <TableColumn fx:id="maxSalaryColumn" text="Max Salary" />
                        <TableColumn fx:id="currencyColumn" text="Currency" />
                        <TableColumn fx:id="jobDescColumn" text="Description" />
                        <TableColumn fx:id="recruiterNameColumn" text="Recruiter Name" />
                        <TableColumn fx:id="recruiterEmailColumn" text="Recruiter Email" />
                        <TableColumn fx:id="createdAtColumn" text="Created At" />
                    </columns>
                </TableView>
            </VBox>
        </VBox>
    </center>
</BorderPane>

================
File: main/resources/com/example/projetjavafx/profile/edit-view.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.StackPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Font?>

<BorderPane xmlns="http://javafx.com/javafx/23.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.">

   <!-- ========== PROFILE CONTENT ========== -->
   <center>
      <VBox alignment="CENTER" prefHeight="434.0" prefWidth="795.0" spacing="20">
         <Label text="Edit Profile">
            <font>
               <Font size="24.0" />
            </font></Label>

         <!-- Profile Image -->
         <StackPane>
            <ImageView fx:id="profileImageView" fitHeight="120" fitWidth="120" onMouseClicked="#changeProfileImage" />
            <Label text="Click to Change Photo" />
         </StackPane>

         <!-- Name Field -->
         <TextField fx:id="txtName" prefHeight="31.0" prefWidth="697.0" promptText="Enter your name" />
         
         <!-- Save Changes Button -->
         <Button fx:id="btnSaveChanges" onAction="#saveProfileChanges" text="Save Changes" />

      </VBox>
   </center>

</BorderPane>

================
File: main/resources/com/example/projetjavafx/profile/profile-view.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.text.Font?>

<AnchorPane prefHeight="885.0" prefWidth="1100.0" xmlns="http://javafx.com/javafx/23.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.projetjavafx.root.auth.PasswordController">
    <children>
        <Button fx:id="buttonconfirmpass" layoutX="274.0" layoutY="260.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="92.0" style="-fx-background-color: #d34e68;" text="Edit" />
      <Label layoutX="76.0" layoutY="62.0" text="User Personal Details ">
         <font>
            <Font size="24.0" />
         </font>
      </Label>
      <ImageView cache="true" fitHeight="150.0" fitWidth="200.0" layoutX="89.0" layoutY="145.0" pickOnBounds="true" preserveRatio="true">
         <image>
            <Image url="@../photos/profile-modified.png" />
         </image>
      </ImageView>
      <Label layoutX="272.0" layoutY="165.0" text="Name user">
         <font>
            <Font size="14.0" />
         </font>
      </Label>
      <Label layoutX="272.0" layoutY="212.0" text="Email user" />
      <Label layoutX="76.0" layoutY="340.0" text="Upcoming Events">
         <font>
            <Font size="24.0" />
         </font>
      </Label>
      <Button fx:id="buttonconfirmpass1" layoutX="299.0" layoutY="345.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="121.0" style="-fx-background-color: #d34e68;" text="Create New Event" />
    </children>
</AnchorPane>

================
File: main/resources/com/example/projetjavafx/root/css/root.css
================
/* Main color palette */
.root {
    -fx-background-color: #ffffff;
    -fx-accent: #1e298f; /* jacksons-purple */
    -fx-font-family: 'Segoe UI', sans-serif;
}

/* Top Bar Styling */
#topBar {
    -fx-background-color: #1c2b5d; /* biscay */
    -fx-padding: 15px;
    -fx-border-color: #8989ba; /* wild-blue yonder */
    -fx-border-width: 0 0 1px 0;
}

#appTitle {
    -fx-text-fill: white;
    -fx-font-size: 24px;
    -fx-font-weight: 600;
}

/* Auth Buttons */
.auth-button {
    -fx-background-color: #d54d67; /* cabaret */
    -fx-text-fill: white;
    -fx-background-radius: 4px;
    -fx-padding: 8px 20px;
    -fx-font-size: 14px;
}

.auth-button:hover {
    -fx-background-color: #b34158;
}

/* Sidebar Styling */
/* Sidebar Styling */
#sidebar {
    -fx-background-color: #1c2b5d; /* biscay */
    -fx-padding: 20px;
    -fx-spacing: 15px;
    -fx-border-color: #8989ba; /* wild-blue yonder */
    -fx-border-width: 0 1px 0 0;
    -fx-pref-width: 250px;
}

/* Navigation Buttons */
.nav-button {
    -fx-background-color: transparent;
    -fx-text-fill: white !important; /* Force text color */
    -fx-font-size: 14px;
    -fx-padding: 0 15px;
    -fx-alignment: CENTER_LEFT;
    -fx-border-width: 0 0 0 3px;
    -fx-border-color: transparent;
    -fx-cursor: hand;
    -fx-pref-height: 38px;
    -fx-min-width: 250px;
    -fx-transition: all 0.2s;
}

/* Hover state */
.nav-button:hover {
    -fx-background-color: #1e298f30; /* jacksons-purple with 30% opacity */
    -fx-border-color: #8989ba; /* wild-blue yonder */
}

/* Active state */
.nav-button:armed {
    -fx-background-color: #1e298f60; /* darker active state */
}

.primary-action {
    -fx-background-color: #1e298f; /* jacksons-purple */
    -fx-text-fill: white;
    -fx-background-radius: 4px;
}

/* Main Content Area */
#mainContent {
    -fx-padding: 40px;
    -fx-background-color: #f8f9fa;
}

#heroTitle {
    -fx-text-fill: #1c2b5d; /* biscay */
    -fx-font-size: 32px;
    -fx-font-weight: 700;
    -fx-wrap-text: true;
    -fx-text-alignment: center;
}

#heroSubtitle {
    -fx-text-fill: #6a6a5a; /* kokoda */
    -fx-font-size: 18px;
    -fx-padding: 10px 0 20px 0;
}

/* Feature Cards */
.feature-card {
    -fx-background-color: white;
    -fx-background-radius: 8px;
    -fx-border-color: #cabfbe; /* silver-rust */
    -fx-border-width: 1px;
    -fx-padding: 20px;
    -fx-spacing: 10px;
    -fx-effect: dropshadow(gaussian, rgba(28,43,93,0.05), 6, 0, 1, 2);
    -fx-min-width: 280px;
    -fx-alignment: CENTER;
}

.feature-icon {
    -fx-fit-width: 100px;
    -fx-fit-height: 100px;
    -fx-opacity: 0.9;
}

.feature-title {
    -fx-text-fill: #1c2b5d; /* biscay */
    -fx-font-size: 16px;
    -fx-font-weight: 600;
}

.feature-description {
    -fx-text-fill: #6a6a5a; /* kokoda */
    -fx-font-size: 14px;
    -fx-wrap-text: true;
    -fx-text-alignment: center;
}

/* Action Buttons */
.action-button {
    -fx-background-color: #1e298f; /* jacksons-purple */
    -fx-text-fill: white;
    -fx-background-radius: 4px;
    -fx-padding: 12px 30px;
    -fx-font-size: 14px;
}

.action-button:hover {
    -fx-background-color: #2a38b3;
}

================
File: main/resources/com/example/projetjavafx/root/root-view.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.Pane?>
<?import javafx.scene.layout.VBox?>

<BorderPane prefHeight="1050" prefWidth="1920" stylesheets="@css/root.css" xmlns="http://javafx.com/javafx/23.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.projetjavafx.root.RootController">

    <top>
        <HBox id="topBar" alignment="CENTER_LEFT" spacing="15">
            <Label id="appTitle" text="Connect Sphere" />
            <Pane HBox.hgrow="ALWAYS" />
            <HBox id="authButtons" alignment="TOP_RIGHT" spacing="15">
                <Button fx:id="loginButton" onAction="#onLoginClick" prefHeight="34.0" prefWidth="141.0" styleClass="auth-button" text="Login" />
                <Button fx:id="registerButton" onAction="#onRegisterClick" prefHeight="34.0" prefWidth="140.0" styleClass="auth-button" text="Register" />
            </HBox>
        </HBox>
    </top>


    <left>
        <VBox id="sidebar" alignment="TOP_LEFT" spacing="15">
            <Button fx:id="organizerButton" onAction="#onOrganizerButtonClick" styleClass="nav-button" text="Dashboard" />
            <Button fx:id="eventsButton" onAction="#onEventsClick" styleClass="nav-button" text="Events" />
            <Button fx:id="groupButton" onAction="#onGroupButtonClick" styleClass="nav-button" text="Group" />
            <Button fx:id="jobButton" onAction="#onJobFeedClick" prefHeight="40.0" prefWidth="250.0" styleClass="nav-button" text="Job Feed" />
            <Button fx:id="createJobButton" onAction="#onCreateJobClick" styleClass="nav-button" text="Create Job" />
            <Button fx:id="profileButton" onAction="#onProfileClick" styleClass="nav-button" text="Profile" />
            <Button fx:id="socialButton" mnemonicParsing="false" onAction="#onsocialButtonClick" text="Social" />

        </VBox>
    </left>

    <center>
        <VBox id="mainContent" alignment="CENTER" spacing="20">
            <Label id="heroTitle" text="Connect Sphere: Your Gateway to Unforgettable Events" />
            <Label id="heroSubtitle" text="Create, participate, and even work at the events that inspire you." />

            <HBox id="featureCards" alignment="CENTER" spacing="20">
                <VBox styleClass="feature-card">
               <ImageView fitHeight="211.0" fitWidth="263.0" pickOnBounds="true" preserveRatio="true">
                  <image>
                     <Image url="@../../../../a.jpg" />
                  </image>
               </ImageView>
                    <Label styleClass="feature-title" text="Create Events" />
                    <Label styleClass="feature-description" text="Plan and manage your own events with ease." />
                </VBox>

                <VBox styleClass="feature-card">
               <ImageView fitHeight="180.0" fitWidth="242.0" pickOnBounds="true" preserveRatio="true">
                  <image>
                     <Image url="@../../../../a.jpg" />
                  </image>
               </ImageView>
                    <Label styleClass="feature-title" text="Find Events" />
                    <Label styleClass="feature-description" text="Discover exciting events happening near you." />
                </VBox>

                <VBox styleClass="feature-card">
               <ImageView fitHeight="150.0" fitWidth="200.0" pickOnBounds="true" preserveRatio="true">
                  <image>
                     <Image url="@../../../../a.jpg" />
                  </image>
               </ImageView>
                    <Label styleClass="feature-title" text="Work at Events" />
                    <Label styleClass="feature-description" text="Find job opportunities at various events." />
                </VBox>
            </HBox>

            <HBox id="actionButtons" alignment="CENTER" spacing="10">
                <Button prefHeight="42.0" prefWidth="160.0" styleClass="action-button" text="Explore Events" />
                <Button prefHeight="42.0" prefWidth="160.0" styleClass="action-button" text="Create an Event" />
            </HBox>
        </VBox>
    </center>
</BorderPane>

================
File: main/resources/com/example/projetjavafx/social/css/social.css
================
.post-background{
    -fx-background-color: #fff;
    -fx-background-radius: 15;
    -fx-effect: dropShadow(three-pass-box,rgba(0,0,0,0.1) , 5.0, 0.0, 0.0, 5.0);
}

.reactions-container{
    -fx-background-color: #fff;
    -fx-background-radius: 50;
    -fx-effect: dropShadow(three-pass-box,rgba(0,0,0,0.1) , 5.0, 0.0, 0.0, 5.0);
    -fx-border-width: 1;
    -fx-border-color:#B8B9BB;
    -fx-border-radius: 50;
}

.top-border{
    -fx-border-width: 1 0 0 0;
    -fx-border-color: #606266;
}

.round-button{
    -fx-background-color: #F0F2F5;
    -fx-background-radius: 25;


}
.white-background{
    -fx-background-color: #fff;

}
.body-background{
    -fx-background-color: #F0F2F5;
}
.text-field{
    -fx-background-color: #F0F2F5;
    -fx-background-radius: 50;
}

.scroll-pane > .viewport{
    -fx-background-color: transparent;

}
/* Ajouter ces styles
.media-preview {
    -fx-max-width: 500px;
    -fx-max-height: 500px;
    -fx-border-radius: 10px;
}

.video-container {
    -fx-background-color: #000;
}
.clickable-label {
    -fx-text-fill: #1877f2;
    -fx-underline: true;
    -fx-cursor: hand;
}

.clickable-label:hover {
    -fx-text-fill: #165aad;
}
/****************************************/
/* ============================== */
/*       Styles de la Barre de Navigation */
/* ============================== */
#sidebar {
    -fx-background-color: #1c2b5d; /* biscay - deep navy */
    -fx-padding: 20px;
    -fx-spacing: 15px;
    -fx-border-color: #8989ba; /* wild-blue yonder accent */
    -fx-border-width: 0 1px 0 0;
}

/* Titre de la barre de navigation */
#sidebar .title-label {
    -fx-text-fill: white;
    -fx-font-size: 24px;
    -fx-font-weight: 600;
    -fx-padding: 0 0 15px 0;
    -fx-border-width: 0 0 1px 0;
    -fx-border-color: #8989ba; /* wild-blue yonder */
}

/* Styles par défaut pour les boutons de la navbar */
#sidebar #homeButton,
#sidebar #analyticsButton,
#sidebar #createJobButton,
#sidebar #jobFeedButton {
    -fx-background-color: transparent; /* Fond transparent par défaut */
    -fx-text-fill: white; /* Texte blanc */
    -fx-font-size: 14px;
    -fx-padding: 10px 20px;
    -fx-background-radius: 4px;
    -fx-border-width: 0 0 0 3px; /* Bordure à gauche */
    -fx-border-color: transparent; /* Bordure transparente par défaut */
    -fx-cursor: hand;
    -fx-transition: all 0.2s; /* Transition fluide */
}

/* Effet de survol pour les boutons de la navbar */
#sidebar #homeButton:hover,
#sidebar #analyticsButton:hover,
#sidebar #createJobButton:hover,
#sidebar #jobFeedButton:hover {
    -fx-background-color: #1e298f30; /* Fond semi-transparent au survol */
    -fx-border-color: #8989ba; /* Bordure colorée au survol */
}
/* ... other styles */
.content-scroll {
    -fx-background: transparent;
    -fx-padding: 20;
}

.content-scroll > .viewport {
    -fx-background-color: #F0F2F5;
}

.top-bar {
    -fx-background-color: white;
    -fx-padding: 10 20;
    -fx-background-radius: 8;
    -fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.1), 8, 0, 0, 4);
}

.search-input {
    -fx-background-color: #F0F2F5;
    -fx-background-radius: 20;
    -fx-padding: 8 15;
    -fx-pref-width: 250;
}

.post-menu {
    -fx-background-color: transparent;
}

.post-menu:hover {
    -fx-background-color: #F0F2F5;
}

.interaction-button {
    -fx-spacing: 8;
    -fx-alignment: center;
    -fx-padding: 8 12;
    -fx-cursor: hand;
}

.interaction-button:hover {
    -fx-background-color: #F0F2F5;
    -fx-background-radius: 4;
}

.reaction-count, .interaction-count {
    -fx-text-fill: #65676B;
    -fx-font-size: 13;
}
.alert {
    -fx-background-color: #ffffff; /* Example background color */
    -fx-border-color: #cccccc; /* Example border color */
    -fx-border-width: 1;
    -fx-padding: 20;
}

.alert .content.label {
    -fx-font-size: 14; /* Example font size */
}
.alert .button-bar {
    -fx-alignment: CENTER; /* Center buttons */
}

.alert .button {
    -fx-background-color: #007bff; /* Example button color */
    -fx-text-fill: white;
    -fx-padding: 8 16;
    -fx-background-radius:5;
}


.white-background{
    --fxbackground-color: #fff;
}
.primary-color{
    --fxbackground-color: #f4f5f9;
}
.shadow{
    -fx-effect: dropshadow(three-pass-box,rgba(0,0,0,0.1),10,0,0,10);
}

.interaction-button {
    -fx-background-color: transparent;
    -fx-padding: 5;
    -fx-cursor: hand;
}

.interaction-button:hover {
    -fx-background-color: #f0f0f0;
}

.delete-button {
    -fx-background-color: transparent;
    -fx-text-fill: #ff4444;
}

.delete-button:hover {
    -fx-background-color: #ffeeee;
}

================
File: main/resources/com/example/projetjavafx/social/Feed.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import java.lang.String?>
<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.ScrollPane?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.Pane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Font?>

<BorderPane prefHeight="1050" prefWidth="1920" stylesheets="@css/social.css" xmlns="http://javafx.com/javafx/23.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.projetjavafx.root.social.SocialController">

   <!-- Left Sidebar (Navigation Bar) -->
   <left>
      <VBox prefHeight="608.0" prefWidth="212.0" style="-fx-background-color: #1C2B5D;">
         <children>
            <ImageView fitHeight="106.0" fitWidth="114.0" pickOnBounds="true" preserveRatio="true" VBox.vgrow="ALWAYS">
               <image>
                  <Image url="@img/userprofile.png" />
               </image>
               <VBox.margin>
                  <Insets bottom="-2.0" left="49.0" right="22.0" top="35.0" />
               </VBox.margin>
            </ImageView>
            <Label text="Utilisateur" textFill="#f2ebeb">
               <font>
                  <Font name="System" size="19.0" />
               </font>
               <padding>
                  <Insets left="59.0" />
               </padding>
            </Label>
            <ImageView fitHeight="180.0" fitWidth="212.0" pickOnBounds="true" preserveRatio="true" />
            <Button alignment="BOTTOM_LEFT" graphicTextGap="22.0" mnemonicParsing="false" prefHeight="37.0" prefWidth="218.0" style="-fx-background-color: #FEFEFE;" text="Feed" textFill="#170000">
               <graphic>
                  <ImageView fitHeight="23.0" fitWidth="27.0" pickOnBounds="true" preserveRatio="true">
                     <image>
                        <Image url="@img/user.png" />
                     </image>
                  </ImageView>
               </graphic>
               <padding>
                  <Insets bottom="9.0" left="50.0" top="3.0" />
               </padding>
            </Button>
            <Button alignment="TOP_LEFT" graphicTextGap="22.0" mnemonicParsing="false" prefHeight="33.0" prefWidth="236.0" style="-fx-background-color: #FEFEFE;" text="Profile" textFill="#170000">
               <graphic>
                  <ImageView fitHeight="23.0" fitWidth="27.0" pickOnBounds="true" preserveRatio="true">
                     <image>
                        <Image url="@img/user.png" />
                     </image>
                  </ImageView>
               </graphic>
               <padding>
                  <Insets bottom="9.0" left="50.0" top="2.0" />
               </padding>
            </Button>
            <Button alignment="TOP_LEFT" graphicTextGap="22.0" mnemonicParsing="false" prefHeight="32.0" prefWidth="227.0" style="-fx-background-color: #FEFEFE;" text="Sign out" textFill="#170000">
               <graphic>
                  <ImageView fitHeight="20.0" fitWidth="33.0" pickOnBounds="true" preserveRatio="true">
                     <image>
                        <Image url="@img/user.png" />
                     </image>
                  </ImageView>
               </graphic>
               <padding>
                  <Insets bottom="9.0" left="50.0" top="2.0" />
               </padding>
            </Button>
         </children>
      </VBox>
   </left>

   <!-- Center Content -->
   <center>
      <ScrollPane fitToHeight="true" fitToWidth="true">
         <VBox spacing="20" style="-fx-padding: 20;" styleClass="white-background">
            <!-- Top Bar with Create Post and Search -->
            <HBox prefHeight="31.0" prefWidth="1666.0" styleClass="white-background">
               <children>
                  <!-- Create Post Button -->
                  <HBox onMouseClicked="#openPostCreationModal" prefHeight="34.0" prefWidth="399.0" spacing="10.0" styleClass="clickable-container">
                     <children>
                        <ImageView fitHeight="34.0" fitWidth="36.0" pickOnBounds="true" preserveRatio="true">
                           <image>
                              <Image url="@img/add_post.jpg" />
                           </image>
                        </ImageView>
                        <Label contentDisplay="RIGHT" prefHeight="34.0" prefWidth="152.0" text="Add post">
                           <font>
                              <Font size="16.0" />
                           </font>
                        </Label>
                     </children>
                     <styleClass>
                        <String fx:value="primary-color" />
                        <String fx:value="shadow" />
                     </styleClass>
                  </HBox>

                  <Pane prefHeight="34.0" prefWidth="1039.0" HBox.hgrow="ALWAYS" />

                  <!-- Search Box -->
                  <HBox prefHeight="34.0" prefWidth="492.0" spacing="10.0">
                     <children>
                        <TextField fx:id="userSearchField" prefHeight="26.0" prefWidth="270.0" promptText="Search posts..." />
                        <ImageView fitHeight="34.0" fitWidth="36.0" pickOnBounds="true" preserveRatio="true">
                           <image>
                              <Image url="@img/ic_search.png" />
                           </image>
                        </ImageView>
                     </children>
                     <styleClass>
                        <String fx:value="primary-color" />
                        <String fx:value="shadow" />
                     </styleClass>
                  </HBox>
               </children>
            </HBox>

            <!-- Posts Container -->
            <VBox fx:id="postsContainer" spacing="15" styleClass="posts-container">
               <!-- Posts will be added here dynamically -->
            </VBox>

            <!-- Create Post Form (Initially Hidden) -->
            <VBox fx:id="createPostForm" managed="false" spacing="15" styleClass="post-form" visible="false">
               <HBox alignment="CENTER_LEFT" spacing="10">
                  <ImageView fx:id="userProfilePic" fitHeight="40" fitWidth="40" />
                  <Label fx:id="userName" text="User Name" />
               </HBox>

               <TextArea fx:id="postContent" promptText="What's on your mind?" wrapText="true" />

               <HBox alignment="CENTER_LEFT" spacing="10">
                  <Button onAction="#addImage" text="Add Image" />
                  <ImageView fx:id="selectedImage" fitHeight="100" fitWidth="100" managed="false" preserveRatio="true" visible="false" />
               </HBox>

               <HBox alignment="CENTER_RIGHT" spacing="10">
                  <Button onAction="#cancelPost" text="Cancel" />
                  <Button onAction="#publishPost" styleClass="publish-button" text="Publish" />
               </HBox>
            </VBox>
         </VBox>
      </ScrollPane>
   </center>
</BorderPane>

================
File: main/resources/com/example/projetjavafx/social/GroupFeed.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>

<VBox xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.projetjavafx.root.social.GroupController">
    <children>
        <Label text="Group Feed" style="-fx-font-size: 24px; -fx-padding: 10;" />

        <HBox spacing="10" padding="10">
            <TextArea fx:id="newPostContent" promptText="Write something..." prefHeight="100" />
            <Button text="Post" fx:id="postButton" />
        </HBox>

        <ListView fx:id="groupFeedListView" prefHeight="400">
            <!-- ListView will display posts -->
        </ListView>
    </children>
</VBox>

================
File: main/resources/com/example/projetjavafx/social/PostCreation.fxml
================
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.text.*?>
<?import javafx.geometry.*?>

<?import java.net.URL?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.image.Image?>
<BorderPane xmlns="http://javafx.com/javafx/17" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.projetjavafx.root.social.PostController">
    <top>
        <VBox spacing="10" style="-fx-padding: 20;">
            <HBox alignment="CENTER_LEFT" spacing="10">
                <Label text="Créer une publication" style="-fx-font-size: 24; -fx-font-weight: bold;"/>
                <ComboBox fx:id="privacyComboBox" promptText="Moi uniquement ▼"
                          style="-fx-background-color: transparent; -fx-border-color: #ccc;"/>            </HBox>
            <Separator/>
            <Label text="Hadil Lajili" style="-fx-font-weight: bold; -fx-font-size: 16;"/>
        </VBox>
    </top>
    <!-- Left Sidebar (Navigation Bar) -->

    <left>
        <VBox prefHeight="608.0" prefWidth="212.0" style="-fx-background-color: #1C2B5D;">
            <children>
                <ImageView fitHeight="106.0" fitWidth="114.0" pickOnBounds="true" preserveRatio="true" VBox.vgrow="ALWAYS">
                    <image>
                        <Image url="@img/user.png" />
                    </image>
                    <VBox.margin>
                        <Insets bottom="-2.0" left="49.0" right="22.0" top="35.0" />
                    </VBox.margin>
                </ImageView>
                <Label text="Utilisaeur" textFill="#f2ebeb">
                    <font>
                        <Font name="Apple Chancery" size="19.0" />
                    </font>
                    <padding>
                        <Insets left="59.0" />
                    </padding>
                </Label>
                <ImageView fitHeight="180.0" fitWidth="212.0" pickOnBounds="true" preserveRatio="true" />
                <Button alignment="BOTTOM_LEFT" graphicTextGap="22.0" mnemonicParsing="false" prefHeight="37.0" prefWidth="218.0" style="-fx-background-color: #FEFEFE;" text=" OverView" textFill="#170000">
                    <graphic>
                        <ImageView fitHeight="23.0" fitWidth="27.0" pickOnBounds="true" preserveRatio="true">
                            <image>
                                <Image url="@img/user.png" />
                            </image>
                        </ImageView>
                    </graphic>
                    <opaqueInsets>
                        <Insets />
                    </opaqueInsets>
                    <padding>
                        <Insets bottom="9.0" left="50.0" top="3.0" />
                    </padding>
                </Button>
                <Button alignment="TOP_LEFT" graphicTextGap="22.0" mnemonicParsing="false" prefHeight="33.0" prefWidth="236.0" style="-fx-background-color: #FEFEFE;" text=" Mesaages" textFill="#170000" wrapText="true">
                    <graphic>
                        <ImageView fitHeight="23.0" fitWidth="27.0" pickOnBounds="true" preserveRatio="true">
                            <image>
                                <Image url="@img/user.png" />
                            </image>
                        </ImageView>
                    </graphic>
                    <padding>
                        <Insets bottom="9.0" left="50.0" top="2.0" />
                    </padding>
                </Button>
                <Button alignment="TOP_LEFT" graphicTextGap="22.0" mnemonicParsing="false" prefHeight="33.0" prefWidth="230.0" style="-fx-background-color: #FEFEFE;" text="   Settings" textFill="#170000">
                    <graphic>
                        <ImageView fitHeight="17.0" fitWidth="17.0" nodeOrientation="RIGHT_TO_LEFT" pickOnBounds="true" preserveRatio="true">
                            <image>
                                <Image url="@img/user.png" />
                            </image>
                        </ImageView>
                    </graphic>
                    <padding>
                        <Insets bottom="9.0" left="50.0" top="5.0" />
                    </padding>
                </Button>
                <Button alignment="TOP_LEFT" graphicTextGap="22.0" mnemonicParsing="false" prefHeight="32.0" prefWidth="227.0" style="-fx-background-color: #FEFEFE;" text="  Sign out" textFill="#170000">
                    <graphic>
                        <ImageView fitHeight="20.0" fitWidth="33.0" pickOnBounds="true" preserveRatio="true">
                            <image>
                                <Image url="@img/user.png" />
                            </image>
                        </ImageView>
                    </graphic>
                    <padding>
                        <Insets bottom="9.0" left="50.0" top="2.0" />
                    </padding>
                </Button>
            </children>
        </VBox>
    </left>


    <!-- Center Content -->
    <center>
        <VBox spacing="20" style="-fx-padding: 20;">
            <TextArea fx:id="postContent"  promptText="Quoi de neuf, Hadil ?" style="-fx-min-height: 100; -fx-border-color: transparent;"/>

            <!-- Zone d'ajout de médias -->
            <StackPane  fx:id="mediaPreviewContainer" style="-fx-border-color: #ccc; -fx-border-style: dashed; -fx-border-radius: 5; -fx-padding: 20;">
                <VBox alignment="CENTER" spacing="10">
                    <Label onMouseClicked="#handleAddMediaClick" text="Ajouter des photos/vidéos&#10;ou faites glisser-déposer" textAlignment="CENTER"/>

                </VBox>
                <ImageView fx:id="mediaPreview" visible="false" fitWidth="300" preserveRatio="true"/>
            </StackPane>
        </VBox>
    </center>

    <bottom>
        <VBox spacing="10" style="-fx-padding: 20;">

            <Button fx:id="publishButton" text="Publier" style="-fx-background-color: #1877f2; -fx-text-fill: white; -fx-font-weight: bold; -fx-padding: 10 20;" />
        </VBox>
    </bottom>

    <stylesheets>
        <URL value="@css/social.css"/>
    </stylesheets>
</BorderPane>

================
File: main/resources/com/example/projetjavafx/social/PostItem.fxml
================
<?xml version="1.0" encoding="UTF-8"?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.image.ImageView?>
<?import javafx.geometry.Insets?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.image.Image?>
<VBox styleClass="post-background" spacing="10" xmlns="http://javafx.com/javafx/23.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.projetjavafx.root.social.PostItemController">
    <padding>
        <Insets top="15" right="15" bottom="15" left="15"/>
    </padding>

    <HBox spacing="10" alignment="CENTER_LEFT">
        <ImageView fx:id="userAvatar" fitHeight="40" fitWidth="40" />
        <Label fx:id="userName" styleClass="user-name" />
    </HBox>

    <Label fx:id="postContent" wrapText="true" />
    <ImageView fx:id="postImage" fitWidth="500" preserveRatio="true" />
    <!-- Add this inside the post container VBox -->
    <HBox spacing="10" alignment="CENTER_LEFT">
        <Button fx:id="likeButton" styleClass="interaction-button">
            <graphic>
                <ImageView fitHeight="20" fitWidth="20">
                    <Image url="@img/ic_care.png"/>
                </ImageView>
            </graphic>

        </Button>

        <Button fx:id="commentButton" styleClass="interaction-button">
            <graphic>
                <ImageView fitHeight="20" fitWidth="20">
                    <Image url="@img/ic_comment.png"/>
                </ImageView>
            </graphic>
        </Button>

        <Button fx:id="shareButton" styleClass="interaction-button">
            <graphic>
                <ImageView fitHeight="20" fitWidth="20">
                    <Image url="@img/ic_share.png"/>
                </ImageView>
            </graphic>
        </Button>
        <Button fx:id="deleteButton" onAction="#handleDelete" styleClass="delete-button" alignment="CENTER_RIGHT">
            <graphic>
                <ImageView fitHeight="16" fitWidth="16">
                    <Image url="@img/ic_more.png"/>
                </ImageView>
            </graphic>
        </Button>
    </HBox>
</VBox>



================================================================
End of Codebase
================================================================
